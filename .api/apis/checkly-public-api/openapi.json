{
  "openapi": "3.0.0",
  "info": {
    "title": "Checkly Public API",
    "version": "v1",
    "description": "These are the docs for the newly released Checkly Public API.<br />If you have any questions, please do not hesitate to get in touch with us.",
    "x-logo": {
      "url": "/logo.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Checkly Logo",
      "href": "https://checklyhq.com"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [],
  "paths": {
    "/v1/accounts": {
      "get": {
        "summary": "[beta] Fetch user accounts",
        "operationId": "getV1Accounts",
        "description": "<b>[beta]</b> List account details based on supplied API key. (This endpoint is in beta and may change without notice.)",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Checkly account ID.",
                        "example": "d43967ee-81db-4e0b-a18c-06be5c995288",
                        "x-format": {
                          "guid": true
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the account.",
                        "example": "Checkly"
                      },
                      "runtimeId": {
                        "type": "string",
                        "description": "The account default runtime ID.",
                        "example": "2022.10"
                      },
                      "settings": {
                        "type": "object",
                        "description": "The settings of the account."
                      },
                      "alertSettings": {
                        "type": "object",
                        "description": "The alert settings of the account."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/me": {
      "get": {
        "summary": "[beta] Fetch current account details",
        "operationId": "getV1AccountsMe",
        "description": "<b>[beta]</b> Get details from the current account (This endpoint is in beta and may change without notice.)",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Checkly account ID.",
                      "example": "d43967ee-81db-4e0b-a18c-06be5c995288",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the account.",
                      "example": "Checkly"
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The account default runtime ID.",
                      "example": "2022.10"
                    },
                    "settings": {
                      "type": "object",
                      "description": "The settings of the account."
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "The alert settings of the account."
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{accountId}": {
      "get": {
        "summary": "[beta] Fetch a given account details",
        "operationId": "getV1AccountsAccountid",
        "description": "<b>[beta]</b> Get details from a specific account. (This endpoint is in beta and may change without notice.)",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Checkly account ID.",
                      "example": "d43967ee-81db-4e0b-a18c-06be5c995288",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the account.",
                      "example": "Checkly"
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The account default runtime ID.",
                      "example": "2022.10"
                    },
                    "settings": {
                      "type": "object",
                      "description": "The settings of the account."
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "The alert settings of the account."
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/alert-channels": {
      "get": {
        "summary": "List all alert channels",
        "operationId": "getV1Alertchannels",
        "description": "Lists all configured alert channels and their subscribed checks.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Alert channels"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1,
                        "x-constraint": {
                          "sign": "positive"
                        }
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of alert channel, i.e. EMAIL or SLACK.",
                        "example": "SMS"
                      },
                      "config": {
                        "type": "object",
                        "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
                      },
                      "subscriptions": {
                        "type": "array",
                        "description": "All checks subscribed to this channel.",
                        "example": [],
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "example": 1
                            },
                            "checkId": {
                              "type": "string",
                              "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "groupId": {
                              "type": "number",
                              "example": "null",
                              "x-constraint": {
                                "sign": "positive"
                              }
                            },
                            "activated": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "activated"
                          ]
                        }
                      },
                      "sendRecovery": {
                        "type": "boolean"
                      },
                      "sendFailure": {
                        "type": "boolean"
                      },
                      "sendDegraded": {
                        "type": "boolean"
                      },
                      "sslExpiry": {
                        "type": "boolean",
                        "description": "Determines if an alert should be send for expiring SSL certificates.",
                        "default": false
                      },
                      "sslExpiryThreshold": {
                        "type": "integer",
                        "description": "At what moment in time to start alerting on SSL certificates.",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 30
                      },
                      "autoSubscribe": {
                        "type": "boolean",
                        "description": "Automatically subscribe newly created checks to this alert channel.",
                        "default": false
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an alert channel",
        "operationId": "postV1Alertchannels",
        "description": "Creates a new alert channel",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptions": {
                    "type": "array",
                    "description": "All checks subscribed to this channel.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "checkId": {
                          "type": "string",
                          "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "groupId": {
                          "type": "number",
                          "example": "null",
                          "x-constraint": {
                            "sign": "positive"
                          }
                        },
                        "activated": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "activated"
                      ]
                    }
                  },
                  "type": {
                    "type": "string",
                    "example": "SMS",
                    "enum": [
                      "EMAIL",
                      "SLACK",
                      "WEBHOOK",
                      "SMS",
                      "PAGERDUTY",
                      "OPSGENIE",
                      "CALL"
                    ]
                  },
                  "config": {
                    "type": "object"
                  },
                  "sendRecovery": {
                    "type": "boolean"
                  },
                  "sendFailure": {
                    "type": "boolean"
                  },
                  "sendDegraded": {
                    "type": "boolean"
                  },
                  "sslExpiry": {
                    "type": "boolean",
                    "description": "Determines if an alert should be send for expiring SSL certificates.",
                    "default": false
                  },
                  "sslExpiryThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates.",
                    "default": 30,
                    "minimum": 1,
                    "maximum": 30
                  },
                  "autoSubscribe": {
                    "type": "boolean",
                    "description": "Automatically subscribe newly created checks to this alert channel.",
                    "default": false
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              }
            }
          }
        },
        "tags": [
          "Alert channels"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1,
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of alert channel, i.e. EMAIL or SLACK.",
                      "example": "SMS"
                    },
                    "config": {
                      "type": "object",
                      "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
                    },
                    "subscriptions": {
                      "type": "array",
                      "description": "All checks subscribed to this channel.",
                      "example": [],
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "checkId": {
                            "type": "string",
                            "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "groupId": {
                            "type": "number",
                            "example": "null",
                            "x-constraint": {
                              "sign": "positive"
                            }
                          },
                          "activated": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "activated"
                        ]
                      }
                    },
                    "sendRecovery": {
                      "type": "boolean"
                    },
                    "sendFailure": {
                      "type": "boolean"
                    },
                    "sendDegraded": {
                      "type": "boolean"
                    },
                    "sslExpiry": {
                      "type": "boolean",
                      "description": "Determines if an alert should be send for expiring SSL certificates.",
                      "default": false
                    },
                    "sslExpiryThreshold": {
                      "type": "integer",
                      "description": "At what moment in time to start alerting on SSL certificates.",
                      "default": 30,
                      "minimum": 1,
                      "maximum": 30
                    },
                    "autoSubscribe": {
                      "type": "boolean",
                      "description": "Automatically subscribe newly created checks to this alert channel.",
                      "default": false
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/alert-channels/{id}": {
      "delete": {
        "summary": "Delete an alert channel",
        "operationId": "deleteV1AlertchannelsId",
        "description": "Permanently removes an alert channel",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Alert channels"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve an alert channel",
        "operationId": "getV1AlertchannelsId",
        "description": "Show details of a specific alert channel.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Alert channels"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1,
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of alert channel, i.e. EMAIL or SLACK.",
                      "example": "SMS"
                    },
                    "config": {
                      "type": "object",
                      "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
                    },
                    "subscriptions": {
                      "type": "array",
                      "description": "All checks subscribed to this channel.",
                      "example": [],
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "checkId": {
                            "type": "string",
                            "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "groupId": {
                            "type": "number",
                            "example": "null",
                            "x-constraint": {
                              "sign": "positive"
                            }
                          },
                          "activated": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "activated"
                        ]
                      }
                    },
                    "sendRecovery": {
                      "type": "boolean"
                    },
                    "sendFailure": {
                      "type": "boolean"
                    },
                    "sendDegraded": {
                      "type": "boolean"
                    },
                    "sslExpiry": {
                      "type": "boolean",
                      "description": "Determines if an alert should be send for expiring SSL certificates.",
                      "default": false
                    },
                    "sslExpiryThreshold": {
                      "type": "integer",
                      "description": "At what moment in time to start alerting on SSL certificates.",
                      "default": 30,
                      "minimum": 1,
                      "maximum": 30
                    },
                    "autoSubscribe": {
                      "type": "boolean",
                      "description": "Automatically subscribe newly created checks to this alert channel.",
                      "default": false
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an alert channel",
        "operationId": "putV1AlertchannelsId",
        "description": "Update an alert channel",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptions": {
                    "type": "array",
                    "description": "All checks subscribed to this channel.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 1
                        },
                        "checkId": {
                          "type": "string",
                          "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "groupId": {
                          "type": "number",
                          "example": "null",
                          "x-constraint": {
                            "sign": "positive"
                          }
                        },
                        "activated": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "activated"
                      ]
                    }
                  },
                  "type": {
                    "type": "string",
                    "example": "SMS",
                    "enum": [
                      "EMAIL",
                      "SLACK",
                      "WEBHOOK",
                      "SMS",
                      "PAGERDUTY",
                      "OPSGENIE",
                      "CALL"
                    ]
                  },
                  "config": {
                    "type": "object"
                  },
                  "sendRecovery": {
                    "type": "boolean"
                  },
                  "sendFailure": {
                    "type": "boolean"
                  },
                  "sendDegraded": {
                    "type": "boolean"
                  },
                  "sslExpiry": {
                    "type": "boolean",
                    "description": "Determines if an alert should be send for expiring SSL certificates.",
                    "default": false
                  },
                  "sslExpiryThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates.",
                    "default": 30,
                    "minimum": 1,
                    "maximum": 30
                  },
                  "autoSubscribe": {
                    "type": "boolean",
                    "description": "Automatically subscribe newly created checks to this alert channel.",
                    "default": false
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              }
            }
          }
        },
        "tags": [
          "Alert channels"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1,
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of alert channel, i.e. EMAIL or SLACK.",
                      "example": "SMS"
                    },
                    "config": {
                      "type": "object",
                      "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
                    },
                    "subscriptions": {
                      "type": "array",
                      "description": "All checks subscribed to this channel.",
                      "example": [],
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "checkId": {
                            "type": "string",
                            "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "groupId": {
                            "type": "number",
                            "example": "null",
                            "x-constraint": {
                              "sign": "positive"
                            }
                          },
                          "activated": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "activated"
                        ]
                      }
                    },
                    "sendRecovery": {
                      "type": "boolean"
                    },
                    "sendFailure": {
                      "type": "boolean"
                    },
                    "sendDegraded": {
                      "type": "boolean"
                    },
                    "sslExpiry": {
                      "type": "boolean",
                      "description": "Determines if an alert should be send for expiring SSL certificates.",
                      "default": false
                    },
                    "sslExpiryThreshold": {
                      "type": "integer",
                      "description": "At what moment in time to start alerting on SSL certificates.",
                      "default": 30,
                      "minimum": 1,
                      "maximum": 30
                    },
                    "autoSubscribe": {
                      "type": "boolean",
                      "description": "Automatically subscribe newly created checks to this alert channel.",
                      "default": false
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/alert-channels/{id}/subscriptions": {
      "put": {
        "summary": "Update the subscriptions of an alert channel",
        "operationId": "putV1AlertchannelsIdSubscriptions",
        "description": "Update the subscriptions of an alert channel. Use this to add a check to an alert channel so failure and recovery alerts are send out for that check. Note: when passing the subscription object, you can only specify a \"checkId\" or a \"groupId, not both.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "checkId": {
                    "type": "string",
                    "description": "You can either pass a checkId or a groupId, but not both.",
                    "example": "a6e7b0e7-f45c-4164-8863-166287b60651",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "groupId": {
                    "type": "number",
                    "description": "You can either pass a checkId or a groupId, but not both.",
                    "example": "null",
                    "x-constraint": {
                      "sign": "positive"
                    }
                  },
                  "activated": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "activated"
                ]
              }
            }
          }
        },
        "tags": [
          "Alert channels"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "checkId": {
                      "type": "string",
                      "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "groupId": {
                      "type": "number",
                      "example": "null",
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "activated": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "activated"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/alert-notifications": {
      "get": {
        "summary": "Lists all alert notifications",
        "operationId": "getV1Alertnotifications",
        "description": "Lists the alert notifications that have been sent for your account. You can filter by alert channel ID or limit to only failing notifications.<br><br>Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). This endpoint will return data within a 24-hours timeframe. If the `from` and `to` params are set, they must be at most 24 hours apart. If none are set, we will consider the `to` param to be now and the `from` param to be 24 hours earlier. If only the `to` param is set we will set `from` to be 24 hours earlier. If only the `from` param is set we will consider the `to` param to be 24 hours later.<br><br><b>Rate-limiting is applied to this endpoint, you can send 5 requests / 10 seconds at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "description": "Select documents up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Optional. Select alerts up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Limit results to an alert channel",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "alertChannelId",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Sending the alert notification was unsuccessful",
            "name": "hasFailures",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Alert notifications"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique ID of this alert notification."
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of alert channel (SMS, Slack, Webhook, etc).",
                        "enum": [
                          "EMAIL",
                          "SLACK",
                          "WEBHOOK",
                          "SMS",
                          "PAGERDUTY",
                          "OPSGENIE",
                          "CALL"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "description": "The status of the alert.",
                        "enum": [
                          "IN_PROGRESS",
                          "SUCCESS",
                          "FAILURE"
                        ]
                      },
                      "alertConfig": {
                        "type": "object",
                        "description": "The configuration which was used to send the alert."
                      },
                      "notificationResult": {
                        "type": "string",
                        "description": "The result of sending the alert notification.For example, this could be the response body of the Webhook."
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the alert was sent."
                      },
                      "checkType": {
                        "type": "string",
                        "description": "The type of the check.",
                        "enum": [
                          "API",
                          "BROWSER",
                          "HEARTBEAT",
                          "MULTI_STEP"
                        ]
                      },
                      "checkId": {
                        "type": "string",
                        "description": "The ID of the check."
                      },
                      "checkAlertId": {
                        "type": "string",
                        "description": "The ID of the check alert."
                      },
                      "alertChannelId": {
                        "type": "number",
                        "description": "The ID of the alert channel which this alert was sent to."
                      },
                      "checkResultId": {
                        "type": "string",
                        "description": "The ID of the corresponding check result."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/analytics/api-checks/{id}": {
      "get": {
        "summary": "API checks",
        "operationId": "getV1AnalyticsApichecksId",
        "description": "Fetch detailed availability metrics and aggregated or non-aggregated API Check metrics across custom time ranges. For example, you can get the p99 and p95 of all the DNS phases of your API check together with the availability percentage for any time range.<br><br><b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "quickRange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hours",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hours"
            }
          },
          {
            "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 300, 24 hours is 1440.",
            "name": "aggregationInterval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 43200
            }
          },
          {
            "description": "Filter based on whether a check result was either failing or passing",
            "x-constraint": {
              "single": true
            },
            "name": "filterByStatus",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "success",
                  "failure"
                ]
              }
            }
          },
          {
            "description": "Determines how the series data is grouped.",
            "name": "groupBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "runLocation",
                "statusCode"
              ]
            }
          },
          {
            "description": "Available metrics for API Checks. You can pass multiple metrics as a comma separated string.",
            "x-constraint": {
              "single": true
            },
            "name": "metrics",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "responseTime",
                  "wait",
                  "dns",
                  "tcp",
                  "firstByte",
                  "download",
                  "availability",
                  "responseTime_avg",
                  "responseTime_max",
                  "responseTime_median",
                  "responseTime_min",
                  "responseTime_p50",
                  "responseTime_p90",
                  "responseTime_p95",
                  "responseTime_p99",
                  "responseTime_stddev",
                  "responseTime_sum",
                  "wait_avg",
                  "wait_max",
                  "wait_median",
                  "wait_min",
                  "wait_p50",
                  "wait_p90",
                  "wait_p95",
                  "wait_p99",
                  "wait_stddev",
                  "wait_sum",
                  "dns_avg",
                  "dns_max",
                  "dns_median",
                  "dns_min",
                  "dns_p50",
                  "dns_p90",
                  "dns_p95",
                  "dns_p99",
                  "dns_stddev",
                  "dns_sum",
                  "tcp_avg",
                  "tcp_max",
                  "tcp_median",
                  "tcp_min",
                  "tcp_p50",
                  "tcp_p90",
                  "tcp_p95",
                  "tcp_p99",
                  "tcp_stddev",
                  "tcp_sum",
                  "firstByte_avg",
                  "firstByte_max",
                  "firstByte_median",
                  "firstByte_min",
                  "firstByte_p50",
                  "firstByte_p90",
                  "firstByte_p95",
                  "firstByte_p99",
                  "firstByte_stddev",
                  "firstByte_sum",
                  "download_avg",
                  "download_max",
                  "download_median",
                  "download_min",
                  "download_p50",
                  "download_p90",
                  "download_p95",
                  "download_p99",
                  "download_stddev",
                  "download_sum"
                ]
              }
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checkId": {
                      "type": "string",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    },
                    "activated": {
                      "type": "boolean"
                    },
                    "muted": {
                      "type": "boolean"
                    },
                    "frequency": {
                      "type": "number"
                    },
                    "from": {
                      "type": "string",
                      "format": "date"
                    },
                    "to": {
                      "type": "string",
                      "format": "date"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "series": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "string": {
                          "type": "object",
                          "properties": {
                            "unit": {
                              "type": "string",
                              "enum": [
                                "milliseconds",
                                "score",
                                "count",
                                "percentage"
                              ]
                            },
                            "label": {
                              "type": "string"
                            },
                            "aggregation": {
                              "type": "string",
                              "enum": [
                                "avg",
                                "max",
                                "median",
                                "min",
                                "p50",
                                "p90",
                                "p95",
                                "p99",
                                "stddev",
                                "sum"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/analytics/browser-checks/{id}": {
      "get": {
        "summary": "Browser checks",
        "operationId": "getV1AnalyticsBrowserchecksId",
        "description": "Fetch detailed availability metrics and aggregated or non-aggregated Browser Check metrics across custom time ranges.  For example, you can get the average amount of console errors, the p99 of your FCP and the standard deviation of your TTFB for the second page in your Browser check with one API call.<br><br><b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "quickRange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hours",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hours"
            }
          },
          {
            "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 300, 24 hours is 1440.",
            "name": "aggregationInterval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 43200
            }
          },
          {
            "description": "Filter based on whether a check result was either failing or passing",
            "x-constraint": {
              "single": true
            },
            "name": "filterByStatus",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "success",
                  "failure"
                ]
              }
            }
          },
          {
            "description": "Determines how the series data is grouped. Note that grouped queries are a bit more expensive and might take longer.",
            "name": "groupBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "runLocation",
                "pageIndex"
              ]
            }
          },
          {
            "description": "Available metrics for Browser Checks. You can pass multiple metrics as a comma separated string.",
            "x-constraint": {
              "single": true
            },
            "name": "metrics",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "responseTime",
                  "TTFB",
                  "FCP",
                  "LCP",
                  "CLS",
                  "TBT",
                  "consoleErrors",
                  "networkErrors",
                  "userScriptErrors",
                  "documentErrors",
                  "availability",
                  "responseTime_avg",
                  "responseTime_max",
                  "responseTime_median",
                  "responseTime_min",
                  "responseTime_p50",
                  "responseTime_p90",
                  "responseTime_p95",
                  "responseTime_p99",
                  "responseTime_stddev",
                  "responseTime_sum",
                  "TTFB_avg",
                  "TTFB_max",
                  "TTFB_median",
                  "TTFB_min",
                  "TTFB_p50",
                  "TTFB_p90",
                  "TTFB_p95",
                  "TTFB_p99",
                  "TTFB_stddev",
                  "TTFB_sum",
                  "FCP_avg",
                  "FCP_max",
                  "FCP_median",
                  "FCP_min",
                  "FCP_p50",
                  "FCP_p90",
                  "FCP_p95",
                  "FCP_p99",
                  "FCP_stddev",
                  "FCP_sum",
                  "LCP_avg",
                  "LCP_max",
                  "LCP_median",
                  "LCP_min",
                  "LCP_p50",
                  "LCP_p90",
                  "LCP_p95",
                  "LCP_p99",
                  "LCP_stddev",
                  "LCP_sum",
                  "CLS_avg",
                  "CLS_max",
                  "CLS_median",
                  "CLS_min",
                  "CLS_p50",
                  "CLS_p90",
                  "CLS_p95",
                  "CLS_p99",
                  "CLS_stddev",
                  "CLS_sum",
                  "TBT_avg",
                  "TBT_max",
                  "TBT_median",
                  "TBT_min",
                  "TBT_p50",
                  "TBT_p90",
                  "TBT_p95",
                  "TBT_p99",
                  "TBT_stddev",
                  "TBT_sum",
                  "consoleErrors_avg",
                  "consoleErrors_max",
                  "consoleErrors_median",
                  "consoleErrors_min",
                  "consoleErrors_p50",
                  "consoleErrors_p90",
                  "consoleErrors_p95",
                  "consoleErrors_p99",
                  "consoleErrors_stddev",
                  "consoleErrors_sum",
                  "networkErrors_avg",
                  "networkErrors_max",
                  "networkErrors_median",
                  "networkErrors_min",
                  "networkErrors_p50",
                  "networkErrors_p90",
                  "networkErrors_p95",
                  "networkErrors_p99",
                  "networkErrors_stddev",
                  "networkErrors_sum",
                  "userScriptErrors_avg",
                  "userScriptErrors_max",
                  "userScriptErrors_median",
                  "userScriptErrors_min",
                  "userScriptErrors_p50",
                  "userScriptErrors_p90",
                  "userScriptErrors_p95",
                  "userScriptErrors_p99",
                  "userScriptErrors_stddev",
                  "userScriptErrors_sum",
                  "documentErrors_avg",
                  "documentErrors_max",
                  "documentErrors_median",
                  "documentErrors_min",
                  "documentErrors_p50",
                  "documentErrors_p90",
                  "documentErrors_p95",
                  "documentErrors_p99",
                  "documentErrors_stddev",
                  "documentErrors_sum"
                ]
              }
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checkId": {
                      "type": "string",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    },
                    "activated": {
                      "type": "boolean"
                    },
                    "muted": {
                      "type": "boolean"
                    },
                    "frequency": {
                      "type": "number"
                    },
                    "from": {
                      "type": "string",
                      "format": "date"
                    },
                    "to": {
                      "type": "string",
                      "format": "date"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "series": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "string": {
                          "type": "object",
                          "properties": {
                            "unit": {
                              "type": "string",
                              "enum": [
                                "milliseconds",
                                "score",
                                "count",
                                "percentage"
                              ]
                            },
                            "label": {
                              "type": "string"
                            },
                            "aggregation": {
                              "type": "string",
                              "enum": [
                                "avg",
                                "max",
                                "median",
                                "min",
                                "p50",
                                "p90",
                                "p95",
                                "p99",
                                "stddev",
                                "sum"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/analytics/heartbeat-checks/{id}": {
      "get": {
        "summary": "Heartbeat checks",
        "operationId": "getV1AnalyticsHeartbeatchecksId",
        "description": "Fetch detailed availability metrics and aggregated or non-aggregated Heartbeat Check metrics across custom time ranges. <b>Rate-limiting is applied to this endpoint, you can send 600 requests / 60 seconds at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "quickRange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hours",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hours"
            }
          },
          {
            "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 300, 24 hours is 1440.",
            "name": "aggregationInterval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 43200
            }
          },
          {
            "description": "Filter based on whether a heartbeat request was late, early, etc.",
            "x-constraint": {
              "single": true
            },
            "name": "filterByStatus",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "FAILING",
                  "EARLY",
                  "RECEIVED",
                  "GRACE",
                  "LATE"
                ]
              }
            }
          },
          {
            "description": "Available metrics for Heartbeat Checks. You can pass multiple metrics as a comma separated string.",
            "x-constraint": {
              "single": true
            },
            "name": "metrics",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "availability"
                ]
              },
              "default": [
                "availability"
              ]
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checkId": {
                      "type": "string",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    },
                    "activated": {
                      "type": "boolean"
                    },
                    "muted": {
                      "type": "boolean"
                    },
                    "frequency": {
                      "type": "number"
                    },
                    "from": {
                      "type": "string",
                      "format": "date"
                    },
                    "to": {
                      "type": "string",
                      "format": "date"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "series": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "string": {
                          "type": "object",
                          "properties": {
                            "unit": {
                              "type": "string",
                              "enum": [
                                "milliseconds",
                                "score",
                                "count",
                                "percentage"
                              ]
                            },
                            "label": {
                              "type": "string"
                            },
                            "aggregation": {
                              "type": "string",
                              "enum": [
                                "avg",
                                "max",
                                "median",
                                "min",
                                "p50",
                                "p90",
                                "p95",
                                "p99",
                                "stddev",
                                "sum"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/analytics/metrics": {
      "get": {
        "summary": "List all available reporting metrics.",
        "operationId": "getV1AnalyticsMetrics",
        "description": "List all available reporting metrics.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "BROWSER",
                "HEARTBEAT",
                "MULTI_STEP"
              ]
            }
          }
        ],
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/analytics/multistep-checks/{id}": {
      "get": {
        "summary": "Multistep checks",
        "operationId": "getV1AnalyticsMultistepchecksId",
        "description": "Fetch detailed availability metrics and aggregated or non-aggregated Multistep Check metrics across custom time ranges. <b>Rate-limiting is applied to this endpoint, you can send 30 requests / 60 seconds at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "quickRange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hours",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hours"
            }
          },
          {
            "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 300, 24 hours is 1440.",
            "name": "aggregationInterval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 43200
            }
          },
          {
            "description": "Filter based on whether a check result was either failing or passing",
            "x-constraint": {
              "single": true
            },
            "name": "filterByStatus",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "success",
                  "failure"
                ]
              }
            }
          },
          {
            "description": "Determines how the series data is grouped.",
            "name": "groupBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "runLocation"
              ]
            }
          },
          {
            "description": "Available metrics for Multistep Checks. You can pass multiple metrics as a comma separated string.",
            "x-constraint": {
              "single": true
            },
            "name": "metrics",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "responseTime",
                  "availability",
                  "responseTime_avg",
                  "responseTime_max",
                  "responseTime_median",
                  "responseTime_min",
                  "responseTime_p50",
                  "responseTime_p90",
                  "responseTime_p95",
                  "responseTime_p99",
                  "responseTime_stddev",
                  "responseTime_sum"
                ]
              }
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "checkId": {
                      "type": "string",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    },
                    "activated": {
                      "type": "boolean"
                    },
                    "muted": {
                      "type": "boolean"
                    },
                    "frequency": {
                      "type": "number"
                    },
                    "from": {
                      "type": "string",
                      "format": "date"
                    },
                    "to": {
                      "type": "string",
                      "format": "date"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "series": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "string": {
                          "type": "object",
                          "properties": {
                            "unit": {
                              "type": "string",
                              "enum": [
                                "milliseconds",
                                "score",
                                "count",
                                "percentage"
                              ]
                            },
                            "label": {
                              "type": "string"
                            },
                            "aggregation": {
                              "type": "string",
                              "enum": [
                                "avg",
                                "max",
                                "median",
                                "min",
                                "p50",
                                "p90",
                                "p95",
                                "p99",
                                "stddev",
                                "sum"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/badges/checks/{checkId}": {
      "get": {
        "operationId": "getV1BadgesChecksCheckid",
        "description": "Get check status badge. You can enable the badges feature in <a href=\"https://app.checklyhq.com/settings/account/general\">account settings</a>",
        "parameters": [
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "style",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "flat",
                "plastic",
                "flat-square",
                "for-the-badge",
                "social"
              ],
              "default": "flat"
            }
          },
          {
            "name": "theme",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "light",
                "dark",
                "default"
              ],
              "default": "default"
            }
          },
          {
            "name": "responseTime",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Badges"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "(<svg)([^<]*|[^>]*)"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/badges/groups/{groupId}": {
      "get": {
        "operationId": "getV1BadgesGroupsGroupid",
        "description": "Get group status badge. You can enable the badges feature in <a href=\"https://app.checklyhq.com/settings/account/general\">account settings</a>",
        "parameters": [
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "style",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "flat",
                "plastic",
                "flat-square",
                "for-the-badge",
                "social"
              ],
              "default": "flat"
            }
          },
          {
            "name": "theme",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "light",
                "dark",
                "default"
              ],
              "default": "default"
            }
          },
          {
            "name": "responseTime",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Badges"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "(<svg)([^<]*|[^>]*)"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/check-alerts": {
      "get": {
        "summary": "List all alerts for your account",
        "operationId": "getV1Checkalerts",
        "description": "Lists all alerts for your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "description": "Select documents up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Optional. Select alerts up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "Check alerts"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique ID of this alert.",
                        "example": "1"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "API Check"
                      },
                      "checkId": {
                        "type": "string",
                        "description": "The ID of check this alert belongs to.",
                        "example": "ffd7eb24-2f8a-49fe-8bbc-0cf6a579375f"
                      },
                      "alertType": {
                        "type": "string",
                        "description": "The type of alert.",
                        "example": "ALERT_FAILURE",
                        "enum": [
                          "NO_ALERT",
                          "ALERT_FAILURE",
                          "ALERT_FAILURE_REMAIN",
                          "ALERT_FAILURE_DEGRADED",
                          "ALERT_RECOVERY",
                          "ALERT_DEGRADED",
                          "ALERT_DEGRADED_REMAIN",
                          "ALERT_DEGRADED_FAILURE",
                          "ALERT_DEGRADED_RECOVERY",
                          "ALERT_SSL"
                        ]
                      },
                      "checkType": {
                        "type": "string",
                        "description": "The type of the check.",
                        "example": "API",
                        "enum": [
                          "API",
                          "BROWSER",
                          "HEARTBEAT",
                          "MULTI_STEP"
                        ]
                      },
                      "runLocation": {
                        "type": "string",
                        "description": "What data center location this check alert was triggered from.",
                        "example": "us-east-1"
                      },
                      "responseTime": {
                        "type": "number",
                        "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.",
                        "example": 10
                      },
                      "error": {
                        "type": "string",
                        "description": "Any specific error messages that were part of the failing check triggering the alert.",
                        "example": "OK"
                      },
                      "statusCode": {
                        "type": "string",
                        "description": "The status code of the response. Only applies to API checks.",
                        "example": "200"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The date and time this check alert was created."
                      },
                      "startedAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The date and time this check alert was started."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-alerts/{checkId}": {
      "get": {
        "summary": "List alerts for a specific check",
        "operationId": "getV1CheckalertsCheckid",
        "description": "Lists all the alerts for a specific check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "description": "Select documents up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Optional. Select alerts up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "Check alerts"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique ID of this alert.",
                        "example": "1"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "API Check"
                      },
                      "checkId": {
                        "type": "string",
                        "description": "The ID of check this alert belongs to.",
                        "example": "ffd7eb24-2f8a-49fe-8bbc-0cf6a579375f"
                      },
                      "alertType": {
                        "type": "string",
                        "description": "The type of alert.",
                        "example": "ALERT_FAILURE",
                        "enum": [
                          "NO_ALERT",
                          "ALERT_FAILURE",
                          "ALERT_FAILURE_REMAIN",
                          "ALERT_FAILURE_DEGRADED",
                          "ALERT_RECOVERY",
                          "ALERT_DEGRADED",
                          "ALERT_DEGRADED_REMAIN",
                          "ALERT_DEGRADED_FAILURE",
                          "ALERT_DEGRADED_RECOVERY",
                          "ALERT_SSL"
                        ]
                      },
                      "checkType": {
                        "type": "string",
                        "description": "The type of the check.",
                        "example": "API",
                        "enum": [
                          "API",
                          "BROWSER",
                          "HEARTBEAT",
                          "MULTI_STEP"
                        ]
                      },
                      "runLocation": {
                        "type": "string",
                        "description": "What data center location this check alert was triggered from.",
                        "example": "us-east-1"
                      },
                      "responseTime": {
                        "type": "number",
                        "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.",
                        "example": 10
                      },
                      "error": {
                        "type": "string",
                        "description": "Any specific error messages that were part of the failing check triggering the alert.",
                        "example": "OK"
                      },
                      "statusCode": {
                        "type": "string",
                        "description": "The status code of the response. Only applies to API checks.",
                        "example": "200"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The date and time this check alert was created."
                      },
                      "startedAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The date and time this check alert was started."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups": {
      "get": {
        "summary": "List all check groups",
        "operationId": "getV1Checkgroups",
        "description": "Lists all current check groups in your account. The \"checks\" property is an array of check UUID's for convenient referencing. It is read only and you cannot use it to add checks to a group.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Check groups"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the check group.",
                        "example": "Check group"
                      },
                      "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the  group are running or not."
                      },
                      "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
                      },
                      "tags": {
                        "type": "array",
                        "description": "Tags for organizing and filtering checks.",
                        "example": [
                          "production"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "locations": {
                        "type": "array",
                        "description": "An array of one or more data center locations where to run the checks.",
                        "example": [
                          "us-east-1",
                          "eu-central-1"
                        ],
                        "items": {
                          "type": "string",
                          "enum": [
                            "us-east-1",
                            "us-east-2",
                            "us-west-1",
                            "us-west-2",
                            "ca-central-1",
                            "sa-east-1",
                            "eu-west-1",
                            "eu-central-1",
                            "eu-west-2",
                            "eu-west-3",
                            "eu-north-1",
                            "eu-south-1",
                            "me-south-1",
                            "ap-southeast-1",
                            "ap-northeast-1",
                            "ap-east-1",
                            "ap-southeast-2",
                            "ap-southeast-3",
                            "ap-northeast-2",
                            "ap-northeast-3",
                            "ap-south-1",
                            "af-south-1"
                          ]
                        }
                      },
                      "concurrency": {
                        "type": "number",
                        "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                        "default": 3,
                        "minimum": 1,
                        "x-constraint": {
                          "sign": "positive"
                        }
                      },
                      "apiCheckDefaults": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                            "example": "https://api.example.com/v1",
                            "default": ""
                          },
                          "headers": {
                            "type": "array",
                            "example": [
                              {
                                "key": "Cache-Control",
                                "value": "no-store"
                              }
                            ],
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string",
                                  "default": ""
                                },
                                "locked": {
                                  "type": "boolean",
                                  "default": false
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ]
                            }
                          },
                          "queryParameters": {
                            "type": "array",
                            "example": [
                              {
                                "key": "Page",
                                "value": "1"
                              }
                            ],
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string",
                                  "default": ""
                                },
                                "locked": {
                                  "type": "boolean",
                                  "default": false
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ]
                            }
                          },
                          "assertions": {
                            "type": "array",
                            "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                            "example": [
                              {
                                "source": "STATUS_CODE",
                                "comparision": "NOT_EMPTY",
                                "target": "200"
                              }
                            ],
                            "items": {
                              "type": "object",
                              "properties": {
                                "source": {
                                  "type": "string",
                                  "enum": [
                                    "STATUS_CODE",
                                    "JSON_BODY",
                                    "HEADERS",
                                    "TEXT_BODY",
                                    "RESPONSE_TIME"
                                  ]
                                },
                                "property": {
                                  "type": "string",
                                  "default": ""
                                },
                                "comparison": {
                                  "type": "string",
                                  "enum": [
                                    "EQUALS",
                                    "NOT_EQUALS",
                                    "HAS_KEY",
                                    "NOT_HAS_KEY",
                                    "HAS_VALUE",
                                    "NOT_HAS_VALUE",
                                    "IS_EMPTY",
                                    "NOT_EMPTY",
                                    "GREATER_THAN",
                                    "LESS_THAN",
                                    "CONTAINS",
                                    "NOT_CONTAINS",
                                    "IS_NULL",
                                    "NOT_NULL"
                                  ]
                                },
                                "target": {
                                  "type": "string",
                                  "default": ""
                                },
                                "regex": {
                                  "type": "string",
                                  "default": ""
                                }
                              }
                            }
                          },
                          "basicAuth": {
                            "type": "object",
                            "properties": {
                              "username": {
                                "type": "string",
                                "example": "admin",
                                "default": ""
                              },
                              "password": {
                                "type": "string",
                                "example": "abc12345",
                                "default": ""
                              }
                            },
                            "required": [
                              "username",
                              "password"
                            ]
                          }
                        }
                      },
                      "browserCheckDefaults": {
                        "type": "string"
                      },
                      "environmentVariables": {
                        "type": "array",
                        "maxItems": 50,
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "The key of the environment variable (this value cannot be changed).",
                              "example": "API_KEY"
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the environment variable.",
                              "example": "bAxD7biGCZL6K60Q"
                            },
                            "locked": {
                              "type": "boolean",
                              "description": "Used only in the UI to hide the value like a password.",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "doubleCheck": {
                        "type": "boolean",
                        "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
                      },
                      "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
                      },
                      "alertSettings": {
                        "type": "object",
                        "description": "Alert settings.",
                        "default": {
                          "escalationType": "RUN_BASED",
                          "runBasedEscalation": {
                            "failedRunThreshold": 1
                          },
                          "reminders": {
                            "amount": 0,
                            "interval": 5
                          },
                          "parallelRunFailureThreshold": {
                            "enabled": false,
                            "percentage": 10
                          }
                        },
                        "enum": [
                          {
                            "value": {}
                          }
                        ],
                        "properties": {
                          "escalationType": {
                            "type": "string",
                            "description": "Determines what type of escalation to use.",
                            "default": "RUN_BASED",
                            "enum": [
                              "RUN_BASED",
                              "TIME_BASED"
                            ]
                          },
                          "reminders": {
                            "type": "object",
                            "properties": {
                              "amount": {
                                "type": "number",
                                "description": "How many reminders to send out after the initial alert notification.",
                                "default": 0,
                                "enum": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  100000
                                ]
                              },
                              "interval": {
                                "type": "number",
                                "description": "At what interval the reminders should be send.",
                                "default": 5,
                                "enum": [
                                  5,
                                  10,
                                  15,
                                  30
                                ]
                              }
                            }
                          },
                          "sslCertificates": {
                            "type": "object",
                            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Determines if alert notifications should be send for expiring SSL certificates."
                              },
                              "alertThreshold": {
                                "type": "integer",
                                "description": "At what moment in time to start alerting on SSL certificates."
                              }
                            }
                          },
                          "runBasedEscalation": {
                            "type": "object",
                            "properties": {
                              "failedRunThreshold": {
                                "type": "number",
                                "description": "After how many failed consecutive check runs an alert notification should be send.",
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5
                                ]
                              }
                            }
                          },
                          "timeBasedEscalation": {
                            "type": "object",
                            "properties": {
                              "minutesFailingThreshold": {
                                "type": "number",
                                "description": "After how many minutes after a check starts failing an alert should be send.",
                                "enum": [
                                  5,
                                  10,
                                  15,
                                  30
                                ]
                              }
                            }
                          },
                          "parallelRunFailureThreshold": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "Determines if parallel run threshold is enabled",
                                "default": false
                              },
                              "percentage": {
                                "type": "number",
                                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                                "default": 10,
                                "enum": [
                                  10,
                                  20,
                                  30,
                                  40,
                                  50,
                                  60,
                                  70,
                                  80,
                                  90,
                                  100
                                ]
                              }
                            }
                          }
                        }
                      },
                      "alertChannelSubscriptions": {
                        "type": "array",
                        "description": "List of alert channel subscriptions.",
                        "items": {
                          "type": "object",
                          "description": "Alert channel subscription.",
                          "properties": {
                            "alertChannelId": {
                              "type": "number"
                            },
                            "activated": {
                              "type": "boolean",
                              "default": true
                            }
                          },
                          "required": [
                            "alertChannelId",
                            "activated"
                          ]
                        }
                      },
                      "setupSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                        "example": "null"
                      },
                      "tearDownSnippetId": {
                        "type": "number",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                        "example": "null"
                      },
                      "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                        "example": "null"
                      },
                      "localTearDownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                        "example": "null"
                      },
                      "runtimeId": {
                        "type": "string",
                        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                        "example": "null",
                        "enum": [
                          "2024.02",
                          "2023.09",
                          "2023.02",
                          "2022.10",
                          "2022.02"
                        ]
                      },
                      "privateLocations": {
                        "type": "array",
                        "description": "An array of one or more private locations where to run the check.",
                        "example": [
                          "data-center-eu"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "retryStrategy": {
                        "type": "object",
                        "description": "The strategy to determine how failed checks are retried.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Determines which type of retry strategy to use.",
                            "enum": [
                              "FIXED",
                              "LINEAR",
                              "EXPONENTIAL"
                            ]
                          },
                          "baseBackoffSeconds": {
                            "type": "number",
                            "description": "The number of seconds to wait before the first retry attempt.",
                            "default": 60
                          },
                          "maxRetries": {
                            "type": "number",
                            "description": "The maximum number of attempts to retry the check.",
                            "default": 2,
                            "minimum": 1,
                            "maximum": 10
                          },
                          "maxDurationSeconds": {
                            "type": "number",
                            "description": "The total amount of time to continue retrying the check.",
                            "default": 600,
                            "minimum": 0,
                            "maximum": 600
                          },
                          "sameRegion": {
                            "type": "boolean",
                            "description": "Whether retries should be run in the same region as the initial check run.",
                            "default": true
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "runParallel": {
                        "type": "boolean",
                        "description": "When true, the checks in the group will run in parallel in all selected locations.",
                        "default": false
                      }
                    },
                    "required": [
                      "name",
                      "activated",
                      "concurrency",
                      "apiCheckDefaults"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a check group",
        "operationId": "postV1Checkgroups",
        "description": "Creates a new check group. You can add checks to the group by setting the \"groupId\" property of individual checks.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check group.",
                    "example": "Check group"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group are running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
                    "default": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run the checks.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "concurrency": {
                    "type": "number",
                    "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                    "default": 3,
                    "minimum": 1,
                    "x-constraint": {
                      "sign": "positive"
                    }
                  },
                  "apiCheckDefaults": {
                    "type": "object",
                    "example": {
                      "url": "https://api.example.com/v1",
                      "headers": [
                        {
                          "key": "Cache-Control",
                          "value": "no-store"
                        }
                      ],
                      "queryParameters": [
                        {
                          "key": "Page",
                          "value": "1"
                        }
                      ],
                      "assertions": [
                        {
                          "source": "STATUS_CODE",
                          "comparision": "NOT_EMPTY",
                          "target": "200"
                        }
                      ],
                      "basicAuth": {
                        "username": "admin",
                        "password": "abc12345"
                      }
                    },
                    "default": {},
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                        "example": "https://api.example.com/v1",
                        "default": ""
                      },
                      "headers": {
                        "type": "array",
                        "example": [
                          {
                            "key": "Cache-Control",
                            "value": "no-store"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "queryParameters": {
                        "type": "array",
                        "example": [
                          {
                            "key": "Page",
                            "value": "1"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "assertions": {
                        "type": "array",
                        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                        "example": [
                          {
                            "source": "STATUS_CODE",
                            "comparision": "NOT_EMPTY",
                            "target": "200"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "STATUS_CODE",
                                "JSON_BODY",
                                "HEADERS",
                                "TEXT_BODY",
                                "RESPONSE_TIME"
                              ]
                            },
                            "property": {
                              "type": "string",
                              "default": ""
                            },
                            "comparison": {
                              "type": "string",
                              "enum": [
                                "EQUALS",
                                "NOT_EQUALS",
                                "HAS_KEY",
                                "NOT_HAS_KEY",
                                "HAS_VALUE",
                                "NOT_HAS_VALUE",
                                "IS_EMPTY",
                                "NOT_EMPTY",
                                "GREATER_THAN",
                                "LESS_THAN",
                                "CONTAINS",
                                "NOT_CONTAINS",
                                "IS_NULL",
                                "NOT_NULL"
                              ]
                            },
                            "target": {
                              "type": "string",
                              "default": ""
                            },
                            "regex": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      },
                      "basicAuth": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "example": "admin",
                            "default": ""
                          },
                          "password": {
                            "type": "string",
                            "example": "abc12345",
                            "default": ""
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      }
                    }
                  },
                  "browserCheckDefaults": {
                    "type": "string"
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group.",
                    "default": true
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the checks.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the checks in the group will run in parallel in all selected locations.",
                    "default": false
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "Check groups"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check group.",
                      "example": "Check group"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the checks in the  group are running or not."
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run the checks.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "concurrency": {
                      "type": "number",
                      "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                      "default": 3,
                      "minimum": 1,
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "apiCheckDefaults": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                          "example": "https://api.example.com/v1",
                          "default": ""
                        },
                        "headers": {
                          "type": "array",
                          "example": [
                            {
                              "key": "Cache-Control",
                              "value": "no-store"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "queryParameters": {
                          "type": "array",
                          "example": [
                            {
                              "key": "Page",
                              "value": "1"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "assertions": {
                          "type": "array",
                          "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                          "example": [
                            {
                              "source": "STATUS_CODE",
                              "comparision": "NOT_EMPTY",
                              "target": "200"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "enum": [
                                  "STATUS_CODE",
                                  "JSON_BODY",
                                  "HEADERS",
                                  "TEXT_BODY",
                                  "RESPONSE_TIME"
                                ]
                              },
                              "property": {
                                "type": "string",
                                "default": ""
                              },
                              "comparison": {
                                "type": "string",
                                "enum": [
                                  "EQUALS",
                                  "NOT_EQUALS",
                                  "HAS_KEY",
                                  "NOT_HAS_KEY",
                                  "HAS_VALUE",
                                  "NOT_HAS_VALUE",
                                  "IS_EMPTY",
                                  "NOT_EMPTY",
                                  "GREATER_THAN",
                                  "LESS_THAN",
                                  "CONTAINS",
                                  "NOT_CONTAINS",
                                  "IS_NULL",
                                  "NOT_NULL"
                                ]
                              },
                              "target": {
                                "type": "string",
                                "default": ""
                              },
                              "regex": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "basicAuth": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "example": "admin",
                              "default": ""
                            },
                            "password": {
                              "type": "string",
                              "example": "abc12345",
                              "default": ""
                            }
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        }
                      }
                    },
                    "browserCheckDefaults": {
                      "type": "string"
                    },
                    "environmentVariables": {
                      "type": "array",
                      "maxItems": 50,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "The key of the environment variable (this value cannot be changed).",
                            "example": "API_KEY"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the environment variable.",
                            "example": "bAxD7biGCZL6K60Q"
                          },
                          "locked": {
                            "type": "boolean",
                            "description": "Used only in the UI to hide the value like a password.",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "enum": [
                        {
                          "value": {}
                        }
                      ],
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "description": "List of alert channel subscriptions.",
                      "items": {
                        "type": "object",
                        "description": "Alert channel subscription.",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "setupSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                      "example": "null"
                    },
                    "tearDownSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                      "example": "null"
                    },
                    "localSetupScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                      "example": "null"
                    },
                    "localTearDownScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                      "example": "null"
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                      "example": "null",
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the checks in the group will run in parallel in all selected locations.",
                      "default": false
                    }
                  },
                  "required": [
                    "name",
                    "activated",
                    "concurrency",
                    "apiCheckDefaults"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups/{groupId}/checks/{checkId}": {
      "get": {
        "summary": "Retrieve one check in a specific group with group settings applied",
        "operationId": "getV1CheckgroupsGroupidChecksCheckid",
        "description": "Show details of one check in a specific check group with the group settings applied.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Check groups"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "description": "The type of the check.",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    }
                  },
                  "required": [
                    "checkType"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups/{id}": {
      "delete": {
        "summary": "Delete a check group.",
        "operationId": "deleteV1CheckgroupsId",
        "description": "Permanently removes a check group. You cannot delete a check group if it still contains checks.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Check groups"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        409
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Conflict"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a check group",
        "operationId": "getV1CheckgroupsId",
        "description": "Show details of a specific check group",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Check groups"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check group.",
                      "example": "Check group"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the checks in the  group are running or not."
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run the checks.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "concurrency": {
                      "type": "number",
                      "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                      "default": 3,
                      "minimum": 1,
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "apiCheckDefaults": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                          "example": "https://api.example.com/v1",
                          "default": ""
                        },
                        "headers": {
                          "type": "array",
                          "example": [
                            {
                              "key": "Cache-Control",
                              "value": "no-store"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "queryParameters": {
                          "type": "array",
                          "example": [
                            {
                              "key": "Page",
                              "value": "1"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "assertions": {
                          "type": "array",
                          "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                          "example": [
                            {
                              "source": "STATUS_CODE",
                              "comparision": "NOT_EMPTY",
                              "target": "200"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "enum": [
                                  "STATUS_CODE",
                                  "JSON_BODY",
                                  "HEADERS",
                                  "TEXT_BODY",
                                  "RESPONSE_TIME"
                                ]
                              },
                              "property": {
                                "type": "string",
                                "default": ""
                              },
                              "comparison": {
                                "type": "string",
                                "enum": [
                                  "EQUALS",
                                  "NOT_EQUALS",
                                  "HAS_KEY",
                                  "NOT_HAS_KEY",
                                  "HAS_VALUE",
                                  "NOT_HAS_VALUE",
                                  "IS_EMPTY",
                                  "NOT_EMPTY",
                                  "GREATER_THAN",
                                  "LESS_THAN",
                                  "CONTAINS",
                                  "NOT_CONTAINS",
                                  "IS_NULL",
                                  "NOT_NULL"
                                ]
                              },
                              "target": {
                                "type": "string",
                                "default": ""
                              },
                              "regex": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "basicAuth": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "example": "admin",
                              "default": ""
                            },
                            "password": {
                              "type": "string",
                              "example": "abc12345",
                              "default": ""
                            }
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        }
                      }
                    },
                    "browserCheckDefaults": {
                      "type": "string"
                    },
                    "environmentVariables": {
                      "type": "array",
                      "maxItems": 50,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "The key of the environment variable (this value cannot be changed).",
                            "example": "API_KEY"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the environment variable.",
                            "example": "bAxD7biGCZL6K60Q"
                          },
                          "locked": {
                            "type": "boolean",
                            "description": "Used only in the UI to hide the value like a password.",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "enum": [
                        {
                          "value": {}
                        }
                      ],
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "description": "List of alert channel subscriptions.",
                      "items": {
                        "type": "object",
                        "description": "Alert channel subscription.",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "setupSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                      "example": "null"
                    },
                    "tearDownSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                      "example": "null"
                    },
                    "localSetupScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                      "example": "null"
                    },
                    "localTearDownScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                      "example": "null"
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                      "example": "null",
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the checks in the group will run in parallel in all selected locations.",
                      "default": false
                    }
                  },
                  "required": [
                    "name",
                    "activated",
                    "concurrency",
                    "apiCheckDefaults"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a check group",
        "operationId": "putV1CheckgroupsId",
        "description": "Updates a check group.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check group.",
                    "example": "Check group"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group are running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
                    "default": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run the checks.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "concurrency": {
                    "type": "number",
                    "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                    "default": 3,
                    "minimum": 1,
                    "x-constraint": {
                      "sign": "positive"
                    }
                  },
                  "apiCheckDefaults": {
                    "type": "object",
                    "example": {
                      "url": "https://api.example.com/v1",
                      "headers": [
                        {
                          "key": "Cache-Control",
                          "value": "no-store"
                        }
                      ],
                      "queryParameters": [
                        {
                          "key": "Page",
                          "value": "1"
                        }
                      ],
                      "assertions": [
                        {
                          "source": "STATUS_CODE",
                          "comparision": "NOT_EMPTY",
                          "target": "200"
                        }
                      ],
                      "basicAuth": {
                        "username": "admin",
                        "password": "abc12345"
                      }
                    },
                    "default": {},
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                        "example": "https://api.example.com/v1",
                        "default": ""
                      },
                      "headers": {
                        "type": "array",
                        "example": [
                          {
                            "key": "Cache-Control",
                            "value": "no-store"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "queryParameters": {
                        "type": "array",
                        "example": [
                          {
                            "key": "Page",
                            "value": "1"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "assertions": {
                        "type": "array",
                        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                        "example": [
                          {
                            "source": "STATUS_CODE",
                            "comparision": "NOT_EMPTY",
                            "target": "200"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "STATUS_CODE",
                                "JSON_BODY",
                                "HEADERS",
                                "TEXT_BODY",
                                "RESPONSE_TIME"
                              ]
                            },
                            "property": {
                              "type": "string",
                              "default": ""
                            },
                            "comparison": {
                              "type": "string",
                              "enum": [
                                "EQUALS",
                                "NOT_EQUALS",
                                "HAS_KEY",
                                "NOT_HAS_KEY",
                                "HAS_VALUE",
                                "NOT_HAS_VALUE",
                                "IS_EMPTY",
                                "NOT_EMPTY",
                                "GREATER_THAN",
                                "LESS_THAN",
                                "CONTAINS",
                                "NOT_CONTAINS",
                                "IS_NULL",
                                "NOT_NULL"
                              ]
                            },
                            "target": {
                              "type": "string",
                              "default": ""
                            },
                            "regex": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      },
                      "basicAuth": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "example": "admin",
                            "default": ""
                          },
                          "password": {
                            "type": "string",
                            "example": "abc12345",
                            "default": ""
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      }
                    }
                  },
                  "browserCheckDefaults": {
                    "type": "string"
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group.",
                    "default": true
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                    "example": "null",
                    "default": null
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the checks.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the checks in the group will run in parallel in all selected locations.",
                    "default": false
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Check groups"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check group.",
                      "example": "Check group"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the checks in the  group are running or not."
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run the checks.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "concurrency": {
                      "type": "number",
                      "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
                      "default": 3,
                      "minimum": 1,
                      "x-constraint": {
                        "sign": "positive"
                      }
                    },
                    "apiCheckDefaults": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                          "example": "https://api.example.com/v1",
                          "default": ""
                        },
                        "headers": {
                          "type": "array",
                          "example": [
                            {
                              "key": "Cache-Control",
                              "value": "no-store"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "queryParameters": {
                          "type": "array",
                          "example": [
                            {
                              "key": "Page",
                              "value": "1"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "assertions": {
                          "type": "array",
                          "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                          "example": [
                            {
                              "source": "STATUS_CODE",
                              "comparision": "NOT_EMPTY",
                              "target": "200"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "enum": [
                                  "STATUS_CODE",
                                  "JSON_BODY",
                                  "HEADERS",
                                  "TEXT_BODY",
                                  "RESPONSE_TIME"
                                ]
                              },
                              "property": {
                                "type": "string",
                                "default": ""
                              },
                              "comparison": {
                                "type": "string",
                                "enum": [
                                  "EQUALS",
                                  "NOT_EQUALS",
                                  "HAS_KEY",
                                  "NOT_HAS_KEY",
                                  "HAS_VALUE",
                                  "NOT_HAS_VALUE",
                                  "IS_EMPTY",
                                  "NOT_EMPTY",
                                  "GREATER_THAN",
                                  "LESS_THAN",
                                  "CONTAINS",
                                  "NOT_CONTAINS",
                                  "IS_NULL",
                                  "NOT_NULL"
                                ]
                              },
                              "target": {
                                "type": "string",
                                "default": ""
                              },
                              "regex": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "basicAuth": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "example": "admin",
                              "default": ""
                            },
                            "password": {
                              "type": "string",
                              "example": "abc12345",
                              "default": ""
                            }
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        }
                      }
                    },
                    "browserCheckDefaults": {
                      "type": "string"
                    },
                    "environmentVariables": {
                      "type": "array",
                      "maxItems": 50,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "The key of the environment variable (this value cannot be changed).",
                            "example": "API_KEY"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the environment variable.",
                            "example": "bAxD7biGCZL6K60Q"
                          },
                          "locked": {
                            "type": "boolean",
                            "description": "Used only in the UI to hide the value like a password.",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "enum": [
                        {
                          "value": {}
                        }
                      ],
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "description": "List of alert channel subscriptions.",
                      "items": {
                        "type": "object",
                        "description": "Alert channel subscription.",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "setupSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
                      "example": "null"
                    },
                    "tearDownSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
                      "example": "null"
                    },
                    "localSetupScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
                      "example": "null"
                    },
                    "localTearDownScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
                      "example": "null"
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
                      "example": "null",
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the checks in the group will run in parallel in all selected locations.",
                      "default": false
                    }
                  },
                  "required": [
                    "name",
                    "activated",
                    "concurrency",
                    "apiCheckDefaults"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups/{id}/checks": {
      "get": {
        "summary": "Retrieve all checks in a specific group with group settings applied",
        "operationId": "getV1CheckgroupsIdChecks",
        "description": "Lists all checks in a specific check group with the group settings applied.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Check groups"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "checkType": {
                        "type": "string",
                        "description": "The type of the check.",
                        "enum": [
                          "API",
                          "BROWSER",
                          "HEARTBEAT",
                          "MULTI_STEP"
                        ]
                      }
                    },
                    "required": [
                      "checkType"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-results/{checkId}": {
      "get": {
        "summary": "Lists all check results",
        "operationId": "getV1CheckresultsCheckid",
        "description": "Lists the full, raw check results for a specific check. We keep raw results for 30 days. After 30 days they are erased. However, we keep the rolled up results for an indefinite period.<br><br>You can filter by check type and result type to narrow down the list. Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). Depending on the check type, some fields might be null.<br><br>This endpoint will return data within a six-hours timeframe. If the `from` and `to` params are set, they must be at most six hours apart. If none are set, we will consider the `to` param to be now and the `from` param to be six hours earlier. If only the `to` param is set we will set `from` to be six hours earlier. On the contrary, if only the `from` param is set we will consider the `to` param to be six hours later.<br><br><b>Rate-limiting is applied to this endpoint, you can send 5 requests / 10 seconds at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "description": "Select documents up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Optional. Select alerts up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Provide a data center location, e.g. \"eu-west-1\" to filter by location",
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          {
            "description": "The type of the check",
            "name": "checkType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "BROWSER",
                "HEARTBEAT",
                "MULTI_STEP"
              ]
            }
          },
          {
            "description": "Check result has one or more failures",
            "name": "hasFailures",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The check result type (ALL,FINAL,ATTEMPT)",
            "name": "resultType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "FINAL",
                "ATTEMPT"
              ],
              "default": "FINAL"
            }
          }
        ],
        "tags": [
          "Check results"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique ID of this result."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the check."
                      },
                      "checkId": {
                        "type": "string",
                        "description": "The ID of the check."
                      },
                      "hasFailures": {
                        "type": "boolean",
                        "description": "Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true."
                      },
                      "hasErrors": {
                        "type": "boolean",
                        "description": "Describes if an internal error has occured in Checkly's backend. This should be false in almost all cases."
                      },
                      "isDegraded": {
                        "type": "boolean",
                        "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks."
                      },
                      "overMaxResponseTime": {
                        "type": "boolean",
                        "description": "Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks."
                      },
                      "runLocation": {
                        "type": "string",
                        "description": "What data center location this check result originated from."
                      },
                      "startedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "stoppedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "responseTime": {
                        "type": "number",
                        "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this."
                      },
                      "apiCheckResult": {
                        "type": "object",
                        "description": "The response data for an API check.",
                        "properties": {
                          "assertions": {
                            "type": "array",
                            "description": "List of API check assertions.",
                            "example": [
                              {
                                "source": "STATUS_CODE",
                                "target": 200
                              }
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "request": {
                            "type": "object",
                            "description": "The request for the API.",
                            "properties": {
                              "method": {
                                "type": "string",
                                "example": "GET"
                              },
                              "url": {
                                "type": "string",
                                "example": "https://api.checklyhq.com"
                              },
                              "data": {
                                "type": "string",
                                "example": ""
                              },
                              "headers": {
                                "type": "object"
                              },
                              "params": {
                                "type": "object"
                              }
                            }
                          },
                          "response": {
                            "type": "object",
                            "description": "The API response.",
                            "properties": {
                              "status": {
                                "type": "number",
                                "example": 200
                              },
                              "statusText": {
                                "type": "string",
                                "example": "OK"
                              },
                              "body": {
                                "type": "string",
                                "example": "<title> Checkly Public API </title>"
                              },
                              "headers": {
                                "type": "object"
                              },
                              "timings": {
                                "type": "object"
                              },
                              "timingPhases": {
                                "type": "object"
                              }
                            }
                          },
                          "requestError": {
                            "type": "string",
                            "description": "Describes if an error occurred on the request.",
                            "example": "null"
                          },
                          "jobLog": {
                            "type": "object",
                            "description": "Check run log results."
                          },
                          "jobAssets": {
                            "type": "array",
                            "description": "Assets generated from the check run.",
                            "example": "null",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "browserCheckResult": {
                        "type": "object",
                        "description": "The response data for a browser check.",
                        "example": "null",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of framework the check is using.",
                            "example": "PLAYWRIGHT"
                          },
                          "traceSummary": {
                            "type": "object",
                            "description": "The summary of errors in the check run."
                          },
                          "pages": {
                            "type": "array",
                            "description": "List of pages used on the check run.",
                            "example": [
                              {
                                "url": "https://www.checklyhq.com/",
                                "webVitals": {
                                  "CLS": {
                                    "score": "GOOD",
                                    "value": 0.000146484375
                                  }
                                }
                              }
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "playwrightTestVideos": {
                            "type": "array",
                            "description": "List of Playwright Test videos.",
                            "example": [
                              "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "errors": {
                            "type": "array",
                            "description": "List of errors on the check run.",
                            "example": [],
                            "items": {
                              "type": "string"
                            }
                          },
                          "endTime": {
                            "type": "number",
                            "description": "End time of the check run.",
                            "example": 1648573423995
                          },
                          "startTime": {
                            "type": "number",
                            "description": "Start time of the check run.",
                            "example": 1648573423994
                          },
                          "runtimeVersion": {
                            "type": "string",
                            "description": "Active runtime version.",
                            "example": "2023.09"
                          },
                          "jobLog": {
                            "type": "array",
                            "description": "Check run log results.",
                            "example": {
                              "time": 1648573423995,
                              "msg": "Starting job",
                              "level": "DEBUG"
                            },
                            "items": {
                              "type": "string"
                            }
                          },
                          "jobAssets": {
                            "type": "array",
                            "description": "Assets generated from the check run.",
                            "example": "null",
                            "items": {
                              "type": "string"
                            }
                          },
                          "playwrightTestTraces": {
                            "type": "array",
                            "description": "List of Playwright Test traces.",
                            "example": [
                              "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "playwrightTestJsonReportFile": {
                            "type": "string",
                            "description": "Playwright Test JSON report.",
                            "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                          }
                        }
                      },
                      "multiStepCheckResult": {
                        "type": "object",
                        "description": "The response data for a multi-step check.",
                        "example": "null",
                        "properties": {
                          "errors": {
                            "type": "array",
                            "description": "List of errors on the check run.",
                            "example": [],
                            "items": {
                              "type": "string"
                            }
                          },
                          "endTime": {
                            "type": "number",
                            "description": "End time of the check run.",
                            "example": 1648573423995
                          },
                          "startTime": {
                            "type": "number",
                            "description": "Start time of the check run.",
                            "example": 1648573423994
                          },
                          "runtimeVersion": {
                            "type": "string",
                            "description": "Active runtime version.",
                            "example": "2023.09"
                          },
                          "jobLog": {
                            "type": "array",
                            "description": "Check run log results.",
                            "example": {
                              "time": 1648573423995,
                              "msg": "Starting job",
                              "level": "DEBUG"
                            },
                            "items": {
                              "type": "string"
                            }
                          },
                          "jobAssets": {
                            "type": "array",
                            "description": "Assets generated from the check run.",
                            "example": "null",
                            "items": {
                              "type": "string"
                            }
                          },
                          "playwrightTestTraces": {
                            "type": "array",
                            "description": "List of Playwright Test traces.",
                            "example": [
                              "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "playwrightTestJsonReportFile": {
                            "type": "string",
                            "description": "Playwright Test JSON report.",
                            "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                          }
                        }
                      },
                      "checkRunId": {
                        "type": "number",
                        "description": "The id of the specific check run that created this check result."
                      },
                      "attempts": {
                        "type": "number",
                        "description": "How often this check was retried. This will be larger than 0 when double checking is enabled."
                      },
                      "resultType": {
                        "type": "string",
                        "description": "The type of result. FINAL means this is the final result of the check run. ATTEMPT means this is a result of a double check attempt.",
                        "example": "FINAL",
                        "default": "FINAL",
                        "enum": [
                          "FINAL",
                          "ATTEMPT"
                        ]
                      },
                      "sequenceId": {
                        "type": "string",
                        "description": "The sequence ID of the check run. This is used to group check runs with multiple attempts together.",
                        "example": "2dbfa2a3-5477-45ea-ac33-ee55b8ea66ff",
                        "x-format": {
                          "guid": true
                        }
                      }
                    },
                    "required": [
                      "resultType"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-results/{checkId}/{checkResultId}": {
      "get": {
        "summary": "Retrieve a check result",
        "operationId": "getV1CheckresultsCheckidCheckresultid",
        "description": "Show details of a specific check result.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkResultId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Check results"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of this result."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check."
                    },
                    "checkId": {
                      "type": "string",
                      "description": "The ID of the check."
                    },
                    "hasFailures": {
                      "type": "boolean",
                      "description": "Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true."
                    },
                    "hasErrors": {
                      "type": "boolean",
                      "description": "Describes if an internal error has occured in Checkly's backend. This should be false in almost all cases."
                    },
                    "isDegraded": {
                      "type": "boolean",
                      "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks."
                    },
                    "overMaxResponseTime": {
                      "type": "boolean",
                      "description": "Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks."
                    },
                    "runLocation": {
                      "type": "string",
                      "description": "What data center location this check result originated from."
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "stoppedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "responseTime": {
                      "type": "number",
                      "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this."
                    },
                    "apiCheckResult": {
                      "type": "object",
                      "description": "The response data for an API check.",
                      "properties": {
                        "assertions": {
                          "type": "array",
                          "description": "List of API check assertions.",
                          "example": [
                            {
                              "source": "STATUS_CODE",
                              "target": 200
                            }
                          ],
                          "items": {
                            "type": "string"
                          }
                        },
                        "request": {
                          "type": "object",
                          "description": "The request for the API.",
                          "properties": {
                            "method": {
                              "type": "string",
                              "example": "GET"
                            },
                            "url": {
                              "type": "string",
                              "example": "https://api.checklyhq.com"
                            },
                            "data": {
                              "type": "string",
                              "example": ""
                            },
                            "headers": {
                              "type": "object"
                            },
                            "params": {
                              "type": "object"
                            }
                          }
                        },
                        "response": {
                          "type": "object",
                          "description": "The API response.",
                          "properties": {
                            "status": {
                              "type": "number",
                              "example": 200
                            },
                            "statusText": {
                              "type": "string",
                              "example": "OK"
                            },
                            "body": {
                              "type": "string",
                              "example": "<title> Checkly Public API </title>"
                            },
                            "headers": {
                              "type": "object"
                            },
                            "timings": {
                              "type": "object"
                            },
                            "timingPhases": {
                              "type": "object"
                            }
                          }
                        },
                        "requestError": {
                          "type": "string",
                          "description": "Describes if an error occurred on the request.",
                          "example": "null"
                        },
                        "jobLog": {
                          "type": "object",
                          "description": "Check run log results."
                        },
                        "jobAssets": {
                          "type": "array",
                          "description": "Assets generated from the check run.",
                          "example": "null",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "browserCheckResult": {
                      "type": "object",
                      "description": "The response data for a browser check.",
                      "example": "null",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of framework the check is using.",
                          "example": "PLAYWRIGHT"
                        },
                        "traceSummary": {
                          "type": "object",
                          "description": "The summary of errors in the check run."
                        },
                        "pages": {
                          "type": "array",
                          "description": "List of pages used on the check run.",
                          "example": [
                            {
                              "url": "https://www.checklyhq.com/",
                              "webVitals": {
                                "CLS": {
                                  "score": "GOOD",
                                  "value": 0.000146484375
                                }
                              }
                            }
                          ],
                          "items": {
                            "type": "string"
                          }
                        },
                        "playwrightTestVideos": {
                          "type": "array",
                          "description": "List of Playwright Test videos.",
                          "example": [
                            "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
                          ],
                          "items": {
                            "type": "string"
                          }
                        },
                        "errors": {
                          "type": "array",
                          "description": "List of errors on the check run.",
                          "example": [],
                          "items": {
                            "type": "string"
                          }
                        },
                        "endTime": {
                          "type": "number",
                          "description": "End time of the check run.",
                          "example": 1648573423995
                        },
                        "startTime": {
                          "type": "number",
                          "description": "Start time of the check run.",
                          "example": 1648573423994
                        },
                        "runtimeVersion": {
                          "type": "string",
                          "description": "Active runtime version.",
                          "example": "2023.09"
                        },
                        "jobLog": {
                          "type": "array",
                          "description": "Check run log results.",
                          "example": {
                            "time": 1648573423995,
                            "msg": "Starting job",
                            "level": "DEBUG"
                          },
                          "items": {
                            "type": "string"
                          }
                        },
                        "jobAssets": {
                          "type": "array",
                          "description": "Assets generated from the check run.",
                          "example": "null",
                          "items": {
                            "type": "string"
                          }
                        },
                        "playwrightTestTraces": {
                          "type": "array",
                          "description": "List of Playwright Test traces.",
                          "example": [
                            "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                          ],
                          "items": {
                            "type": "string"
                          }
                        },
                        "playwrightTestJsonReportFile": {
                          "type": "string",
                          "description": "Playwright Test JSON report.",
                          "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                        }
                      }
                    },
                    "multiStepCheckResult": {
                      "type": "object",
                      "description": "The response data for a multi-step check.",
                      "example": "null",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "List of errors on the check run.",
                          "example": [],
                          "items": {
                            "type": "string"
                          }
                        },
                        "endTime": {
                          "type": "number",
                          "description": "End time of the check run.",
                          "example": 1648573423995
                        },
                        "startTime": {
                          "type": "number",
                          "description": "Start time of the check run.",
                          "example": 1648573423994
                        },
                        "runtimeVersion": {
                          "type": "string",
                          "description": "Active runtime version.",
                          "example": "2023.09"
                        },
                        "jobLog": {
                          "type": "array",
                          "description": "Check run log results.",
                          "example": {
                            "time": 1648573423995,
                            "msg": "Starting job",
                            "level": "DEBUG"
                          },
                          "items": {
                            "type": "string"
                          }
                        },
                        "jobAssets": {
                          "type": "array",
                          "description": "Assets generated from the check run.",
                          "example": "null",
                          "items": {
                            "type": "string"
                          }
                        },
                        "playwrightTestTraces": {
                          "type": "array",
                          "description": "List of Playwright Test traces.",
                          "example": [
                            "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                          ],
                          "items": {
                            "type": "string"
                          }
                        },
                        "playwrightTestJsonReportFile": {
                          "type": "string",
                          "description": "Playwright Test JSON report.",
                          "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                        }
                      }
                    },
                    "checkRunId": {
                      "type": "number",
                      "description": "The id of the specific check run that created this check result."
                    },
                    "attempts": {
                      "type": "number",
                      "description": "How often this check was retried. This will be larger than 0 when double checking is enabled."
                    },
                    "resultType": {
                      "type": "string",
                      "description": "The type of result. FINAL means this is the final result of the check run. ATTEMPT means this is a result of a double check attempt.",
                      "example": "FINAL",
                      "default": "FINAL",
                      "enum": [
                        "FINAL",
                        "ATTEMPT"
                      ]
                    },
                    "sequenceId": {
                      "type": "string",
                      "description": "The sequence ID of the check run. This is used to group check runs with multiple attempts together.",
                      "example": "2dbfa2a3-5477-45ea-ac33-ee55b8ea66ff",
                      "x-format": {
                        "guid": true
                      }
                    }
                  },
                  "required": [
                    "resultType"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-statuses": {
      "get": {
        "summary": "List all check statuses",
        "operationId": "getV1Checkstatuses",
        "description": "Shows the current status information for all checks in your account. The check status records are continuously updated as new check results come in.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Check status"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the check.",
                        "example": "API Check"
                      },
                      "checkId": {
                        "type": "string",
                        "description": "The ID of check this status belongs to.",
                        "example": "784b8a8c-5c9d-45ea-92ff-7f9ae9d8a0c1"
                      },
                      "hasFailures": {
                        "type": "boolean",
                        "description": "Describes if this check is currently failing. If any of the assertions for an API checkfail this value is true. If a browser check fails for whatever reason, this is true.",
                        "example": false
                      },
                      "hasErrors": {
                        "type": "boolean",
                        "description": "Describes if due to some error outside of normal operation this check is failing. This should be extremely rare and only when there is an error in the Checkly backend.",
                        "example": false
                      },
                      "isDegraded": {
                        "type": "boolean",
                        "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.",
                        "example": true
                      },
                      "longestRun": {
                        "type": "number",
                        "description": "The longest ever recorded response time for this check.",
                        "example": 10
                      },
                      "shortestRun": {
                        "type": "number",
                        "description": "The shortest ever recorded response time for this check.",
                        "example": 5
                      },
                      "lastRunLocation": {
                        "type": "string",
                        "description": "What location this check was last run at.",
                        "example": "us-east-1"
                      },
                      "lastCheckRunId": {
                        "type": "string",
                        "description": "The unique incrementing ID for each check run.",
                        "example": "03ec5a65-2f95-4711-8ffe-29fb9bc28946"
                      },
                      "sslDaysRemaining": {
                        "type": "number",
                        "description": "How many days remain till the current SSL certificate expires.",
                        "example": 3
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-statuses/{checkId}": {
      "get": {
        "summary": "Retrieve check status details",
        "operationId": "getV1CheckstatusesCheckid",
        "description": "Show the current status information for a specific check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Check status"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "API Check"
                    },
                    "checkId": {
                      "type": "string",
                      "description": "The ID of check this status belongs to.",
                      "example": "784b8a8c-5c9d-45ea-92ff-7f9ae9d8a0c1"
                    },
                    "hasFailures": {
                      "type": "boolean",
                      "description": "Describes if this check is currently failing. If any of the assertions for an API checkfail this value is true. If a browser check fails for whatever reason, this is true.",
                      "example": false
                    },
                    "hasErrors": {
                      "type": "boolean",
                      "description": "Describes if due to some error outside of normal operation this check is failing. This should be extremely rare and only when there is an error in the Checkly backend.",
                      "example": false
                    },
                    "isDegraded": {
                      "type": "boolean",
                      "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.",
                      "example": true
                    },
                    "longestRun": {
                      "type": "number",
                      "description": "The longest ever recorded response time for this check.",
                      "example": 10
                    },
                    "shortestRun": {
                      "type": "number",
                      "description": "The shortest ever recorded response time for this check.",
                      "example": 5
                    },
                    "lastRunLocation": {
                      "type": "string",
                      "description": "What location this check was last run at.",
                      "example": "us-east-1"
                    },
                    "lastCheckRunId": {
                      "type": "string",
                      "description": "The unique incrementing ID for each check run.",
                      "example": "03ec5a65-2f95-4711-8ffe-29fb9bc28946"
                    },
                    "sslDaysRemaining": {
                      "type": "number",
                      "description": "How many days remain till the current SSL certificate expires.",
                      "example": 3
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks": {
      "get": {
        "summary": "List all checks",
        "operationId": "getV1Checks",
        "description": "Lists all current checks in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "description": "Filters the results by a string contained in the URL of an API check, for instance a domain like \"www.myapp.com\". Only returns API checks.",
            "name": "apiCheckUrlFilterPattern",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "checkType": {
                        "type": "string",
                        "description": "The type of the check.",
                        "enum": [
                          "API",
                          "BROWSER",
                          "HEARTBEAT",
                          "MULTI_STEP"
                        ]
                      }
                    },
                    "required": [
                      "checkType"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a check",
        "operationId": "postV1Checks",
        "description": "<b>[DEPRECATED] This endpoint will be removed soon. Instead use <code>POST /checks/api</code> or  <code>POST /checks/browser</code>.</b> Creates a new API or browser check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSettings`, the `alertSettings` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "checkType": {
                    "type": "string",
                    "description": "The type of the check.",
                    "enum": [
                      "API",
                      "BROWSER",
                      "HEARTBEAT",
                      "MULTI_STEP"
                    ]
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10
                  },
                  "frequencyOffset": {
                    "type": "integer",
                    "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                    "minimum": 1
                  },
                  "request": {
                    "type": "object"
                  },
                  "heartbeat": {
                    "type": "object"
                  },
                  "script": {
                    "type": "string"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "sslCheckDomain": {
                    "type": "string"
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                    "default": null
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                    "default": null
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.",
                    "default": null
                  },
                  "degradedResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered degraded.",
                    "default": 10000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "maxResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered failing.",
                    "default": 20000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "description": "An array of BCR dependency files.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "maxLength": 1000
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path",
                        "content"
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "checkType",
                  "request",
                  "heartbeat",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "description": "The type of the check.",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    }
                  },
                  "required": [
                    "checkType"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/checks/api": {
      "post": {
        "summary": "Create an API check",
        "operationId": "postV1ChecksApi",
        "description": "Creates a new API check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "request": {
                    "type": "object",
                    "description": "Determines the request that the check is going to run.",
                    "properties": {
                      "method": {
                        "type": "string",
                        "default": "GET",
                        "enum": [
                          "GET",
                          "POST",
                          "PUT",
                          "HEAD",
                          "DELETE",
                          "PATCH"
                        ]
                      },
                      "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                      },
                      "followRedirects": {
                        "type": "boolean"
                      },
                      "skipSSL": {
                        "type": "boolean",
                        "default": false
                      },
                      "body": {
                        "type": "string",
                        "default": ""
                      },
                      "bodyType": {
                        "type": "string",
                        "default": "NONE",
                        "enum": [
                          "JSON",
                          "FORM",
                          "RAW",
                          "GRAPHQL",
                          "NONE"
                        ]
                      },
                      "headers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "queryParameters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "assertions": {
                        "type": "array",
                        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                        "example": [
                          {
                            "source": "STATUS_CODE",
                            "comparision": "NOT_EMPTY",
                            "target": "200"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "STATUS_CODE",
                                "JSON_BODY",
                                "HEADERS",
                                "TEXT_BODY",
                                "RESPONSE_TIME"
                              ]
                            },
                            "property": {
                              "type": "string",
                              "default": ""
                            },
                            "comparison": {
                              "type": "string",
                              "enum": [
                                "EQUALS",
                                "NOT_EQUALS",
                                "HAS_KEY",
                                "NOT_HAS_KEY",
                                "HAS_VALUE",
                                "NOT_HAS_VALUE",
                                "IS_EMPTY",
                                "NOT_EMPTY",
                                "GREATER_THAN",
                                "LESS_THAN",
                                "CONTAINS",
                                "NOT_CONTAINS",
                                "IS_NULL",
                                "NOT_NULL"
                              ]
                            },
                            "target": {
                              "type": "string",
                              "default": ""
                            },
                            "regex": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      },
                      "basicAuth": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "example": "admin",
                            "default": ""
                          },
                          "password": {
                            "type": "string",
                            "example": "abc12345",
                            "default": ""
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      }
                    },
                    "required": [
                      "method",
                      "url"
                    ]
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10,
                    "enum": [
                      0,
                      1,
                      2,
                      5,
                      10,
                      15,
                      30,
                      60,
                      120,
                      180,
                      360,
                      720,
                      1440
                    ]
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                    "example": "null",
                    "default": null
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                    "example": "null",
                    "default": null
                  },
                  "frequencyOffset": {
                    "type": "integer",
                    "description": "Used for setting seconds for check frequencies under 1 minutes and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                    "minimum": 1
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.",
                    "example": "",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.",
                    "example": "",
                    "default": null
                  },
                  "degradedResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered degraded.",
                    "default": 10000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "maxResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered failing.",
                    "default": 20000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "request"
                ]
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "aa473993-22ac-42bf-b638-2b3f81fd8e98"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                      "default": true
                    },
                    "shouldFail": {
                      "type": "boolean",
                      "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                      "default": false
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run this check.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "groupId": {
                      "type": "number",
                      "description": "The id of the check group this check is part of.",
                      "example": "null",
                      "default": null
                    },
                    "groupOrder": {
                      "type": "number",
                      "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                      "example": "null",
                      "default": null,
                      "minimum": 0
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                      "default": null,
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "request": {
                      "type": "object",
                      "description": "Determines the request that the check is going to run.",
                      "properties": {
                        "method": {
                          "type": "string",
                          "default": "GET",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "HEAD",
                            "DELETE",
                            "PATCH"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "default": "https://api.checklyhq.com",
                          "maxLength": 2048
                        },
                        "followRedirects": {
                          "type": "boolean"
                        },
                        "skipSSL": {
                          "type": "boolean",
                          "default": false
                        },
                        "body": {
                          "type": "string",
                          "default": ""
                        },
                        "bodyType": {
                          "type": "string",
                          "default": "NONE",
                          "enum": [
                            "JSON",
                            "FORM",
                            "RAW",
                            "GRAPHQL",
                            "NONE"
                          ]
                        },
                        "headers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "queryParameters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "assertions": {
                          "type": "array",
                          "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                          "example": [
                            {
                              "source": "STATUS_CODE",
                              "comparision": "NOT_EMPTY",
                              "target": "200"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "enum": [
                                  "STATUS_CODE",
                                  "JSON_BODY",
                                  "HEADERS",
                                  "TEXT_BODY",
                                  "RESPONSE_TIME"
                                ]
                              },
                              "property": {
                                "type": "string",
                                "default": ""
                              },
                              "comparison": {
                                "type": "string",
                                "enum": [
                                  "EQUALS",
                                  "NOT_EQUALS",
                                  "HAS_KEY",
                                  "NOT_HAS_KEY",
                                  "HAS_VALUE",
                                  "NOT_HAS_VALUE",
                                  "IS_EMPTY",
                                  "NOT_EMPTY",
                                  "GREATER_THAN",
                                  "LESS_THAN",
                                  "CONTAINS",
                                  "NOT_CONTAINS",
                                  "IS_NULL",
                                  "NOT_NULL"
                                ]
                              },
                              "target": {
                                "type": "string",
                                "default": ""
                              },
                              "regex": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "basicAuth": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "example": "admin",
                              "default": ""
                            },
                            "password": {
                              "type": "string",
                              "example": "abc12345",
                              "default": ""
                            }
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "url"
                      ]
                    },
                    "frequency": {
                      "type": "integer",
                      "description": "How often the check should run in minutes.",
                      "default": 10,
                      "enum": [
                        0,
                        1,
                        2,
                        5,
                        10,
                        15,
                        30,
                        60,
                        120,
                        180,
                        360,
                        720,
                        1440
                      ]
                    },
                    "frequencyOffset": {
                      "type": "integer",
                      "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                      "minimum": 1
                    },
                    "tearDownSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                      "default": null
                    },
                    "setupSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                      "default": null
                    },
                    "localSetupScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the setup phase.",
                      "example": "",
                      "default": null
                    },
                    "localTearDownScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the teardown phase.",
                      "example": "",
                      "default": null
                    },
                    "degradedResponseTime": {
                      "type": "number",
                      "description": "The response time in milliseconds where a check should be considered degraded.",
                      "default": 10000,
                      "minimum": 0,
                      "maximum": 300000
                    },
                    "maxResponseTime": {
                      "type": "number",
                      "description": "The response time in milliseconds where a check should be considered failing.",
                      "default": 20000,
                      "minimum": 0,
                      "maximum": 300000
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "API"
                      ]
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/api/{id}": {
      "put": {
        "summary": "Update an API check",
        "operationId": "putV1ChecksApiId",
        "description": "Updates an API check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "request": {
                    "type": "object",
                    "description": "Determines the request that the check is going to run.",
                    "properties": {
                      "method": {
                        "type": "string",
                        "default": "GET",
                        "enum": [
                          "GET",
                          "POST",
                          "PUT",
                          "HEAD",
                          "DELETE",
                          "PATCH"
                        ]
                      },
                      "url": {
                        "type": "string",
                        "default": "https://api.checklyhq.com",
                        "maxLength": 2048
                      },
                      "followRedirects": {
                        "type": "boolean"
                      },
                      "skipSSL": {
                        "type": "boolean",
                        "default": false
                      },
                      "body": {
                        "type": "string",
                        "default": ""
                      },
                      "bodyType": {
                        "type": "string",
                        "default": "NONE",
                        "enum": [
                          "JSON",
                          "FORM",
                          "RAW",
                          "GRAPHQL",
                          "NONE"
                        ]
                      },
                      "headers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "queryParameters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string",
                              "default": ""
                            },
                            "locked": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      },
                      "assertions": {
                        "type": "array",
                        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                        "example": [
                          {
                            "source": "STATUS_CODE",
                            "comparision": "NOT_EMPTY",
                            "target": "200"
                          }
                        ],
                        "items": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string",
                              "enum": [
                                "STATUS_CODE",
                                "JSON_BODY",
                                "HEADERS",
                                "TEXT_BODY",
                                "RESPONSE_TIME"
                              ]
                            },
                            "property": {
                              "type": "string",
                              "default": ""
                            },
                            "comparison": {
                              "type": "string",
                              "enum": [
                                "EQUALS",
                                "NOT_EQUALS",
                                "HAS_KEY",
                                "NOT_HAS_KEY",
                                "HAS_VALUE",
                                "NOT_HAS_VALUE",
                                "IS_EMPTY",
                                "NOT_EMPTY",
                                "GREATER_THAN",
                                "LESS_THAN",
                                "CONTAINS",
                                "NOT_CONTAINS",
                                "IS_NULL",
                                "NOT_NULL"
                              ]
                            },
                            "target": {
                              "type": "string",
                              "default": ""
                            },
                            "regex": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      },
                      "basicAuth": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "example": "admin",
                            "default": ""
                          },
                          "password": {
                            "type": "string",
                            "example": "abc12345",
                            "default": ""
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      }
                    },
                    "required": [
                      "method",
                      "url"
                    ]
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10,
                    "enum": [
                      0,
                      1,
                      2,
                      5,
                      10,
                      15,
                      30,
                      60,
                      120,
                      180,
                      360,
                      720,
                      1440
                    ]
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                    "example": "null",
                    "default": null
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                    "example": "null",
                    "default": null
                  },
                  "frequencyOffset": {
                    "type": "integer",
                    "description": "Used for setting seconds for check frequencies under 1 minutes and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                    "minimum": 1
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.",
                    "example": "",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.",
                    "example": "",
                    "default": null
                  },
                  "degradedResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered degraded.",
                    "default": 10000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "maxResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered failing.",
                    "default": 20000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "aa473993-22ac-42bf-b638-2b3f81fd8e98"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                      "default": true
                    },
                    "shouldFail": {
                      "type": "boolean",
                      "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                      "default": false
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run this check.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "groupId": {
                      "type": "number",
                      "description": "The id of the check group this check is part of.",
                      "example": "null",
                      "default": null
                    },
                    "groupOrder": {
                      "type": "number",
                      "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                      "example": "null",
                      "default": null,
                      "minimum": 0
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                      "default": null,
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "request": {
                      "type": "object",
                      "description": "Determines the request that the check is going to run.",
                      "properties": {
                        "method": {
                          "type": "string",
                          "default": "GET",
                          "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "HEAD",
                            "DELETE",
                            "PATCH"
                          ]
                        },
                        "url": {
                          "type": "string",
                          "default": "https://api.checklyhq.com",
                          "maxLength": 2048
                        },
                        "followRedirects": {
                          "type": "boolean"
                        },
                        "skipSSL": {
                          "type": "boolean",
                          "default": false
                        },
                        "body": {
                          "type": "string",
                          "default": ""
                        },
                        "bodyType": {
                          "type": "string",
                          "default": "NONE",
                          "enum": [
                            "JSON",
                            "FORM",
                            "RAW",
                            "GRAPHQL",
                            "NONE"
                          ]
                        },
                        "headers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "queryParameters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string",
                                "default": ""
                              },
                              "locked": {
                                "type": "boolean",
                                "default": false
                              }
                            },
                            "required": [
                              "key",
                              "value"
                            ]
                          }
                        },
                        "assertions": {
                          "type": "array",
                          "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                          "example": [
                            {
                              "source": "STATUS_CODE",
                              "comparision": "NOT_EMPTY",
                              "target": "200"
                            }
                          ],
                          "items": {
                            "type": "object",
                            "properties": {
                              "source": {
                                "type": "string",
                                "enum": [
                                  "STATUS_CODE",
                                  "JSON_BODY",
                                  "HEADERS",
                                  "TEXT_BODY",
                                  "RESPONSE_TIME"
                                ]
                              },
                              "property": {
                                "type": "string",
                                "default": ""
                              },
                              "comparison": {
                                "type": "string",
                                "enum": [
                                  "EQUALS",
                                  "NOT_EQUALS",
                                  "HAS_KEY",
                                  "NOT_HAS_KEY",
                                  "HAS_VALUE",
                                  "NOT_HAS_VALUE",
                                  "IS_EMPTY",
                                  "NOT_EMPTY",
                                  "GREATER_THAN",
                                  "LESS_THAN",
                                  "CONTAINS",
                                  "NOT_CONTAINS",
                                  "IS_NULL",
                                  "NOT_NULL"
                                ]
                              },
                              "target": {
                                "type": "string",
                                "default": ""
                              },
                              "regex": {
                                "type": "string",
                                "default": ""
                              }
                            }
                          }
                        },
                        "basicAuth": {
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "example": "admin",
                              "default": ""
                            },
                            "password": {
                              "type": "string",
                              "example": "abc12345",
                              "default": ""
                            }
                          },
                          "required": [
                            "username",
                            "password"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "url"
                      ]
                    },
                    "frequency": {
                      "type": "integer",
                      "description": "How often the check should run in minutes.",
                      "default": 10,
                      "enum": [
                        0,
                        1,
                        2,
                        5,
                        10,
                        15,
                        30,
                        60,
                        120,
                        180,
                        360,
                        720,
                        1440
                      ]
                    },
                    "frequencyOffset": {
                      "type": "integer",
                      "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                      "minimum": 1
                    },
                    "tearDownSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                      "default": null
                    },
                    "setupSnippetId": {
                      "type": "number",
                      "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                      "default": null
                    },
                    "localSetupScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the setup phase.",
                      "example": "",
                      "default": null
                    },
                    "localTearDownScript": {
                      "type": "string",
                      "description": "A valid piece of Node.js code to run in the teardown phase.",
                      "example": "",
                      "default": null
                    },
                    "degradedResponseTime": {
                      "type": "number",
                      "description": "The response time in milliseconds where a check should be considered degraded.",
                      "default": 10000,
                      "minimum": 0,
                      "maximum": 300000
                    },
                    "maxResponseTime": {
                      "type": "number",
                      "description": "The response time in milliseconds where a check should be considered failing.",
                      "default": 20000,
                      "minimum": 0,
                      "maximum": 300000
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "API"
                      ]
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/browser": {
      "post": {
        "summary": "Create a browser check",
        "operationId": "postV1ChecksBrowser",
        "description": "Creates a new browser check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                    "example": [],
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10,
                    "enum": [
                      1,
                      2,
                      5,
                      10,
                      15,
                      30,
                      60,
                      120,
                      180,
                      360,
                      720,
                      1440
                    ]
                  },
                  "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
                    "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "description": "An array of BCR dependency files.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "maxLength": 1000
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path",
                        "content"
                      ]
                    }
                  },
                  "sslCheckDomain": {
                    "type": "string",
                    "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                    "example": "www.acme.com"
                  }
                },
                "required": [
                  "name",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "68afd914-5252-4057-adb2-eecf0d6dc98c"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                      "default": true
                    },
                    "shouldFail": {
                      "type": "boolean",
                      "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                      "default": false
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run this check.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "groupId": {
                      "type": "number",
                      "description": "The id of the check group this check is part of.",
                      "example": "null",
                      "default": null
                    },
                    "groupOrder": {
                      "type": "number",
                      "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                      "example": "null",
                      "default": null,
                      "minimum": 0
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                      "default": null,
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "BROWSER"
                      ]
                    },
                    "frequency": {
                      "type": "integer",
                      "description": "How often the check should run in minutes.",
                      "default": 10,
                      "enum": [
                        1,
                        2,
                        5,
                        10,
                        15,
                        30,
                        60,
                        120,
                        180,
                        360,
                        720,
                        1440
                      ]
                    },
                    "script": {
                      "type": "string",
                      "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks."
                    },
                    "sslCheckDomain": {
                      "type": "string",
                      "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                      "example": "www.acme.com"
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name",
                    "script"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/browser/{id}": {
      "put": {
        "summary": "Update a browser check",
        "operationId": "putV1ChecksBrowserId",
        "description": "Updates a browser check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                    "example": [],
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10,
                    "enum": [
                      1,
                      2,
                      5,
                      10,
                      15,
                      30,
                      60,
                      120,
                      180,
                      360,
                      720,
                      1440
                    ]
                  },
                  "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
                    "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "description": "An array of BCR dependency files.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "maxLength": 1000
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path",
                        "content"
                      ]
                    }
                  },
                  "sslCheckDomain": {
                    "type": "string",
                    "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                    "example": "www.acme.com"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "68afd914-5252-4057-adb2-eecf0d6dc98c"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                      "default": true
                    },
                    "shouldFail": {
                      "type": "boolean",
                      "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                      "default": false
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run this check.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "groupId": {
                      "type": "number",
                      "description": "The id of the check group this check is part of.",
                      "example": "null",
                      "default": null
                    },
                    "groupOrder": {
                      "type": "number",
                      "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                      "example": "null",
                      "default": null,
                      "minimum": 0
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                      "default": null,
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "BROWSER"
                      ]
                    },
                    "frequency": {
                      "type": "integer",
                      "description": "How often the check should run in minutes.",
                      "default": 10,
                      "enum": [
                        1,
                        2,
                        5,
                        10,
                        15,
                        30,
                        60,
                        120,
                        180,
                        360,
                        720,
                        1440
                      ]
                    },
                    "script": {
                      "type": "string",
                      "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks."
                    },
                    "sslCheckDomain": {
                      "type": "string",
                      "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
                      "example": "www.acme.com"
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name",
                    "script"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/heartbeat": {
      "post": {
        "summary": "Create a heartbeat check",
        "operationId": "postV1ChecksHeartbeat",
        "description": "Creates a new Heartbeat check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10
                  },
                  "frequencyOffset": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "request": {
                    "type": "object"
                  },
                  "heartbeat": {
                    "type": "object",
                    "properties": {
                      "period": {
                        "type": "number",
                        "description": "Interval expected between pings."
                      },
                      "periodUnit": {
                        "type": "string",
                        "enum": [
                          "seconds",
                          "minutes",
                          "hours",
                          "days"
                        ]
                      },
                      "grace": {
                        "type": "number",
                        "description": "Grace added to the period."
                      },
                      "graceUnit": {
                        "type": "string",
                        "enum": [
                          "seconds",
                          "minutes",
                          "hours",
                          "days"
                        ]
                      },
                      "pingToken": {
                        "type": "string",
                        "description": "UUID token used to build a unique ping URL.",
                        "x-format": {
                          "guid": true
                        }
                      }
                    },
                    "required": [
                      "period",
                      "periodUnit",
                      "grace",
                      "graceUnit"
                    ]
                  },
                  "script": {
                    "type": "string"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "sslCheckDomain": {
                    "type": "string"
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                    "default": null
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                    "default": null
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.",
                    "default": null
                  },
                  "degradedResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered degraded.",
                    "default": 10000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "maxResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered failing.",
                    "default": 20000,
                    "minimum": 0,
                    "maximum": 300000
                  }
                },
                "required": [
                  "name",
                  "request",
                  "heartbeat",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Heartbeats"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a5dc9247-c448-4b22-9fdf-ebc53c0e2248"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "HEARTBEAT"
                      ]
                    },
                    "heartbeat": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "number",
                          "description": "Interval expected between pings."
                        },
                        "periodUnit": {
                          "type": "string",
                          "enum": [
                            "seconds",
                            "minutes",
                            "hours",
                            "days"
                          ]
                        },
                        "grace": {
                          "type": "number",
                          "description": "Grace added to the period."
                        },
                        "graceUnit": {
                          "type": "string",
                          "enum": [
                            "seconds",
                            "minutes",
                            "hours",
                            "days"
                          ]
                        },
                        "pingToken": {
                          "type": "string",
                          "description": "UUID token used to build a unique ping URL.",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "pingUrl": {
                          "type": "string",
                          "example": "https://ping.checklyhq.com/22868839-8450-4010-9241-1ea83a2e425f"
                        }
                      },
                      "required": [
                        "period",
                        "periodUnit",
                        "grace",
                        "graceUnit"
                      ]
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/heartbeat/{id}": {
      "put": {
        "summary": "Update a heartbeat check",
        "operationId": "putV1ChecksHeartbeatId",
        "description": "Updates a Heartbeat check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10
                  },
                  "frequencyOffset": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "request": {
                    "type": "object"
                  },
                  "heartbeat": {
                    "type": "object",
                    "properties": {
                      "period": {
                        "type": "number",
                        "description": "Interval expected between pings."
                      },
                      "periodUnit": {
                        "type": "string",
                        "enum": [
                          "seconds",
                          "minutes",
                          "hours",
                          "days"
                        ]
                      },
                      "grace": {
                        "type": "number",
                        "description": "Grace added to the period."
                      },
                      "graceUnit": {
                        "type": "string",
                        "enum": [
                          "seconds",
                          "minutes",
                          "hours",
                          "days"
                        ]
                      },
                      "pingToken": {
                        "type": "string",
                        "description": "UUID token used to build a unique ping URL.",
                        "x-format": {
                          "guid": true
                        }
                      }
                    },
                    "required": [
                      "period",
                      "periodUnit",
                      "grace",
                      "graceUnit"
                    ]
                  },
                  "script": {
                    "type": "string"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "sslCheckDomain": {
                    "type": "string"
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                    "default": null
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                    "default": null
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.",
                    "default": null
                  },
                  "degradedResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered degraded.",
                    "default": 10000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "maxResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered failing.",
                    "default": 20000,
                    "minimum": 0,
                    "maximum": 300000
                  }
                },
                "required": [
                  "request",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Heartbeats"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a5dc9247-c448-4b22-9fdf-ebc53c0e2248"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "HEARTBEAT"
                      ]
                    },
                    "heartbeat": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "number",
                          "description": "Interval expected between pings."
                        },
                        "periodUnit": {
                          "type": "string",
                          "enum": [
                            "seconds",
                            "minutes",
                            "hours",
                            "days"
                          ]
                        },
                        "grace": {
                          "type": "number",
                          "description": "Grace added to the period."
                        },
                        "graceUnit": {
                          "type": "string",
                          "enum": [
                            "seconds",
                            "minutes",
                            "hours",
                            "days"
                          ]
                        },
                        "pingToken": {
                          "type": "string",
                          "description": "UUID token used to build a unique ping URL.",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "pingUrl": {
                          "type": "string",
                          "example": "https://ping.checklyhq.com/22868839-8450-4010-9241-1ea83a2e425f"
                        }
                      },
                      "required": [
                        "period",
                        "periodUnit",
                        "grace",
                        "graceUnit"
                      ]
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/heartbeats/{checkId}/availability": {
      "get": {
        "summary": "Get heartbeat availability.",
        "operationId": "getV1ChecksHeartbeatsCheckidAvailability",
        "description": "Get heartbeat availability.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "default": "2024-05-23T14:40:43.543Z"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "default": "2024-05-24T14:40:43.543Z"
            }
          }
        ],
        "tags": [
          "Heartbeats"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "successRatio": {
                      "type": "object",
                      "properties": {
                        "previousPeriod": {
                          "type": "number"
                        },
                        "currentPeriod": {
                          "type": "number"
                        }
                      }
                    },
                    "totalEntitiesCurrentPeriod": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/heartbeats/{checkId}/events": {
      "get": {
        "summary": "Get a list of events for a heartbeat.",
        "operationId": "getV1ChecksHeartbeatsCheckidEvents",
        "description": "Get all events from a heartbeat.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "default": "2024-05-23T14:40:43.543Z"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "default": "2024-05-24T14:40:43.543Z"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "maximum": 10,
              "default": 10
            }
          }
        ],
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "events": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "state": {
                              "type": "string",
                              "description": "Describe the event state, if the ping was received or not.",
                              "example": "FAILING",
                              "enum": [
                                "FAILING",
                                "EARLY",
                                "RECEIVED",
                                "GRACE",
                                "LATE"
                              ]
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date",
                              "description": "UTC timestamp on which we received the event.",
                              "example": "2023-07-24T10:01:01.098Z"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source which triggered the event.",
                              "example": "HTTPS GET from Curl"
                            },
                            "userAgent": {
                              "type": "string",
                              "description": "User agent from the ping.",
                              "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
                            }
                          },
                          "required": [
                            "id"
                          ]
                        }
                      },
                      "stats": {
                        "type": "object",
                        "properties": {
                          "last24Hours": {
                            "type": "object",
                            "properties": {
                              "successRatio": {
                                "type": "object",
                                "properties": {
                                  "previousPeriod": {
                                    "type": "number"
                                  },
                                  "currentPeriod": {
                                    "type": "number"
                                  }
                                }
                              },
                              "totalEntitiesCurrentPeriod": {
                                "type": "number"
                              }
                            }
                          },
                          "last7Days": {
                            "type": "object",
                            "properties": {
                              "successRatio": {
                                "type": "object",
                                "properties": {
                                  "previousPeriod": {
                                    "type": "number"
                                  },
                                  "currentPeriod": {
                                    "type": "number"
                                  }
                                }
                              },
                              "totalEntitiesCurrentPeriod": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/heartbeats/{checkId}/events/{id}": {
      "get": {
        "summary": "Get a specific Heartbeat event.",
        "operationId": "getV1ChecksHeartbeatsCheckidEventsId",
        "description": "Get a specific event by its id.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Heartbeats"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "state": {
                          "type": "string",
                          "description": "Describe the event state, if the ping was received or not.",
                          "example": "FAILING",
                          "enum": [
                            "FAILING",
                            "EARLY",
                            "RECEIVED",
                            "GRACE",
                            "LATE"
                          ]
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date",
                          "description": "UTC timestamp on which we received the event.",
                          "example": "2023-07-24T10:01:01.098Z"
                        },
                        "source": {
                          "type": "string",
                          "description": "Source which triggered the event.",
                          "example": "HTTPS GET from Curl"
                        },
                        "userAgent": {
                          "type": "string",
                          "description": "User agent from the ping.",
                          "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    "stats": {
                      "type": "object",
                      "properties": {
                        "last24Hours": {
                          "type": "object",
                          "properties": {
                            "successRatio": {
                              "type": "object",
                              "properties": {
                                "previousPeriod": {
                                  "type": "number"
                                },
                                "currentPeriod": {
                                  "type": "number"
                                }
                              }
                            },
                            "totalEntitiesCurrentPeriod": {
                              "type": "number"
                            }
                          }
                        },
                        "last7Days": {
                          "type": "object",
                          "properties": {
                            "successRatio": {
                              "type": "object",
                              "properties": {
                                "previousPeriod": {
                                  "type": "number"
                                },
                                "currentPeriod": {
                                  "type": "number"
                                }
                              }
                            },
                            "totalEntitiesCurrentPeriod": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/multistep": {
      "post": {
        "summary": "Create a multi-step check",
        "operationId": "postV1ChecksMultistep",
        "description": "Creates a new Multi-Step check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "checkType": {
                    "type": "string",
                    "default": "MULTI_STEP",
                    "enum": [
                      "MULTI_STEP"
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                    "example": [],
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10,
                    "enum": [
                      1,
                      2,
                      5,
                      10,
                      15,
                      30,
                      60,
                      120,
                      180,
                      360,
                      720,
                      1440
                    ]
                  },
                  "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks.",
                    "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [],
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "description": "An array of BCR dependency files.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "maxLength": 1000
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path",
                        "content"
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "b2ca6d04-bccf-49f5-b0a4-c22a368dd57b"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                      "default": true
                    },
                    "shouldFail": {
                      "type": "boolean",
                      "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                      "default": false
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run this check.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "groupId": {
                      "type": "number",
                      "description": "The id of the check group this check is part of.",
                      "example": "null",
                      "default": null
                    },
                    "groupOrder": {
                      "type": "number",
                      "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                      "example": "null",
                      "default": null,
                      "minimum": 0
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                      "default": null,
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "MULTI_STEP"
                      ]
                    },
                    "frequency": {
                      "type": "integer",
                      "description": "How often the check should run in minutes.",
                      "default": 10,
                      "enum": [
                        1,
                        2,
                        5,
                        10,
                        15,
                        30,
                        60,
                        120,
                        180,
                        360,
                        720,
                        1440
                      ]
                    },
                    "script": {
                      "type": "string",
                      "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks."
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name",
                    "script"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/multistep/{id}": {
      "put": {
        "summary": "Update a multi-step check",
        "operationId": "putV1ChecksMultistepId",
        "description": "Updates a Multi-Step check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "checkType": {
                    "type": "string",
                    "default": "MULTI_STEP",
                    "enum": [
                      "MULTI_STEP"
                    ]
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
                    "example": [],
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10,
                    "enum": [
                      1,
                      2,
                      5,
                      10,
                      15,
                      30,
                      60,
                      120,
                      180,
                      360,
                      720,
                      1440
                    ]
                  },
                  "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks.",
                    "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [],
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "description": "An array of BCR dependency files.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "maxLength": 1000
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path",
                        "content"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "b2ca6d04-bccf-49f5-b0a4-c22a368dd57b"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the check.",
                      "example": "Check"
                    },
                    "activated": {
                      "type": "boolean",
                      "description": "Determines if the check is running or not.",
                      "default": true
                    },
                    "muted": {
                      "type": "boolean",
                      "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                      "default": false
                    },
                    "doubleCheck": {
                      "type": "boolean",
                      "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                      "default": true
                    },
                    "shouldFail": {
                      "type": "boolean",
                      "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                      "default": false
                    },
                    "locations": {
                      "type": "array",
                      "description": "An array of one or more data center locations where to run this check.",
                      "example": [
                        "us-east-1",
                        "eu-central-1"
                      ],
                      "items": {
                        "type": "string",
                        "enum": [
                          "us-east-1",
                          "us-east-2",
                          "us-west-1",
                          "us-west-2",
                          "ca-central-1",
                          "sa-east-1",
                          "eu-west-1",
                          "eu-central-1",
                          "eu-west-2",
                          "eu-west-3",
                          "eu-north-1",
                          "eu-south-1",
                          "me-south-1",
                          "ap-southeast-1",
                          "ap-northeast-1",
                          "ap-east-1",
                          "ap-southeast-2",
                          "ap-southeast-3",
                          "ap-northeast-2",
                          "ap-northeast-3",
                          "ap-south-1",
                          "af-south-1"
                        ]
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "Tags for organizing and filtering checks.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertSettings": {
                      "type": "object",
                      "description": "Alert settings.",
                      "default": {
                        "escalationType": "RUN_BASED",
                        "runBasedEscalation": {
                          "failedRunThreshold": 1
                        },
                        "reminders": {
                          "amount": 0,
                          "interval": 5
                        },
                        "parallelRunFailureThreshold": {
                          "enabled": false,
                          "percentage": 10
                        }
                      },
                      "properties": {
                        "escalationType": {
                          "type": "string",
                          "description": "Determines what type of escalation to use.",
                          "default": "RUN_BASED",
                          "enum": [
                            "RUN_BASED",
                            "TIME_BASED"
                          ]
                        },
                        "reminders": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number",
                              "description": "How many reminders to send out after the initial alert notification.",
                              "default": 0,
                              "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                100000
                              ]
                            },
                            "interval": {
                              "type": "number",
                              "description": "At what interval the reminders should be send.",
                              "default": 5,
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "sslCertificates": {
                          "type": "object",
                          "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if alert notifications should be send for expiring SSL certificates."
                            },
                            "alertThreshold": {
                              "type": "integer",
                              "description": "At what moment in time to start alerting on SSL certificates."
                            }
                          }
                        },
                        "runBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "failedRunThreshold": {
                              "type": "number",
                              "description": "After how many failed consecutive check runs an alert notification should be send.",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            }
                          }
                        },
                        "timeBasedEscalation": {
                          "type": "object",
                          "properties": {
                            "minutesFailingThreshold": {
                              "type": "number",
                              "description": "After how many minutes after a check starts failing an alert should be send.",
                              "enum": [
                                5,
                                10,
                                15,
                                30
                              ]
                            }
                          }
                        },
                        "parallelRunFailureThreshold": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Determines if parallel run threshold is enabled",
                              "default": false
                            },
                            "percentage": {
                              "type": "number",
                              "description": "The percentage of parallel runs that should fail before an alert is triggered",
                              "default": 10,
                              "enum": [
                                10,
                                20,
                                30,
                                40,
                                50,
                                60,
                                70,
                                80,
                                90,
                                100
                              ]
                            }
                          }
                        }
                      }
                    },
                    "useGlobalAlertSettings": {
                      "type": "boolean",
                      "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                      "default": true
                    },
                    "groupId": {
                      "type": "number",
                      "description": "The id of the check group this check is part of.",
                      "example": "null",
                      "default": null
                    },
                    "groupOrder": {
                      "type": "number",
                      "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                      "example": "null",
                      "default": null,
                      "minimum": 0
                    },
                    "runtimeId": {
                      "type": "string",
                      "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                      "default": null,
                      "enum": [
                        "2024.02",
                        "2023.09",
                        "2023.02",
                        "2022.10",
                        "2022.02"
                      ]
                    },
                    "alertChannelSubscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alertChannelId": {
                            "type": "number"
                          },
                          "activated": {
                            "type": "boolean",
                            "default": true
                          }
                        },
                        "required": [
                          "alertChannelId",
                          "activated"
                        ]
                      }
                    },
                    "retryStrategy": {
                      "type": "object",
                      "description": "The strategy to determine how failed checks are retried.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Determines which type of retry strategy to use.",
                          "enum": [
                            "FIXED",
                            "LINEAR",
                            "EXPONENTIAL"
                          ]
                        },
                        "baseBackoffSeconds": {
                          "type": "number",
                          "description": "The number of seconds to wait before the first retry attempt.",
                          "default": 60
                        },
                        "maxRetries": {
                          "type": "number",
                          "description": "The maximum number of attempts to retry the check.",
                          "default": 2,
                          "minimum": 1,
                          "maximum": 10
                        },
                        "maxDurationSeconds": {
                          "type": "number",
                          "description": "The total amount of time to continue retrying the check.",
                          "default": 600,
                          "minimum": 0,
                          "maximum": 600
                        },
                        "sameRegion": {
                          "type": "boolean",
                          "description": "Whether retries should be run in the same region as the initial check run.",
                          "default": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "runParallel": {
                      "type": "boolean",
                      "description": "When true, the check will run in parallel in all selected locations.",
                      "default": false
                    },
                    "checkType": {
                      "type": "string",
                      "enum": [
                        "MULTI_STEP"
                      ]
                    },
                    "frequency": {
                      "type": "integer",
                      "description": "How often the check should run in minutes.",
                      "default": 10,
                      "enum": [
                        1,
                        2,
                        5,
                        10,
                        15,
                        30,
                        60,
                        120,
                        180,
                        360,
                        720,
                        1440
                      ]
                    },
                    "script": {
                      "type": "string",
                      "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks."
                    },
                    "privateLocations": {
                      "type": "array",
                      "description": "An array of one or more private locations where to run the check.",
                      "example": [
                        "data-center-eu"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "alertChannels": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        },
                        "webhook": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "default": ""
                              },
                              "url": {
                                "type": "string",
                                "default": ""
                              },
                              "method": {
                                "type": "string",
                                "default": "POST",
                                "enum": [
                                  "GET",
                                  "POST",
                                  "PUT",
                                  "HEAD",
                                  "DELETE",
                                  "PATCH"
                                ]
                              },
                              "headers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              },
                              "queryParameters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "key": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string",
                                      "default": ""
                                    },
                                    "locked": {
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "value"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "slack": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "default": ""
                              }
                            },
                            "required": [
                              "url"
                            ]
                          }
                        },
                        "sms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "string",
                                "example": "+549110000000",
                                "default": ""
                              },
                              "name": {
                                "type": "string",
                                "example": "SMS Alert"
                              }
                            },
                            "required": [
                              "number",
                              "name"
                            ]
                          }
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "name",
                    "script"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/{id}": {
      "delete": {
        "summary": "Delete a check",
        "operationId": "deleteV1ChecksId",
        "description": "Permanently removes a API or browser check and all its related status and results data.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Checks"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a check",
        "operationId": "getV1ChecksId",
        "description": "Show details of a specific API or browser check",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "description": "The type of the check.",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    }
                  },
                  "required": [
                    "checkType"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a check",
        "operationId": "putV1ChecksId",
        "description": "<b>[DEPRECATED] This endpoint will be removed soon. Instead use <code>PUT /checks/api/{id}</code> or  <code>PUT /checks/browser/{id}</code>.</b> Updates a new API or browser check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check.",
                    "example": "Check"
                  },
                  "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not.",
                    "default": true
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
                    "default": false
                  },
                  "doubleCheck": {
                    "type": "boolean",
                    "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
                    "default": true
                  },
                  "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
                    "default": false
                  },
                  "locations": {
                    "type": "array",
                    "description": "An array of one or more data center locations where to run this check.",
                    "example": [
                      "us-east-1",
                      "eu-central-1"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2",
                        "ca-central-1",
                        "sa-east-1",
                        "eu-west-1",
                        "eu-central-1",
                        "eu-west-2",
                        "eu-west-3",
                        "eu-north-1",
                        "eu-south-1",
                        "me-south-1",
                        "ap-southeast-1",
                        "ap-northeast-1",
                        "ap-east-1",
                        "ap-southeast-2",
                        "ap-southeast-3",
                        "ap-northeast-2",
                        "ap-northeast-3",
                        "ap-south-1",
                        "af-south-1"
                      ]
                    }
                  },
                  "tags": {
                    "type": "array",
                    "description": "Tags for organizing and filtering checks.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "alertSettings": {
                    "type": "object",
                    "description": "Alert settings.",
                    "default": {
                      "escalationType": "RUN_BASED",
                      "runBasedEscalation": {
                        "failedRunThreshold": 1
                      },
                      "reminders": {
                        "amount": 0,
                        "interval": 5
                      },
                      "parallelRunFailureThreshold": {
                        "enabled": false,
                        "percentage": 10
                      }
                    },
                    "properties": {
                      "escalationType": {
                        "type": "string",
                        "description": "Determines what type of escalation to use.",
                        "default": "RUN_BASED",
                        "enum": [
                          "RUN_BASED",
                          "TIME_BASED"
                        ]
                      },
                      "reminders": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number",
                            "description": "How many reminders to send out after the initial alert notification.",
                            "default": 0,
                            "enum": [
                              0,
                              1,
                              2,
                              3,
                              4,
                              5,
                              100000
                            ]
                          },
                          "interval": {
                            "type": "number",
                            "description": "At what interval the reminders should be send.",
                            "default": 5,
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "sslCertificates": {
                        "type": "object",
                        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if alert notifications should be send for expiring SSL certificates."
                          },
                          "alertThreshold": {
                            "type": "integer",
                            "description": "At what moment in time to start alerting on SSL certificates."
                          }
                        }
                      },
                      "runBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "failedRunThreshold": {
                            "type": "number",
                            "description": "After how many failed consecutive check runs an alert notification should be send.",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          }
                        }
                      },
                      "timeBasedEscalation": {
                        "type": "object",
                        "properties": {
                          "minutesFailingThreshold": {
                            "type": "number",
                            "description": "After how many minutes after a check starts failing an alert should be send.",
                            "enum": [
                              5,
                              10,
                              15,
                              30
                            ]
                          }
                        }
                      },
                      "parallelRunFailureThreshold": {
                        "type": "object",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Determines if parallel run threshold is enabled",
                            "default": false
                          },
                          "percentage": {
                            "type": "number",
                            "description": "The percentage of parallel runs that should fail before an alert is triggered",
                            "default": 10,
                            "enum": [
                              10,
                              20,
                              30,
                              40,
                              50,
                              60,
                              70,
                              80,
                              90,
                              100
                            ]
                          }
                        }
                      }
                    }
                  },
                  "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
                    "default": true
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The id of the check group this check is part of.",
                    "example": "null",
                    "default": null
                  },
                  "groupOrder": {
                    "type": "number",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
                    "example": "null",
                    "default": null,
                    "minimum": 0
                  },
                  "runtimeId": {
                    "type": "string",
                    "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
                    "default": null,
                    "enum": [
                      "2024.02",
                      "2023.09",
                      "2023.02",
                      "2022.10",
                      "2022.02"
                    ]
                  },
                  "alertChannelSubscriptions": {
                    "type": "array",
                    "description": "List of alert channel subscriptions.",
                    "example": [],
                    "items": {
                      "type": "object",
                      "description": "Alert channel subscription.",
                      "properties": {
                        "alertChannelId": {
                          "type": "number"
                        },
                        "activated": {
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "alertChannelId",
                        "activated"
                      ]
                    }
                  },
                  "retryStrategy": {
                    "type": "object",
                    "description": "The strategy to determine how failed checks are retried.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use.",
                        "enum": [
                          "FIXED",
                          "LINEAR",
                          "EXPONENTIAL"
                        ]
                      },
                      "baseBackoffSeconds": {
                        "type": "number",
                        "description": "The number of seconds to wait before the first retry attempt.",
                        "default": 60
                      },
                      "maxRetries": {
                        "type": "number",
                        "description": "The maximum number of attempts to retry the check.",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 10
                      },
                      "maxDurationSeconds": {
                        "type": "number",
                        "description": "The total amount of time to continue retrying the check.",
                        "default": 600,
                        "minimum": 0,
                        "maximum": 600
                      },
                      "sameRegion": {
                        "type": "boolean",
                        "description": "Whether retries should be run in the same region as the initial check run.",
                        "default": true
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "runParallel": {
                    "type": "boolean",
                    "description": "When true, the check will run in parallel in all selected locations.",
                    "default": false
                  },
                  "checkType": {
                    "type": "string",
                    "description": "The type of the check.",
                    "enum": [
                      "API",
                      "BROWSER",
                      "HEARTBEAT",
                      "MULTI_STEP"
                    ]
                  },
                  "frequency": {
                    "type": "integer",
                    "description": "How often the check should run in minutes.",
                    "default": 10
                  },
                  "frequencyOffset": {
                    "type": "integer",
                    "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
                    "minimum": 1
                  },
                  "request": {
                    "type": "object"
                  },
                  "heartbeat": {
                    "type": "object"
                  },
                  "script": {
                    "type": "string"
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "Path of the script in the runtime."
                  },
                  "sslCheckDomain": {
                    "type": "string"
                  },
                  "environmentVariables": {
                    "type": "array",
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "The key of the environment variable (this value cannot be changed).",
                          "example": "API_KEY"
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the environment variable.",
                          "example": "bAxD7biGCZL6K60Q"
                        },
                        "locked": {
                          "type": "boolean",
                          "description": "Used only in the UI to hide the value like a password.",
                          "default": false
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    }
                  },
                  "setupSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.",
                    "default": null
                  },
                  "tearDownSnippetId": {
                    "type": "number",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
                    "default": null
                  },
                  "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.",
                    "default": null
                  },
                  "localTearDownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.",
                    "default": null
                  },
                  "degradedResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered degraded.",
                    "default": 10000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "maxResponseTime": {
                    "type": "number",
                    "description": "The response time in milliseconds where a check should be considered failing.",
                    "default": 20000,
                    "minimum": 0,
                    "maximum": 300000
                  },
                  "privateLocations": {
                    "type": "array",
                    "description": "An array of one or more private locations where to run the check.",
                    "example": [
                      "data-center-eu"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependencies": {
                    "type": "array",
                    "description": "An array of BCR dependency files.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "maxLength": 1000
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "path",
                        "content"
                      ]
                    }
                  }
                },
                "required": [
                  "request",
                  "heartbeat",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Checks"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "checkType": {
                      "type": "string",
                      "description": "The type of the check.",
                      "enum": [
                        "API",
                        "BROWSER",
                        "HEARTBEAT",
                        "MULTI_STEP"
                      ]
                    }
                  },
                  "required": [
                    "checkType"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/client-certificates": {
      "get": {
        "summary": "Lists all client certificates.",
        "operationId": "getV1Clientcertificates",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Client certificates"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "host": {
                        "type": "string",
                        "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
                        "example": "www.acme.com"
                      },
                      "cert": {
                        "type": "string",
                        "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
                      },
                      "key": {
                        "type": "string",
                        "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
                      },
                      "ca": {
                        "type": "string",
                        "description": "An optional CA certificate in PEM format as a string."
                      },
                      "id": {
                        "type": "string",
                        "x-format": {
                          "guid": true
                        }
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "host",
                      "cert",
                      "key",
                      "id"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new client certificate.",
        "operationId": "postV1Clientcertificates",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
                    "example": "www.acme.com"
                  },
                  "cert": {
                    "type": "string",
                    "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
                  },
                  "key": {
                    "type": "string",
                    "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
                  },
                  "ca": {
                    "type": "string",
                    "description": "An optional CA certificate in PEM format as a string."
                  },
                  "passphrase": {
                    "type": "string",
                    "description": "An optional passphrase for the private key. Your passphrase is stored encrypted at rest."
                  }
                },
                "required": [
                  "host",
                  "cert",
                  "key"
                ]
              }
            }
          }
        },
        "tags": [
          "Client certificates"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
                      "example": "www.acme.com"
                    },
                    "cert": {
                      "type": "string",
                      "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
                    },
                    "key": {
                      "type": "string",
                      "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
                    },
                    "ca": {
                      "type": "string",
                      "description": "An optional CA certificate in PEM format as a string."
                    },
                    "id": {
                      "type": "string",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "host",
                    "cert",
                    "key",
                    "id"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/client-certificates/{id}": {
      "delete": {
        "summary": "Deletes a client certificate.",
        "operationId": "deleteV1ClientcertificatesId",
        "description": "Permanently removes a client certificate.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Client certificates"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Shows one client certificate.",
        "operationId": "getV1ClientcertificatesId",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Client certificates"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
                      "example": "www.acme.com"
                    },
                    "cert": {
                      "type": "string",
                      "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
                    },
                    "key": {
                      "type": "string",
                      "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
                    },
                    "ca": {
                      "type": "string",
                      "description": "An optional CA certificate in PEM format as a string."
                    },
                    "id": {
                      "type": "string",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "required": [
                    "host",
                    "cert",
                    "key",
                    "id"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboards": {
      "get": {
        "summary": "List all dashboards",
        "operationId": "getV1Dashboards",
        "description": "Lists all current dashboards in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Dashboards"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                        "example": "https://status.mycompany.com/"
                      },
                      "customUrl": {
                        "type": "string",
                        "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                        "example": "status"
                      },
                      "logo": {
                        "type": "string",
                        "description": "A URL pointing to an image file.",
                        "example": "https://static.mycompany.com/static/images/logo.svg"
                      },
                      "favicon": {
                        "type": "string",
                        "description": "A URL pointing to an image file used as dashboard favicon.",
                        "example": "https://static.mycompany.com/static/images/icon.svg"
                      },
                      "link": {
                        "type": "string",
                        "description": "A URL link to redirect when dashboard logo is clicked on.",
                        "example": "https://www.mycompany.com/"
                      },
                      "description": {
                        "type": "string",
                        "description": "A piece of text displayed below the header or title of your dashboard.",
                        "example": "My dashboard description"
                      },
                      "width": {
                        "type": "string",
                        "description": "Determines whether to use the full screen or focus in the center.",
                        "default": "FULL",
                        "enum": [
                          "FULL",
                          "960PX"
                        ]
                      },
                      "refreshRate": {
                        "type": "number",
                        "description": "How often to refresh the dashboard in seconds.",
                        "default": 60,
                        "enum": [
                          60,
                          300,
                          600
                        ]
                      },
                      "paginate": {
                        "type": "boolean",
                        "description": "Determines of pagination is on or off.",
                        "default": true
                      },
                      "paginationRate": {
                        "type": "number",
                        "description": "How often to trigger pagination in seconds.",
                        "default": 60,
                        "enum": [
                          30,
                          60,
                          300
                        ]
                      },
                      "checksPerPage": {
                        "type": "number",
                        "description": "Number of checks displayed per page.",
                        "default": 15,
                        "minimum": 1,
                        "maximum": 20
                      },
                      "useTagsAndOperator": {
                        "type": "boolean",
                        "description": "When to use AND operator for tags lookup.",
                        "default": false
                      },
                      "hideTags": {
                        "type": "boolean",
                        "description": "Show or hide the tags on the dashboard.",
                        "default": false
                      },
                      "enableIncidents": {
                        "type": "boolean",
                        "description": "Enable or disable incidents on the dashboard.",
                        "default": false
                      },
                      "expandChecks": {
                        "type": "boolean",
                        "description": "Expand or collapse checks on the dashboard.",
                        "default": false
                      },
                      "tags": {
                        "type": "array",
                        "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                        "example": [
                          "production"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "showHeader": {
                        "type": "boolean",
                        "description": "Show or hide header and description on the dashboard.",
                        "default": true
                      },
                      "customCSS": {
                        "type": "string",
                        "description": "Custom CSS to be applied to the dashboard.",
                        "default": ""
                      },
                      "isPrivate": {
                        "type": "boolean",
                        "description": "Determines if the dashboard is public or private.",
                        "default": false
                      },
                      "showP95": {
                        "type": "boolean",
                        "description": "Show or hide the P95 stats on the dashboard.",
                        "default": true
                      },
                      "showP99": {
                        "type": "boolean",
                        "description": "Show or hide the P99 stats on the dashboard.",
                        "default": true
                      },
                      "keys": {
                        "type": "array",
                        "description": "Show key for private dashboard.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "rawKey": {
                              "type": "string",
                              "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                            },
                            "maskedKey": {
                              "type": "string",
                              "description": "The masked key value.",
                              "example": "...6a1e"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date"
                            }
                          },
                          "required": [
                            "id",
                            "rawKey",
                            "maskedKey",
                            "created_at"
                          ]
                        }
                      },
                      "id": {
                        "type": "number"
                      },
                      "dashboardId": {
                        "type": "string",
                        "example": "1"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "header": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "dashboardId",
                      "created_at"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a dashboard",
        "operationId": "postV1Dashboards",
        "description": "Creates a new dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customUrl": {
                    "type": "string",
                    "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                    "example": "status"
                  },
                  "customDomain": {
                    "type": "string",
                    "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                    "example": "https://status.mycompany.com/"
                  },
                  "logo": {
                    "type": "string",
                    "description": "A URL pointing to an image file.",
                    "example": "https://static.mycompany.com/static/images/logo.svg"
                  },
                  "favicon": {
                    "type": "string",
                    "description": "A URL pointing to an image file used as dashboard favicon.",
                    "example": "https://static.mycompany.com/static/images/icon.svg"
                  },
                  "link": {
                    "type": "string",
                    "description": "A URL link to redirect when dashboard logo is clicked on.",
                    "example": "https://www.mycompany.com/"
                  },
                  "header": {
                    "type": "string",
                    "description": "A piece of text displayed at the top of your dashboard.",
                    "example": "My company status"
                  },
                  "description": {
                    "type": "string",
                    "description": "A piece of text displayed below the header or title of your dashboard.",
                    "example": "My dashboard description"
                  },
                  "width": {
                    "type": "string",
                    "description": "Determines whether to use the full screen or focus in the center.",
                    "default": "FULL",
                    "enum": [
                      "FULL",
                      "960PX"
                    ]
                  },
                  "refreshRate": {
                    "type": "number",
                    "description": "How often to refresh the dashboard in seconds.",
                    "default": 60,
                    "enum": [
                      60,
                      300,
                      600
                    ]
                  },
                  "paginate": {
                    "type": "boolean",
                    "description": "Determines of pagination is on or off.",
                    "default": true
                  },
                  "paginationRate": {
                    "type": "number",
                    "description": "How often to trigger pagination in seconds.",
                    "default": 60,
                    "enum": [
                      30,
                      60,
                      300
                    ]
                  },
                  "checksPerPage": {
                    "type": "number",
                    "description": "Number of checks displayed per page.",
                    "default": 15,
                    "minimum": 1,
                    "maximum": 20
                  },
                  "useTagsAndOperator": {
                    "type": "boolean",
                    "description": "When to use AND operator for tags lookup.",
                    "default": false
                  },
                  "hideTags": {
                    "type": "boolean",
                    "description": "Show or hide the tags on the dashboard.",
                    "default": false
                  },
                  "enableIncidents": {
                    "type": "boolean",
                    "description": "Enable or disable incidents on the dashboard.",
                    "default": false
                  },
                  "expandChecks": {
                    "type": "boolean",
                    "description": "Expand or collapse checks on the dashboard.",
                    "default": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "showHeader": {
                    "type": "boolean",
                    "description": "Show or hide header and description on the dashboard.",
                    "default": true
                  },
                  "customCSS": {
                    "type": "string",
                    "description": "Custom CSS to be applied to the dashboard.",
                    "default": ""
                  },
                  "isPrivate": {
                    "type": "boolean",
                    "description": "Determines if the dashboard is public or private.",
                    "default": false
                  },
                  "showP95": {
                    "type": "boolean",
                    "description": "Show or hide the P95 stats on the dashboard.",
                    "default": true
                  },
                  "showP99": {
                    "type": "boolean",
                    "description": "Show or hide the P99 stats on the dashboard.",
                    "default": true
                  },
                  "keys": {
                    "type": "array",
                    "description": "Show key for private dashboard.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "rawKey": {
                          "type": "string",
                          "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                        },
                        "maskedKey": {
                          "type": "string",
                          "description": "The masked key value.",
                          "example": "...6a1e"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date"
                        }
                      },
                      "required": [
                        "id",
                        "rawKey",
                        "maskedKey",
                        "created_at"
                      ]
                    }
                  }
                },
                "required": [
                  "header"
                ]
              }
            }
          }
        },
        "tags": [
          "Dashboards"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customDomain": {
                      "type": "string",
                      "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                      "example": "https://status.mycompany.com/"
                    },
                    "customUrl": {
                      "type": "string",
                      "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                      "example": "status"
                    },
                    "logo": {
                      "type": "string",
                      "description": "A URL pointing to an image file.",
                      "example": "https://static.mycompany.com/static/images/logo.svg"
                    },
                    "favicon": {
                      "type": "string",
                      "description": "A URL pointing to an image file used as dashboard favicon.",
                      "example": "https://static.mycompany.com/static/images/icon.svg"
                    },
                    "link": {
                      "type": "string",
                      "description": "A URL link to redirect when dashboard logo is clicked on.",
                      "example": "https://www.mycompany.com/"
                    },
                    "description": {
                      "type": "string",
                      "description": "A piece of text displayed below the header or title of your dashboard.",
                      "example": "My dashboard description"
                    },
                    "width": {
                      "type": "string",
                      "description": "Determines whether to use the full screen or focus in the center.",
                      "default": "FULL",
                      "enum": [
                        "FULL",
                        "960PX"
                      ]
                    },
                    "refreshRate": {
                      "type": "number",
                      "description": "How often to refresh the dashboard in seconds.",
                      "default": 60,
                      "enum": [
                        60,
                        300,
                        600
                      ]
                    },
                    "paginate": {
                      "type": "boolean",
                      "description": "Determines of pagination is on or off.",
                      "default": true
                    },
                    "paginationRate": {
                      "type": "number",
                      "description": "How often to trigger pagination in seconds.",
                      "default": 60,
                      "enum": [
                        30,
                        60,
                        300
                      ]
                    },
                    "checksPerPage": {
                      "type": "number",
                      "description": "Number of checks displayed per page.",
                      "default": 15,
                      "minimum": 1,
                      "maximum": 20
                    },
                    "useTagsAndOperator": {
                      "type": "boolean",
                      "description": "When to use AND operator for tags lookup.",
                      "default": false
                    },
                    "hideTags": {
                      "type": "boolean",
                      "description": "Show or hide the tags on the dashboard.",
                      "default": false
                    },
                    "enableIncidents": {
                      "type": "boolean",
                      "description": "Enable or disable incidents on the dashboard.",
                      "default": false
                    },
                    "expandChecks": {
                      "type": "boolean",
                      "description": "Expand or collapse checks on the dashboard.",
                      "default": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "showHeader": {
                      "type": "boolean",
                      "description": "Show or hide header and description on the dashboard.",
                      "default": true
                    },
                    "customCSS": {
                      "type": "string",
                      "description": "Custom CSS to be applied to the dashboard.",
                      "default": ""
                    },
                    "isPrivate": {
                      "type": "boolean",
                      "description": "Determines if the dashboard is public or private.",
                      "default": false
                    },
                    "showP95": {
                      "type": "boolean",
                      "description": "Show or hide the P95 stats on the dashboard.",
                      "default": true
                    },
                    "showP99": {
                      "type": "boolean",
                      "description": "Show or hide the P99 stats on the dashboard.",
                      "default": true
                    },
                    "keys": {
                      "type": "array",
                      "description": "Show key for private dashboard.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "rawKey": {
                            "type": "string",
                            "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                          },
                          "maskedKey": {
                            "type": "string",
                            "description": "The masked key value.",
                            "example": "...6a1e"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "id",
                          "rawKey",
                          "maskedKey",
                          "created_at"
                        ]
                      }
                    },
                    "id": {
                      "type": "number"
                    },
                    "dashboardId": {
                      "type": "string",
                      "example": "1"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "header": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "dashboardId",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        409
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Conflict"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboards/{dashboardId}": {
      "delete": {
        "summary": "Delete a dashboard",
        "operationId": "deleteV1DashboardsDashboardid",
        "description": "Permanently removes a dashboard.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Dashboards"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a dashboard",
        "operationId": "getV1DashboardsDashboardid",
        "description": "Show details of a specific dashboard.<br><br><b>Rate-limiting is applied to this endpoint, you can send 10 requests / 20 seconds at most.<b>",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "customUrl",
                "customDomain"
              ]
            }
          }
        ],
        "tags": [
          "Dashboards"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customDomain": {
                      "type": "string",
                      "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                      "example": "https://status.mycompany.com/"
                    },
                    "customUrl": {
                      "type": "string",
                      "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                      "example": "status"
                    },
                    "logo": {
                      "type": "string",
                      "description": "A URL pointing to an image file.",
                      "example": "https://static.mycompany.com/static/images/logo.svg"
                    },
                    "favicon": {
                      "type": "string",
                      "description": "A URL pointing to an image file used as dashboard favicon.",
                      "example": "https://static.mycompany.com/static/images/icon.svg"
                    },
                    "link": {
                      "type": "string",
                      "description": "A URL link to redirect when dashboard logo is clicked on.",
                      "example": "https://www.mycompany.com/"
                    },
                    "description": {
                      "type": "string",
                      "description": "A piece of text displayed below the header or title of your dashboard.",
                      "example": "My dashboard description"
                    },
                    "width": {
                      "type": "string",
                      "description": "Determines whether to use the full screen or focus in the center.",
                      "default": "FULL",
                      "enum": [
                        "FULL",
                        "960PX"
                      ]
                    },
                    "refreshRate": {
                      "type": "number",
                      "description": "How often to refresh the dashboard in seconds.",
                      "default": 60,
                      "enum": [
                        60,
                        300,
                        600
                      ]
                    },
                    "paginate": {
                      "type": "boolean",
                      "description": "Determines of pagination is on or off.",
                      "default": true
                    },
                    "paginationRate": {
                      "type": "number",
                      "description": "How often to trigger pagination in seconds.",
                      "default": 60,
                      "enum": [
                        30,
                        60,
                        300
                      ]
                    },
                    "checksPerPage": {
                      "type": "number",
                      "description": "Number of checks displayed per page.",
                      "default": 15,
                      "minimum": 1,
                      "maximum": 20
                    },
                    "useTagsAndOperator": {
                      "type": "boolean",
                      "description": "When to use AND operator for tags lookup.",
                      "default": false
                    },
                    "hideTags": {
                      "type": "boolean",
                      "description": "Show or hide the tags on the dashboard.",
                      "default": false
                    },
                    "enableIncidents": {
                      "type": "boolean",
                      "description": "Enable or disable incidents on the dashboard.",
                      "default": false
                    },
                    "expandChecks": {
                      "type": "boolean",
                      "description": "Expand or collapse checks on the dashboard.",
                      "default": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "showHeader": {
                      "type": "boolean",
                      "description": "Show or hide header and description on the dashboard.",
                      "default": true
                    },
                    "customCSS": {
                      "type": "string",
                      "description": "Custom CSS to be applied to the dashboard.",
                      "default": ""
                    },
                    "isPrivate": {
                      "type": "boolean",
                      "description": "Determines if the dashboard is public or private.",
                      "default": false
                    },
                    "showP95": {
                      "type": "boolean",
                      "description": "Show or hide the P95 stats on the dashboard.",
                      "default": true
                    },
                    "showP99": {
                      "type": "boolean",
                      "description": "Show or hide the P99 stats on the dashboard.",
                      "default": true
                    },
                    "keys": {
                      "type": "array",
                      "description": "Show key for private dashboard.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "rawKey": {
                            "type": "string",
                            "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                          },
                          "maskedKey": {
                            "type": "string",
                            "description": "The masked key value.",
                            "example": "...6a1e"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "id",
                          "rawKey",
                          "maskedKey",
                          "created_at"
                        ]
                      }
                    },
                    "id": {
                      "type": "number"
                    },
                    "dashboardId": {
                      "type": "string",
                      "example": "1"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "header": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "dashboardId",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a dashboard",
        "operationId": "putV1DashboardsDashboardid",
        "description": "Updates a dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customDomain": {
                    "type": "string",
                    "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                    "example": "https://status.mycompany.com/"
                  },
                  "customUrl": {
                    "type": "string",
                    "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                    "example": "status"
                  },
                  "logo": {
                    "type": "string",
                    "description": "A URL pointing to an image file.",
                    "example": "https://static.mycompany.com/static/images/logo.svg"
                  },
                  "favicon": {
                    "type": "string",
                    "description": "A URL pointing to an image file used as dashboard favicon.",
                    "example": "https://static.mycompany.com/static/images/icon.svg"
                  },
                  "link": {
                    "type": "string",
                    "description": "A URL link to redirect when dashboard logo is clicked on.",
                    "example": "https://www.mycompany.com/"
                  },
                  "description": {
                    "type": "string",
                    "description": "A piece of text displayed below the header or title of your dashboard.",
                    "example": "My dashboard description"
                  },
                  "width": {
                    "type": "string",
                    "description": "Determines whether to use the full screen or focus in the center.",
                    "default": "FULL",
                    "enum": [
                      "FULL",
                      "960PX"
                    ]
                  },
                  "refreshRate": {
                    "type": "number",
                    "description": "How often to refresh the dashboard in seconds.",
                    "default": 60,
                    "enum": [
                      60,
                      300,
                      600
                    ]
                  },
                  "paginate": {
                    "type": "boolean",
                    "description": "Determines of pagination is on or off.",
                    "default": true
                  },
                  "paginationRate": {
                    "type": "number",
                    "description": "How often to trigger pagination in seconds.",
                    "default": 60,
                    "enum": [
                      30,
                      60,
                      300
                    ]
                  },
                  "checksPerPage": {
                    "type": "number",
                    "description": "Number of checks displayed per page.",
                    "default": 15,
                    "minimum": 1,
                    "maximum": 20
                  },
                  "useTagsAndOperator": {
                    "type": "boolean",
                    "description": "When to use AND operator for tags lookup.",
                    "default": false
                  },
                  "hideTags": {
                    "type": "boolean",
                    "description": "Show or hide the tags on the dashboard.",
                    "default": false
                  },
                  "enableIncidents": {
                    "type": "boolean",
                    "description": "Enable or disable incidents on the dashboard.",
                    "default": false
                  },
                  "expandChecks": {
                    "type": "boolean",
                    "description": "Expand or collapse checks on the dashboard.",
                    "default": false
                  },
                  "tags": {
                    "type": "array",
                    "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "showHeader": {
                    "type": "boolean",
                    "description": "Show or hide header and description on the dashboard.",
                    "default": true
                  },
                  "customCSS": {
                    "type": "string",
                    "description": "Custom CSS to be applied to the dashboard.",
                    "default": ""
                  },
                  "isPrivate": {
                    "type": "boolean",
                    "description": "Determines if the dashboard is public or private.",
                    "default": false
                  },
                  "showP95": {
                    "type": "boolean",
                    "description": "Show or hide the P95 stats on the dashboard.",
                    "default": true
                  },
                  "showP99": {
                    "type": "boolean",
                    "description": "Show or hide the P99 stats on the dashboard.",
                    "default": true
                  },
                  "keys": {
                    "type": "array",
                    "description": "Show key for private dashboard.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "x-format": {
                            "guid": true
                          }
                        },
                        "rawKey": {
                          "type": "string",
                          "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                        },
                        "maskedKey": {
                          "type": "string",
                          "description": "The masked key value.",
                          "example": "...6a1e"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date"
                        }
                      },
                      "required": [
                        "id",
                        "rawKey",
                        "maskedKey",
                        "created_at"
                      ]
                    }
                  },
                  "header": {
                    "type": "string",
                    "description": "A piece of text displayed at the top of your dashboard.",
                    "example": "My company status"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Dashboards"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customDomain": {
                      "type": "string",
                      "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
                      "example": "https://status.mycompany.com/"
                    },
                    "customUrl": {
                      "type": "string",
                      "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
                      "example": "status"
                    },
                    "logo": {
                      "type": "string",
                      "description": "A URL pointing to an image file.",
                      "example": "https://static.mycompany.com/static/images/logo.svg"
                    },
                    "favicon": {
                      "type": "string",
                      "description": "A URL pointing to an image file used as dashboard favicon.",
                      "example": "https://static.mycompany.com/static/images/icon.svg"
                    },
                    "link": {
                      "type": "string",
                      "description": "A URL link to redirect when dashboard logo is clicked on.",
                      "example": "https://www.mycompany.com/"
                    },
                    "description": {
                      "type": "string",
                      "description": "A piece of text displayed below the header or title of your dashboard.",
                      "example": "My dashboard description"
                    },
                    "width": {
                      "type": "string",
                      "description": "Determines whether to use the full screen or focus in the center.",
                      "default": "FULL",
                      "enum": [
                        "FULL",
                        "960PX"
                      ]
                    },
                    "refreshRate": {
                      "type": "number",
                      "description": "How often to refresh the dashboard in seconds.",
                      "default": 60,
                      "enum": [
                        60,
                        300,
                        600
                      ]
                    },
                    "paginate": {
                      "type": "boolean",
                      "description": "Determines of pagination is on or off.",
                      "default": true
                    },
                    "paginationRate": {
                      "type": "number",
                      "description": "How often to trigger pagination in seconds.",
                      "default": 60,
                      "enum": [
                        30,
                        60,
                        300
                      ]
                    },
                    "checksPerPage": {
                      "type": "number",
                      "description": "Number of checks displayed per page.",
                      "default": 15,
                      "minimum": 1,
                      "maximum": 20
                    },
                    "useTagsAndOperator": {
                      "type": "boolean",
                      "description": "When to use AND operator for tags lookup.",
                      "default": false
                    },
                    "hideTags": {
                      "type": "boolean",
                      "description": "Show or hide the tags on the dashboard.",
                      "default": false
                    },
                    "enableIncidents": {
                      "type": "boolean",
                      "description": "Enable or disable incidents on the dashboard.",
                      "default": false
                    },
                    "expandChecks": {
                      "type": "boolean",
                      "description": "Expand or collapse checks on the dashboard.",
                      "default": false
                    },
                    "tags": {
                      "type": "array",
                      "description": "A list of one or more tags that filter which checks to display on the dashboard.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "showHeader": {
                      "type": "boolean",
                      "description": "Show or hide header and description on the dashboard.",
                      "default": true
                    },
                    "customCSS": {
                      "type": "string",
                      "description": "Custom CSS to be applied to the dashboard.",
                      "default": ""
                    },
                    "isPrivate": {
                      "type": "boolean",
                      "description": "Determines if the dashboard is public or private.",
                      "default": false
                    },
                    "showP95": {
                      "type": "boolean",
                      "description": "Show or hide the P95 stats on the dashboard.",
                      "default": true
                    },
                    "showP99": {
                      "type": "boolean",
                      "description": "Show or hide the P99 stats on the dashboard.",
                      "default": true
                    },
                    "keys": {
                      "type": "array",
                      "description": "Show key for private dashboard.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "rawKey": {
                            "type": "string",
                            "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                          },
                          "maskedKey": {
                            "type": "string",
                            "description": "The masked key value.",
                            "example": "...6a1e"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "id",
                          "rawKey",
                          "maskedKey",
                          "created_at"
                        ]
                      }
                    },
                    "id": {
                      "type": "number"
                    },
                    "dashboardId": {
                      "type": "string",
                      "example": "1"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "header": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "dashboardId",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        409
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Conflict"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents": {
      "post": {
        "summary": "Create an incident",
        "operationId": "postV1Incidents",
        "description": "Creates a new incident.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name used to describe the incident.",
                    "example": "Service outage"
                  },
                  "impact": {
                    "type": "string",
                    "description": "Used to indicate the impact or severity.",
                    "example": "MINOR",
                    "default": "MINOR",
                    "enum": [
                      "MAINTENANCE",
                      "MAJOR",
                      "MINOR"
                    ]
                  },
                  "startedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Used to indicate when incident starts to be active.",
                    "example": "2022-11-25 12:34:56"
                  },
                  "stoppedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Used to indicate when incident turns to inactive.",
                    "example": "2022-11-25 13:34:56"
                  },
                  "dashboardId": {
                    "type": "number",
                    "description": "The dashboard ID where the incident will be shown.",
                    "example": 1234
                  },
                  "incidentUpdates": {
                    "type": "array",
                    "description": "The first incident update with the status and description. It must be only one element.",
                    "example": [
                      {
                        "status": "INVESTIGATING",
                        "description": "The service is down and affects all the regions."
                      }
                    ],
                    "x-constraint": {
                      "length": 1
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                          "example": "INVESTIGATING",
                          "enum": [
                            "INVESTIGATING",
                            "IDENTIFIED",
                            "MONITORING",
                            "RESOLVED",
                            "MAINTENANCE"
                          ]
                        },
                        "description": {
                          "type": "string",
                          "description": "A description about the status update.",
                          "example": "We found the issue and we are working on it."
                        }
                      },
                      "required": [
                        "status",
                        "description"
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "impact",
                  "dashboardId",
                  "incidentUpdates"
                ]
              }
            }
          }
        },
        "tags": [
          "Incidents"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "A name used to describe the incident.",
                      "example": "Service outage"
                    },
                    "impact": {
                      "type": "string",
                      "description": "Used to indicate the impact or severity.",
                      "example": "MINOR",
                      "default": "MINOR",
                      "enum": [
                        "MAINTENANCE",
                        "MAJOR",
                        "MINOR"
                      ]
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Used to indicate when incident starts to be active.",
                      "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Used to indicate when incident turns to inactive.",
                      "example": "2022-11-25 13:34:56"
                    },
                    "dashboardId": {
                      "type": "number",
                      "description": "The dashboard ID where the incident will be shown.",
                      "example": 1234
                    },
                    "id": {
                      "type": "string",
                      "description": "The incident universal and unique identificator.",
                      "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when the incident was created.",
                      "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when last the incident update.",
                      "example": "2022-09-08T20:41:28.658Z"
                    },
                    "incidentUpdates": {
                      "type": "array",
                      "description": "The first incident update with the status and description. It must be only one element.",
                      "example": [
                        {
                          "id": "01f477f8-4293-4e1c-82bd-99797720434c",
                          "status": "RESOLVED",
                          "description": "The service is up and all is recovered.",
                          "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                          "created_at": "2022-09-08T20:56:48.425Z",
                          "updated_at": null
                        },
                        {
                          "id": "1f0640f8-1910-4137-b91d-ed152faa92e6",
                          "status": "INVESTIGATING",
                          "description": "The service is down and affects all the regions.",
                          "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                          "created_at": "2022-09-08T18:56:48.425Z",
                          "updated_at": null
                        }
                      ],
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                            "example": "INVESTIGATING",
                            "enum": [
                              "INVESTIGATING",
                              "IDENTIFIED",
                              "MONITORING",
                              "RESOLVED",
                              "MAINTENANCE"
                            ]
                          },
                          "description": {
                            "type": "string",
                            "description": "A description about the status update.",
                            "example": "We found the issue and we are working on it."
                          },
                          "id": {
                            "type": "string",
                            "description": "The incident update universal and unique identificator.",
                            "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date",
                            "description": "The timestamp when the incident update was created.",
                            "example": "2022-09-08T19:41:28.658Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date",
                            "description": "The timestamp when last the update.",
                            "example": "2022-09-08T20:41:28.658Z"
                          }
                        },
                        "required": [
                          "status",
                          "description",
                          "id",
                          "created_at",
                          "updated_at"
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "impact",
                    "dashboardId",
                    "id",
                    "created_at",
                    "updated_at",
                    "incidentUpdates"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{id}": {
      "delete": {
        "summary": "Delete an incident",
        "operationId": "deleteV1IncidentsId",
        "description": "Permanently removes an incident and all its updates.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve an incident",
        "operationId": "getV1IncidentsId",
        "description": "Shows details of a specific incident. Uses the \"includeAllIncidentUpdates\" query parameter to obtain all updates.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "You use it to include all the incident updates.",
            "name": "includeAllIncidentUpdates",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Incidents"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "A name used to describe the incident.",
                      "example": "Service outage"
                    },
                    "impact": {
                      "type": "string",
                      "description": "Used to indicate the impact or severity.",
                      "example": "MINOR",
                      "default": "MINOR",
                      "enum": [
                        "MAINTENANCE",
                        "MAJOR",
                        "MINOR"
                      ]
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Used to indicate when incident starts to be active.",
                      "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Used to indicate when incident turns to inactive.",
                      "example": "2022-11-25 13:34:56"
                    },
                    "dashboardId": {
                      "type": "number",
                      "description": "The dashboard ID where the incident will be shown.",
                      "example": 1234
                    },
                    "id": {
                      "type": "string",
                      "description": "The incident universal and unique identificator.",
                      "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when the incident was created.",
                      "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when last the incident update.",
                      "example": "2022-09-08T20:41:28.658Z"
                    },
                    "incidentUpdates": {
                      "type": "array",
                      "description": "The first incident update with the status and description. It must be only one element.",
                      "example": [
                        {
                          "id": "01f477f8-4293-4e1c-82bd-99797720434c",
                          "status": "RESOLVED",
                          "description": "The service is up and all is recovered.",
                          "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                          "created_at": "2022-09-08T20:56:48.425Z",
                          "updated_at": null
                        },
                        {
                          "id": "1f0640f8-1910-4137-b91d-ed152faa92e6",
                          "status": "INVESTIGATING",
                          "description": "The service is down and affects all the regions.",
                          "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                          "created_at": "2022-09-08T18:56:48.425Z",
                          "updated_at": null
                        }
                      ],
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                            "example": "INVESTIGATING",
                            "enum": [
                              "INVESTIGATING",
                              "IDENTIFIED",
                              "MONITORING",
                              "RESOLVED",
                              "MAINTENANCE"
                            ]
                          },
                          "description": {
                            "type": "string",
                            "description": "A description about the status update.",
                            "example": "We found the issue and we are working on it."
                          },
                          "id": {
                            "type": "string",
                            "description": "The incident update universal and unique identificator.",
                            "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date",
                            "description": "The timestamp when the incident update was created.",
                            "example": "2022-09-08T19:41:28.658Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date",
                            "description": "The timestamp when last the update.",
                            "example": "2022-09-08T20:41:28.658Z"
                          }
                        },
                        "required": [
                          "status",
                          "description",
                          "id",
                          "created_at",
                          "updated_at"
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "impact",
                    "dashboardId",
                    "id",
                    "created_at",
                    "updated_at",
                    "incidentUpdates"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an incident",
        "operationId": "putV1IncidentsId",
        "description": "Updates an incident.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "probe",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name used to describe the incident.",
                    "example": "Service outage"
                  },
                  "impact": {
                    "type": "string",
                    "description": "Used to indicate the impact or severity.",
                    "example": "MINOR",
                    "default": "MINOR",
                    "enum": [
                      "MAINTENANCE",
                      "MAJOR",
                      "MINOR"
                    ]
                  },
                  "startedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Used to indicate when incident starts to be active.",
                    "example": "2022-11-25 12:34:56"
                  },
                  "stoppedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Used to indicate when incident turns to inactive.",
                    "example": "2022-11-25 13:34:56"
                  }
                },
                "required": [
                  "name",
                  "impact"
                ]
              }
            }
          }
        },
        "tags": [
          "Incidents"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "A name used to describe the incident.",
                      "example": "Service outage"
                    },
                    "impact": {
                      "type": "string",
                      "description": "Used to indicate the impact or severity.",
                      "example": "MINOR",
                      "default": "MINOR",
                      "enum": [
                        "MAINTENANCE",
                        "MAJOR",
                        "MINOR"
                      ]
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Used to indicate when incident starts to be active.",
                      "example": "2022-11-25 12:34:56"
                    },
                    "stoppedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Used to indicate when incident turns to inactive.",
                      "example": "2022-11-25 13:34:56"
                    },
                    "dashboardId": {
                      "type": "number",
                      "description": "The dashboard ID where the incident will be shown.",
                      "example": 1234
                    },
                    "id": {
                      "type": "string",
                      "description": "The incident universal and unique identificator.",
                      "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when the incident was created.",
                      "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when last the incident update.",
                      "example": "2022-09-08T20:41:28.658Z"
                    },
                    "incidentUpdates": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "impact",
                    "dashboardId",
                    "id",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incidentId}/updates": {
      "post": {
        "summary": "Create an incident udpate",
        "operationId": "postV1IncidentsIncidentidUpdates",
        "description": "Creates a new update for an incident.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "incidentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                    "example": "INVESTIGATING",
                    "enum": [
                      "INVESTIGATING",
                      "IDENTIFIED",
                      "MONITORING",
                      "RESOLVED",
                      "MAINTENANCE"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "A description about the status update.",
                    "example": "We found the issue and we are working on it."
                  }
                },
                "required": [
                  "status",
                  "description"
                ]
              }
            }
          }
        },
        "tags": [
          "Incident Updates"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                        "example": "INVESTIGATING",
                        "enum": [
                          "INVESTIGATING",
                          "IDENTIFIED",
                          "MONITORING",
                          "RESOLVED",
                          "MAINTENANCE"
                        ]
                      },
                      "description": {
                        "type": "string",
                        "description": "A description about the status update.",
                        "example": "We found the issue and we are working on it."
                      },
                      "id": {
                        "type": "string",
                        "description": "The incident update universal and unique identificator.",
                        "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                        "x-format": {
                          "guid": true
                        }
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when the incident update was created.",
                        "example": "2022-09-08T19:41:28.658Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The timestamp when last the update.",
                        "example": "2022-09-08T20:41:28.658Z"
                      }
                    },
                    "required": [
                      "status",
                      "description",
                      "id",
                      "created_at",
                      "updated_at"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/incidents/{incidentId}/updates/{id}": {
      "delete": {
        "summary": "Delete an incident udpate",
        "operationId": "deleteV1IncidentsIncidentidUpdatesId",
        "description": "Permanently removes an incident update.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "incidentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Incident Updates"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an incident udpate",
        "operationId": "putV1IncidentsIncidentidUpdatesId",
        "description": "Modifies an incident update.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "incidentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A description about the status update.",
                    "example": "We found the issue and we are working on it."
                  }
                },
                "required": [
                  "description"
                ]
              }
            }
          }
        },
        "tags": [
          "Incident Updates"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                      "example": "INVESTIGATING",
                      "enum": [
                        "INVESTIGATING",
                        "IDENTIFIED",
                        "MONITORING",
                        "RESOLVED",
                        "MAINTENANCE"
                      ]
                    },
                    "description": {
                      "type": "string",
                      "description": "A description about the status update.",
                      "example": "We found the issue and we are working on it."
                    },
                    "id": {
                      "type": "string",
                      "description": "The incident update universal and unique identificator.",
                      "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when the incident update was created.",
                      "example": "2022-09-08T19:41:28.658Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The timestamp when last the update.",
                      "example": "2022-09-08T20:41:28.658Z"
                    }
                  },
                  "required": [
                    "status",
                    "description",
                    "id",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/locations": {
      "get": {
        "summary": "Lists all supported locations",
        "operationId": "getV1Locations",
        "description": "Lists all supported locationss.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Location"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "region": {
                        "type": "string",
                        "description": "The unique identifier of this location.",
                        "example": "us-east-1"
                      },
                      "name": {
                        "type": "string",
                        "description": "Friendly name of this location.",
                        "example": "N. Virginia"
                      }
                    },
                    "required": [
                      "region",
                      "name"
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/maintenance-windows": {
      "get": {
        "summary": "List all maintenance windows",
        "operationId": "getV1Maintenancewindows",
        "description": "Lists all maintenance windows in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Maintenance windows"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The id of the maintenance window.",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "description": "The maintenance window name.",
                        "example": "Maintenance Window"
                      },
                      "tags": {
                        "type": "array",
                        "description": "The names of the checks and groups maintenance window should apply to.",
                        "example": [
                          "production"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "startsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The start date of the maintenance window.",
                        "example": "2022-08-24"
                      },
                      "endsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date of the maintenance window.",
                        "example": "2022-08-25"
                      },
                      "repeatInterval": {
                        "type": "number",
                        "description": "The repeat interval of the maintenance window from the first occurance.",
                        "example": "null",
                        "default": null,
                        "minimum": 1
                      },
                      "repeatUnit": {
                        "type": "string",
                        "description": "The repeat strategy for the maintenance window.",
                        "example": "DAY"
                      },
                      "repeatEndsAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The end date where the maintenance window should stop repeating.",
                        "example": "null"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The creation date of the maintenance window."
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date",
                        "description": "The last date that the maintenance window was updated."
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "startsAt",
                      "endsAt",
                      "repeatUnit",
                      "created_at",
                      "updated_at"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a maintenance window",
        "operationId": "postV1Maintenancewindows",
        "description": "Creates a new maintenance window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The maintenance window name.",
                    "example": "Maintenance Window"
                  },
                  "tags": {
                    "type": "array",
                    "description": "The names of the checks and groups maintenance window should apply to.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "startsAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the maintenance window.",
                    "example": "2022-08-24"
                  },
                  "endsAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the maintenance window.",
                    "example": "2022-08-25"
                  },
                  "repeatInterval": {
                    "type": "number",
                    "description": "The repeat interval of the maintenance window from the first occurance.",
                    "example": "null",
                    "default": null,
                    "minimum": 1
                  },
                  "repeatUnit": {
                    "type": "string",
                    "description": "The repeat strategy for the maintenance window.",
                    "example": "DAY"
                  },
                  "repeatEndsAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date where the maintenance window should stop repeating.",
                    "example": "null"
                  }
                },
                "required": [
                  "name",
                  "startsAt",
                  "endsAt",
                  "repeatUnit"
                ]
              }
            }
          }
        },
        "tags": [
          "Maintenance windows"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the maintenance window.",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The maintenance window name.",
                      "example": "Maintenance Window"
                    },
                    "tags": {
                      "type": "array",
                      "description": "The names of the checks and groups maintenance window should apply to.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "startsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The start date of the maintenance window.",
                      "example": "2022-08-24"
                    },
                    "endsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date of the maintenance window.",
                      "example": "2022-08-25"
                    },
                    "repeatInterval": {
                      "type": "number",
                      "description": "The repeat interval of the maintenance window from the first occurance.",
                      "example": "null",
                      "default": null,
                      "minimum": 1
                    },
                    "repeatUnit": {
                      "type": "string",
                      "description": "The repeat strategy for the maintenance window.",
                      "example": "DAY"
                    },
                    "repeatEndsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date where the maintenance window should stop repeating.",
                      "example": "null"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The creation date of the maintenance window."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The last date that the maintenance window was updated."
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "startsAt",
                    "endsAt",
                    "repeatUnit",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/maintenance-windows/{id}": {
      "delete": {
        "summary": "Delete a maintenance window",
        "operationId": "deleteV1MaintenancewindowsId",
        "description": "Permanently removes a maintenance window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Maintenance windows"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a maintenance window",
        "operationId": "getV1MaintenancewindowsId",
        "description": "Show details of a specific maintenance window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Maintenance windows"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the maintenance window.",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The maintenance window name.",
                      "example": "Maintenance Window"
                    },
                    "tags": {
                      "type": "array",
                      "description": "The names of the checks and groups maintenance window should apply to.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "startsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The start date of the maintenance window.",
                      "example": "2022-08-24"
                    },
                    "endsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date of the maintenance window.",
                      "example": "2022-08-25"
                    },
                    "repeatInterval": {
                      "type": "number",
                      "description": "The repeat interval of the maintenance window from the first occurance.",
                      "example": "null",
                      "default": null,
                      "minimum": 1
                    },
                    "repeatUnit": {
                      "type": "string",
                      "description": "The repeat strategy for the maintenance window.",
                      "example": "DAY"
                    },
                    "repeatEndsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date where the maintenance window should stop repeating.",
                      "example": "null"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The creation date of the maintenance window."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The last date that the maintenance window was updated."
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "startsAt",
                    "endsAt",
                    "repeatUnit",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a maintenance window",
        "operationId": "putV1MaintenancewindowsId",
        "description": "Updates a maintenance window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The maintenance window name.",
                    "example": "Maintenance Window"
                  },
                  "tags": {
                    "type": "array",
                    "description": "The names of the checks and groups maintenance window should apply to.",
                    "example": [
                      "production"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "startsAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the maintenance window.",
                    "example": "2022-08-24"
                  },
                  "endsAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the maintenance window.",
                    "example": "2022-08-25"
                  },
                  "repeatInterval": {
                    "type": "number",
                    "description": "The repeat interval of the maintenance window from the first occurance.",
                    "example": "null",
                    "default": null,
                    "minimum": 1
                  },
                  "repeatUnit": {
                    "type": "string",
                    "description": "The repeat strategy for the maintenance window.",
                    "example": "DAY"
                  },
                  "repeatEndsAt": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date where the maintenance window should stop repeating.",
                    "example": "null"
                  }
                },
                "required": [
                  "name",
                  "startsAt",
                  "endsAt",
                  "repeatUnit"
                ]
              }
            }
          }
        },
        "tags": [
          "Maintenance windows"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "The id of the maintenance window.",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The maintenance window name.",
                      "example": "Maintenance Window"
                    },
                    "tags": {
                      "type": "array",
                      "description": "The names of the checks and groups maintenance window should apply to.",
                      "example": [
                        "production"
                      ],
                      "items": {
                        "type": "string"
                      }
                    },
                    "startsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The start date of the maintenance window.",
                      "example": "2022-08-24"
                    },
                    "endsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date of the maintenance window.",
                      "example": "2022-08-25"
                    },
                    "repeatInterval": {
                      "type": "number",
                      "description": "The repeat interval of the maintenance window from the first occurance.",
                      "example": "null",
                      "default": null,
                      "minimum": 1
                    },
                    "repeatUnit": {
                      "type": "string",
                      "description": "The repeat strategy for the maintenance window.",
                      "example": "DAY"
                    },
                    "repeatEndsAt": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date where the maintenance window should stop repeating.",
                      "example": "null"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The creation date of the maintenance window."
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date",
                      "description": "The last date that the maintenance window was updated."
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "startsAt",
                    "endsAt",
                    "repeatUnit",
                    "created_at",
                    "updated_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations": {
      "get": {
        "summary": "List all private locations",
        "operationId": "getV1Privatelocations",
        "description": "Lists all private locations in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Private locations"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "a02490af-537f-4234-80d3-4ce800d81d13",
                        "x-format": {
                          "guid": true
                        }
                      },
                      "name": {
                        "type": "string",
                        "description": "The name assigned to the private location.",
                        "example": "New Private Location"
                      },
                      "slugName": {
                        "type": "string",
                        "description": "Valid slug name.",
                        "example": "new-private-location"
                      },
                      "icon": {
                        "type": "string",
                        "description": "The private location icon.",
                        "example": "location"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date"
                      },
                      "checkAssignments": {
                        "type": "array",
                        "description": "The check this private location has assigned.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "c667b954-b207-43ac-a995-87aebff748ba",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "checkId": {
                              "type": "string",
                              "description": "The ID of the check.",
                              "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "privateLocationId": {
                              "type": "string",
                              "description": "The ID of the assigned private location.",
                              "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                              "x-format": {
                                "guid": true
                              }
                            }
                          },
                          "required": [
                            "id",
                            "checkId",
                            "privateLocationId"
                          ]
                        }
                      },
                      "groupAssignments": {
                        "type": "array",
                        "description": "The group this private location has assigned.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "groupId": {
                              "type": "number",
                              "description": "The ID of the group.",
                              "example": 10
                            },
                            "privateLocationId": {
                              "type": "string",
                              "description": "The ID of the assigned private location.",
                              "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                              "x-format": {
                                "guid": true
                              }
                            }
                          },
                          "required": [
                            "id",
                            "groupId",
                            "privateLocationId"
                          ]
                        }
                      },
                      "keys": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                              "x-format": {
                                "guid": true
                              }
                            },
                            "rawKey": {
                              "type": "string",
                              "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                            },
                            "maskedKey": {
                              "type": "string",
                              "description": "The masked key value.",
                              "example": "...6a1e"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date"
                            }
                          },
                          "required": [
                            "id",
                            "rawKey",
                            "maskedKey",
                            "created_at"
                          ]
                        }
                      },
                      "lastSeen": {
                        "type": "string",
                        "format": "date"
                      },
                      "agentCount": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "slugName",
                      "created_at"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a private location",
        "operationId": "postV1Privatelocations",
        "description": "Creates a new private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name assigned to the private location.",
                    "example": "New Private Location"
                  },
                  "slugName": {
                    "type": "string",
                    "description": "Valid slug name.",
                    "example": "new-private-location",
                    "pattern": "^((?!((us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|(north|south)?(east|west)?)-\\d+))[a-zA-Z0-9-]{1,30})$"
                  },
                  "icon": {
                    "type": "string",
                    "example": "location",
                    "default": "location"
                  }
                },
                "required": [
                  "name",
                  "slugName"
                ]
              }
            }
          }
        },
        "tags": [
          "Private locations"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a02490af-537f-4234-80d3-4ce800d81d13",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "The name assigned to the private location.",
                      "example": "New Private Location"
                    },
                    "slugName": {
                      "type": "string",
                      "description": "Valid slug name.",
                      "example": "new-private-location"
                    },
                    "icon": {
                      "type": "string",
                      "description": "The private location icon.",
                      "example": "location"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "checkAssignments": {
                      "type": "array",
                      "description": "The check this private location has assigned.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "c667b954-b207-43ac-a995-87aebff748ba",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "checkId": {
                            "type": "string",
                            "description": "The ID of the check.",
                            "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "privateLocationId": {
                            "type": "string",
                            "description": "The ID of the assigned private location.",
                            "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                            "x-format": {
                              "guid": true
                            }
                          }
                        },
                        "required": [
                          "id",
                          "checkId",
                          "privateLocationId"
                        ]
                      }
                    },
                    "groupAssignments": {
                      "type": "array",
                      "description": "The group this private location has assigned.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "groupId": {
                            "type": "number",
                            "description": "The ID of the group.",
                            "example": 10
                          },
                          "privateLocationId": {
                            "type": "string",
                            "description": "The ID of the assigned private location.",
                            "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                            "x-format": {
                              "guid": true
                            }
                          }
                        },
                        "required": [
                          "id",
                          "groupId",
                          "privateLocationId"
                        ]
                      }
                    },
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "rawKey": {
                            "type": "string",
                            "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                          },
                          "maskedKey": {
                            "type": "string",
                            "description": "The masked key value.",
                            "example": "...6a1e"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "id",
                          "rawKey",
                          "maskedKey",
                          "created_at"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "slugName",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}": {
      "delete": {
        "summary": "Remove a private location",
        "operationId": "deleteV1PrivatelocationsId",
        "description": "Permanently removes a private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Private locations"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a private location",
        "operationId": "getV1PrivatelocationsId",
        "description": "Show details of a specific private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Private locations"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a02490af-537f-4234-80d3-4ce800d81d13",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "The name assigned to the private location.",
                      "example": "New Private Location"
                    },
                    "slugName": {
                      "type": "string",
                      "description": "Valid slug name.",
                      "example": "new-private-location"
                    },
                    "icon": {
                      "type": "string",
                      "description": "The private location icon.",
                      "example": "location"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "checkAssignments": {
                      "type": "array",
                      "description": "The check this private location has assigned.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "c667b954-b207-43ac-a995-87aebff748ba",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "checkId": {
                            "type": "string",
                            "description": "The ID of the check.",
                            "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "privateLocationId": {
                            "type": "string",
                            "description": "The ID of the assigned private location.",
                            "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                            "x-format": {
                              "guid": true
                            }
                          }
                        },
                        "required": [
                          "id",
                          "checkId",
                          "privateLocationId"
                        ]
                      }
                    },
                    "groupAssignments": {
                      "type": "array",
                      "description": "The group this private location has assigned.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "groupId": {
                            "type": "number",
                            "description": "The ID of the group.",
                            "example": 10
                          },
                          "privateLocationId": {
                            "type": "string",
                            "description": "The ID of the assigned private location.",
                            "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                            "x-format": {
                              "guid": true
                            }
                          }
                        },
                        "required": [
                          "id",
                          "groupId",
                          "privateLocationId"
                        ]
                      }
                    },
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "rawKey": {
                            "type": "string",
                            "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                          },
                          "maskedKey": {
                            "type": "string",
                            "description": "The masked key value.",
                            "example": "...6a1e"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "id",
                          "rawKey",
                          "maskedKey",
                          "created_at"
                        ]
                      }
                    },
                    "lastSeen": {
                      "type": "string",
                      "format": "date"
                    },
                    "agentCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "slugName",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a private location",
        "operationId": "putV1PrivatelocationsId",
        "description": "Updates a private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name assigned to the private location.",
                    "example": "New Private Location"
                  },
                  "icon": {
                    "type": "string",
                    "example": "location"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "Private locations"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a02490af-537f-4234-80d3-4ce800d81d13",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "The name assigned to the private location.",
                      "example": "New Private Location"
                    },
                    "slugName": {
                      "type": "string",
                      "description": "Valid slug name.",
                      "example": "new-private-location"
                    },
                    "icon": {
                      "type": "string",
                      "description": "The private location icon.",
                      "example": "location"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "checkAssignments": {
                      "type": "array",
                      "description": "The check this private location has assigned.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "c667b954-b207-43ac-a995-87aebff748ba",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "checkId": {
                            "type": "string",
                            "description": "The ID of the check.",
                            "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "privateLocationId": {
                            "type": "string",
                            "description": "The ID of the assigned private location.",
                            "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                            "x-format": {
                              "guid": true
                            }
                          }
                        },
                        "required": [
                          "id",
                          "checkId",
                          "privateLocationId"
                        ]
                      }
                    },
                    "groupAssignments": {
                      "type": "array",
                      "description": "The group this private location has assigned.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "groupId": {
                            "type": "number",
                            "description": "The ID of the group.",
                            "example": 10
                          },
                          "privateLocationId": {
                            "type": "string",
                            "description": "The ID of the assigned private location.",
                            "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                            "x-format": {
                              "guid": true
                            }
                          }
                        },
                        "required": [
                          "id",
                          "groupId",
                          "privateLocationId"
                        ]
                      }
                    },
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                            "x-format": {
                              "guid": true
                            }
                          },
                          "rawKey": {
                            "type": "string",
                            "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                          },
                          "maskedKey": {
                            "type": "string",
                            "description": "The masked key value.",
                            "example": "...6a1e"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date"
                          }
                        },
                        "required": [
                          "id",
                          "rawKey",
                          "maskedKey",
                          "created_at"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "slugName",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}/keys": {
      "post": {
        "summary": "Generate a new API Key for a private location",
        "operationId": "postV1PrivatelocationsIdKeys",
        "description": "Creates an api key on the private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Private locations"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                      "x-format": {
                        "guid": true
                      }
                    },
                    "rawKey": {
                      "type": "string",
                      "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                    },
                    "maskedKey": {
                      "type": "string",
                      "description": "The masked key value.",
                      "example": "...6a1e"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    }
                  },
                  "required": [
                    "id",
                    "rawKey",
                    "maskedKey",
                    "created_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        402
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Payment Required"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment Required"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}/keys/{keyId}": {
      "delete": {
        "summary": "Remove an existing API key for a private location",
        "operationId": "deleteV1PrivatelocationsIdKeysKeyid",
        "description": "Permanently removes an api key from a private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Private locations"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}/metrics": {
      "get": {
        "summary": "Get private location health metrics from a window of time.",
        "operationId": "getV1PrivatelocationsIdMetrics",
        "description": "Get private location health metrics from a window of time.<br><br><b>Rate-limiting is applied to this endpoint, you can send 300 requests per day at most.<b>",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Select metrics beginning with this UNIX timestamp. Must be less than 15 days ago.",
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Select metrics up to this UNIX timestamp.",
            "name": "to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "tags": [
          "Private locations"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamps": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "queueSize": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "oldestScheduledCheckRun": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/reporting": {
      "get": {
        "summary": "Generates a report with aggregate statistics for checks and check groups.",
        "operationId": "getV1Reporting",
        "description": "Generates a report with aggregated statistics for all checks or a filtered set of checks over a specified time window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"quickRange\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"quickRange\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "quickRange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hrs",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hrs"
            }
          },
          {
            "description": "Use tags to filter the checks you want to see in your report.",
            "x-constraint": {
              "single": true
            },
            "name": "filterByTags",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filter checks by activated status.",
            "name": "deactivated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Reporting"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Check name.",
                        "example": "API Check"
                      },
                      "checkId": {
                        "type": "string",
                        "description": "Check ID.",
                        "example": "be866b8a-3d62-492b-a178-6909983aae66"
                      },
                      "checkType": {
                        "type": "string",
                        "description": "Check type.",
                        "example": "API"
                      },
                      "deactivated": {
                        "type": "boolean",
                        "description": "Check deactivated.",
                        "default": false
                      },
                      "tags": {
                        "type": "array",
                        "description": "Check tags.",
                        "example": [
                          "production"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "aggregate": {
                        "type": "object",
                        "properties": {
                          "successRatio": {
                            "type": "number",
                            "description": "Success ratio of the check over selected date range. Percentage is in decimal form.",
                            "example": 50,
                            "minimum": 0
                          },
                          "avg": {
                            "type": "number",
                            "description": "Average response time of the check over selected date range in milliseconds.",
                            "example": 100,
                            "minimum": 0
                          },
                          "p95": {
                            "type": "number",
                            "description": "P95 response time of the check over selected date range in milliseconds.",
                            "example": 200,
                            "minimum": 0
                          },
                          "p99": {
                            "type": "number",
                            "description": "P99 response time of the check over selected date range in milliseconds.",
                            "example": 100,
                            "minimum": 0
                          }
                        },
                        "required": [
                          "successRatio",
                          "avg",
                          "p95",
                          "p99"
                        ]
                      }
                    },
                    "required": [
                      "name",
                      "checkId",
                      "checkType",
                      "deactivated",
                      "tags"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/runtimes": {
      "get": {
        "summary": "Lists all supported runtimes",
        "operationId": "getV1Runtimes",
        "description": "Lists all supported runtimes and the included NPM packages for Browser checks and setup & teardown scripts for API checks.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Runtimes"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The unique name of this runtime.",
                        "example": "2023.09"
                      },
                      "multiStepSupport": {
                        "type": "boolean",
                        "description": "Does this runtime supports multi step checks"
                      },
                      "stage": {
                        "type": "string",
                        "description": "Current life stage of a runtime.",
                        "example": "STABLE",
                        "enum": [
                          "ALPHA",
                          "BETA",
                          "CURRENT",
                          "DEPRECATED",
                          "REMOVED",
                          "STABLE"
                        ]
                      },
                      "runtimeEndOfLife": {
                        "type": "string",
                        "description": "Date which a runtime will be removed from our platform.",
                        "example": "12/31/2022"
                      },
                      "description": {
                        "type": "string",
                        "description": "A short, human readable description of the main updates in this runtime.",
                        "example": "Main updates are Playwright 1.15.2 and Puppeteer 10.4.0"
                      },
                      "dependencies": {
                        "type": "object",
                        "description": "An object with all dependency package names and versions as in a standard package.json.",
                        "example": {
                          "playwright": "1.20.1",
                          "puppeteer": "13.5.1",
                          "aws4": "1.11.0",
                          "axios": "0.26.0",
                          "btoa": "1.2.1",
                          "chai": "4.3.4",
                          "chai-string": "1.5.0",
                          "crypto-js": "4.1.1",
                          "expect": "27.5.1",
                          "@faker-js/faker": "5.5.3",
                          "form-data": "4.0.0",
                          "jsonwebtoken": "8.5.1",
                          "lodash": "4.17.21",
                          "mocha": "9.2.3",
                          "moment": "2.29.1",
                          "node": "14.x",
                          "request": "2.88.2",
                          "request-promise": "4.2.2",
                          "uuid": "8.3.2",
                          "@opentelemetry/api": "^1.0.4",
                          "@opentelemetry/sdk-trace-base": "^1.0.1"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "multiStepSupport",
                      "dependencies"
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/runtimes/{id}": {
      "get": {
        "summary": "Shows details for one specific runtime",
        "operationId": "getV1RuntimesId",
        "description": "Shows the details of all included NPM packages and their version for one specific runtime",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Runtimes"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The unique name of this runtime.",
                      "example": "2023.09"
                    },
                    "multiStepSupport": {
                      "type": "boolean",
                      "description": "Does this runtime supports multi step checks"
                    },
                    "stage": {
                      "type": "string",
                      "description": "Current life stage of a runtime.",
                      "example": "STABLE",
                      "enum": [
                        "ALPHA",
                        "BETA",
                        "CURRENT",
                        "DEPRECATED",
                        "REMOVED",
                        "STABLE"
                      ]
                    },
                    "runtimeEndOfLife": {
                      "type": "string",
                      "description": "Date which a runtime will be removed from our platform.",
                      "example": "12/31/2022"
                    },
                    "description": {
                      "type": "string",
                      "description": "A short, human readable description of the main updates in this runtime.",
                      "example": "Main updates are Playwright 1.15.2 and Puppeteer 10.4.0"
                    },
                    "dependencies": {
                      "type": "object",
                      "description": "An object with all dependency package names and versions as in a standard package.json.",
                      "example": {
                        "playwright": "1.20.1",
                        "puppeteer": "13.5.1",
                        "aws4": "1.11.0",
                        "axios": "0.26.0",
                        "btoa": "1.2.1",
                        "chai": "4.3.4",
                        "chai-string": "1.5.0",
                        "crypto-js": "4.1.1",
                        "expect": "27.5.1",
                        "@faker-js/faker": "5.5.3",
                        "form-data": "4.0.0",
                        "jsonwebtoken": "8.5.1",
                        "lodash": "4.17.21",
                        "mocha": "9.2.3",
                        "moment": "2.29.1",
                        "node": "14.x",
                        "request": "2.88.2",
                        "request-promise": "4.2.2",
                        "uuid": "8.3.2",
                        "@opentelemetry/api": "^1.0.4",
                        "@opentelemetry/sdk-trace-base": "^1.0.1"
                      }
                    }
                  },
                  "required": [
                    "name",
                    "multiStepSupport",
                    "dependencies"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/v1/snippets": {
      "get": {
        "summary": "List all snippets",
        "operationId": "getV1Snippets",
        "description": "Lists all current snippets in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Snippets"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "description": "The snippet name.",
                        "example": "Snippet"
                      },
                      "script": {
                        "type": "string",
                        "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                        "example": "request.url = request.url + '/extra'"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a snippet",
        "operationId": "postV1Snippets",
        "description": "Creates a new snippet.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The snippet name.",
                    "example": "Snippet"
                  },
                  "script": {
                    "type": "string",
                    "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                    "example": "request.url = request.url + '/extra'"
                  }
                },
                "required": [
                  "name",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Snippets"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The snippet name.",
                      "example": "Snippet"
                    },
                    "script": {
                      "type": "string",
                      "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                      "example": "request.url = request.url + '/extra'"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/snippets/{id}": {
      "delete": {
        "summary": "Delete a snippet",
        "operationId": "deleteV1SnippetsId",
        "description": "Permanently removes a snippet.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Snippets"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a snippet",
        "operationId": "getV1SnippetsId",
        "description": "Show details of a specific snippet.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Snippets"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The snippet name.",
                      "example": "Snippet"
                    },
                    "script": {
                      "type": "string",
                      "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                      "example": "request.url = request.url + '/extra'"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a snippet",
        "operationId": "putV1SnippetsId",
        "description": "Updates a snippet.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The snippet name.",
                    "example": "Snippet"
                  },
                  "script": {
                    "type": "string",
                    "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                    "example": "request.url = request.url + '/extra'"
                  }
                },
                "required": [
                  "name",
                  "script"
                ]
              }
            }
          }
        },
        "tags": [
          "Snippets"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The snippet name.",
                      "example": "Snippet"
                    },
                    "script": {
                      "type": "string",
                      "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                      "example": "request.url = request.url + '/extra'"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/static-ips": {
      "get": {
        "summary": "Lists all source IPs for check runs",
        "operationId": "getV1Staticips",
        "description": "Lists all source IPs for check runs as a single JSON array.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Static IPs"
        ],
        "responses": {
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/static-ips-by-region": {
      "get": {
        "summary": "Lists all source IPs for check runs",
        "operationId": "getV1Staticipsbyregion",
        "description": "Lists all source IPs for check runs as object with regions as keys and an array of IPs as value.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Static IPs"
        ],
        "responses": {
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/static-ips.txt": {
      "get": {
        "summary": "Lists all source IPs for check runs as txt file",
        "operationId": "getV1Staticipstxt",
        "description": "Lists all IPs for check runs as a TXT file. Each line has one IP.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Static IPs"
        ],
        "responses": {
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/static-ipv6s": {
      "get": {
        "summary": "Lists all source IPv6s for check runs",
        "operationId": "getV1Staticipv6s",
        "description": "Lists all source IPv6s for check runs as a single JSON array.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Static IPs"
        ],
        "responses": {
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/static-ipv6s-by-region": {
      "get": {
        "summary": "Lists all source IPv6s for check runs",
        "operationId": "getV1Staticipv6sbyregion",
        "description": "Lists all source IPs for check runs as an object with regions as keys and an Ipv6 as value.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Static IPs"
        ],
        "responses": {
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/static-ipv6s.txt": {
      "get": {
        "summary": "Lists all source IPv6s for check runs as a txt file",
        "operationId": "getV1Staticipv6stxt",
        "description": "Lists all IPv6s for check runs as a TXT file. Each line has one IP.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Static IPs"
        ],
        "responses": {
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/triggers/check-groups/{groupId}": {
      "delete": {
        "summary": "Delete the check group trigger",
        "operationId": "deleteV1TriggersCheckgroupsGroupid",
        "description": "<b>[DEPRECATED]</b> This endpoint will be removed soon. Please use the <a href=\"https://www.checklyhq.com/docs/cli\">Checkly CLI</a> to test and trigger checks. Deletes the check groups trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Triggers"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "get": {
        "summary": "Get the check group trigger",
        "operationId": "getV1TriggersCheckgroupsGroupid",
        "description": "<b>[DEPRECATED]</b> This endpoint will be removed soon. Please use the <a href=\"https://www.checklyhq.com/docs/cli\">Checkly CLI</a> to test and trigger checks. Finds the check group trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Triggers"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "token": {
                      "type": "string",
                      "example": "h7QMmh8c0hYw"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "called_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "groupId": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "required": [
                    "id",
                    "token",
                    "created_at",
                    "groupId"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "summary": "Create the check group trigger",
        "operationId": "postV1TriggersCheckgroupsGroupid",
        "description": "<b>[DEPRECATED]</b> This endpoint will be removed soon. Please use the <a href=\"https://www.checklyhq.com/docs/cli\">Checkly CLI</a> to test and trigger checks. Creates the check group trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-constraint": {
              "sign": "positive"
            },
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "Triggers"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "token": {
                      "type": "string",
                      "example": "h7QMmh8c0hYw"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "called_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "groupId": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "required": [
                    "id",
                    "token",
                    "created_at",
                    "groupId"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/triggers/checks/{checkId}": {
      "delete": {
        "summary": "Delete the check trigger",
        "operationId": "deleteV1TriggersChecksCheckid",
        "description": "<b>[DEPRECATED]</b> This endpoint will be removed soon. Please use the <a href=\"https://www.checklyhq.com/docs/cli\">Checkly CLI</a> to test and trigger checks. Deletes the check trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Triggers"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "get": {
        "summary": "Get the check trigger",
        "operationId": "getV1TriggersChecksCheckid",
        "description": "<b>[DEPRECATED]</b> This endpoint will be removed soon. Please use the <a href=\"https://www.checklyhq.com/docs/cli\">Checkly CLI</a> to test and trigger checks. Finds the check trigger.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Triggers"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "token": {
                      "type": "string",
                      "example": "h7QMmh8c0hYw"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "called_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "checkId": {
                      "type": "string",
                      "example": "4f53e645-6fd7-4801-b9ff-570b3759e5d4"
                    }
                  },
                  "required": [
                    "id",
                    "token",
                    "created_at",
                    "checkId"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "summary": "Create the check trigger",
        "operationId": "postV1TriggersChecksCheckid",
        "description": "<b>[DEPRECATED]</b> This endpoint will be removed soon. Please use the <a href=\"https://www.checklyhq.com/docs/cli\">Checkly CLI</a> to test and trigger checks. Creates the check trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-format": {
              "guid": true
            },
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Triggers"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "token": {
                      "type": "string",
                      "example": "h7QMmh8c0hYw"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "called_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date"
                    },
                    "checkId": {
                      "type": "string",
                      "example": "4f53e645-6fd7-4801-b9ff-570b3759e5d4"
                    }
                  },
                  "required": [
                    "id",
                    "token",
                    "created_at",
                    "checkId"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/variables": {
      "get": {
        "summary": "List all environment variables",
        "operationId": "getV1Variables",
        "description": "Lists all current environment variables in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "x-constraint": {
              "sign": "positive"
            },
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            }
          }
        ],
        "tags": [
          "Environment variables"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 50,
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "The key of the environment variable (this value cannot be changed).",
                        "example": "API_KEY"
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the environment variable.",
                        "example": "bAxD7biGCZL6K60Q"
                      },
                      "locked": {
                        "type": "boolean",
                        "description": "Used only in the UI to hide the value like a password.",
                        "default": false
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a environment variable",
        "operationId": "postV1Variables",
        "description": "Creates a new environment variable.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key of the environment variable (this value cannot be changed).",
                    "example": "API_KEY"
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the environment variable.",
                    "example": "bAxD7biGCZL6K60Q"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Used only in the UI to hide the value like a password.",
                    "default": false
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            }
          }
        },
        "tags": [
          "Environment variables"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The key of the environment variable (this value cannot be changed).",
                      "example": "API_KEY"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the environment variable.",
                      "example": "bAxD7biGCZL6K60Q"
                    },
                    "locked": {
                      "type": "boolean",
                      "description": "Used only in the UI to hide the value like a password.",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/variables/{key}": {
      "delete": {
        "summary": "Delete an environment variable",
        "operationId": "deleteV1VariablesKey",
        "description": "Permanently removes an environment variable. Uses the \"key\" field as the ID for deletion.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Environment variables"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve an environment variable",
        "operationId": "getV1VariablesKey",
        "description": "Show details of a specific environment variable. Uses the \"key\" field for selection.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Environment variables"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The key of the environment variable (this value cannot be changed).",
                      "example": "API_KEY"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the environment variable.",
                      "example": "bAxD7biGCZL6K60Q"
                    },
                    "locked": {
                      "type": "boolean",
                      "description": "Used only in the UI to hide the value like a password.",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a environment variable",
        "operationId": "putV1VariablesKey",
        "description": "Updates an environment variable. Uses the \"key\" field as the ID for updating. Only updates value and locked property.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "x-format": {
              "guid": true
            },
            "name": "x-checkly-account",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key of the environment variable (this value cannot be changed).",
                    "example": "API_KEY"
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the environment variable.",
                    "example": "bAxD7biGCZL6K60Q"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Used only in the UI to hide the value like a password.",
                    "default": false
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "tags": [
          "Environment variables"
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The key of the environment variable (this value cannot be changed).",
                      "example": "API_KEY"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the environment variable.",
                      "example": "bAxD7biGCZL6K60Q"
                    },
                    "locked": {
                      "type": "boolean",
                      "description": "Used only in the UI to hide the value like a password.",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        401
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Unauthorized"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Token"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        403
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Forbidden"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        404
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Not Found"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "enum": [
                        429
                      ]
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "Too Many Requests"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Too Many Requests"
                    },
                    "attributes": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "statusCode",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.checklyhq.com"
    }
  ],
  "components": {
    "requestBodies": {
      "SnippetCreate": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The snippet name.",
                  "example": "Snippet"
                },
                "script": {
                  "type": "string",
                  "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
                  "example": "request.url = request.url + '/extra'"
                }
              },
              "required": [
                "name",
                "script"
              ]
            }
          }
        }
      },
      "AlertChannelCreate": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "subscriptions": {
                  "type": "array",
                  "description": "All checks subscribed to this channel.",
                  "example": [],
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 1
                      },
                      "checkId": {
                        "type": "string",
                        "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                        "x-format": {
                          "guid": true
                        }
                      },
                      "groupId": {
                        "type": "number",
                        "example": "null",
                        "x-constraint": {
                          "sign": "positive"
                        }
                      },
                      "activated": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "activated"
                    ]
                  }
                },
                "type": {
                  "type": "string",
                  "example": "SMS",
                  "enum": [
                    "EMAIL",
                    "SLACK",
                    "WEBHOOK",
                    "SMS",
                    "PAGERDUTY",
                    "OPSGENIE",
                    "CALL"
                  ]
                },
                "config": {
                  "type": "object"
                },
                "sendRecovery": {
                  "type": "boolean"
                },
                "sendFailure": {
                  "type": "boolean"
                },
                "sendDegraded": {
                  "type": "boolean"
                },
                "sslExpiry": {
                  "type": "boolean",
                  "description": "Determines if an alert should be send for expiring SSL certificates.",
                  "default": false
                },
                "sslExpiryThreshold": {
                  "type": "integer",
                  "description": "At what moment in time to start alerting on SSL certificates.",
                  "default": 30,
                  "minimum": 1,
                  "maximum": 30
                },
                "autoSubscribe": {
                  "type": "boolean",
                  "description": "Automatically subscribe newly created checks to this alert channel.",
                  "default": false
                }
              },
              "required": [
                "type",
                "config"
              ]
            }
          }
        }
      },
      "MaintenanceWindowCreate": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The maintenance window name.",
                  "example": "Maintenance Window"
                },
                "tags": {
                  "type": "array",
                  "description": "The names of the checks and groups maintenance window should apply to.",
                  "example": [
                    "production"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "startsAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The start date of the maintenance window.",
                  "example": "2022-08-24"
                },
                "endsAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The end date of the maintenance window.",
                  "example": "2022-08-25"
                },
                "repeatInterval": {
                  "type": "number",
                  "description": "The repeat interval of the maintenance window from the first occurance.",
                  "example": "null",
                  "default": null,
                  "minimum": 1
                },
                "repeatUnit": {
                  "type": "string",
                  "description": "The repeat strategy for the maintenance window.",
                  "example": "DAY"
                },
                "repeatEndsAt": {
                  "type": "string",
                  "format": "date",
                  "description": "The end date where the maintenance window should stop repeating.",
                  "example": "null"
                }
              },
              "required": [
                "name",
                "startsAt",
                "endsAt",
                "repeatUnit"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "The Checkly Public API uses API keys to authenticate requests. You can get the API Key <a href=\"https://app.checklyhq.com/settings/user/api-keys\" target=\"_blank\">here</a>.</br>Your API key is like a password: <br>keep it secure!</br></br>Authentication to the API is performed using the Bearer auth method in the Authorization header and using the account ID.</br></br>For example, set <b>Authorization</b> header while using cURL: <code>curl -H \"Authorization: Bearer [apiKey]\" \"X-Checkly-Account: [accountId]\"</code></br>"
      }
    },
    "schemas": {
      "settings": {
        "type": "object",
        "description": "The settings of the account."
      },
      "alertSettings": {
        "type": "object",
        "description": "The alert settings of the account."
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Checkly account ID.",
            "example": "d43967ee-81db-4e0b-a18c-06be5c995288",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the account.",
            "example": "Checkly"
          },
          "runtimeId": {
            "type": "string",
            "description": "The account default runtime ID.",
            "example": "2022.10"
          },
          "settings": {
            "type": "object",
            "description": "The settings of the account."
          },
          "alertSettings": {
            "type": "object",
            "description": "The alert settings of the account."
          }
        },
        "required": [
          "id"
        ]
      },
      "AccountList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Checkly account ID.",
              "example": "d43967ee-81db-4e0b-a18c-06be5c995288",
              "x-format": {
                "guid": true
              }
            },
            "name": {
              "type": "string",
              "description": "The name of the account.",
              "example": "Checkly"
            },
            "runtimeId": {
              "type": "string",
              "description": "The account default runtime ID.",
              "example": "2022.10"
            },
            "settings": {
              "type": "object",
              "description": "The settings of the account."
            },
            "alertSettings": {
              "type": "object",
              "description": "The alert settings of the account."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "error": {
        "type": "string",
        "enum": [
          "Unauthorized"
        ]
      },
      "attributes": {
        "type": "object"
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "error": {
            "type": "string",
            "enum": [
              "Unauthorized"
            ]
          },
          "message": {
            "type": "string",
            "example": "Bad Token"
          },
          "attributes": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "error"
        ]
      },
      "Model1": {
        "type": "string",
        "enum": [
          "Forbidden"
        ]
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "error": {
            "type": "string",
            "enum": [
              "Forbidden"
            ]
          },
          "message": {
            "type": "string",
            "example": "Forbidden"
          }
        },
        "required": [
          "statusCode",
          "error"
        ]
      },
      "Model2": {
        "type": "string",
        "enum": [
          "Too Many Requests"
        ]
      },
      "TooManyRequestsError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              429
            ]
          },
          "error": {
            "type": "string",
            "enum": [
              "Too Many Requests"
            ]
          },
          "message": {
            "type": "string",
            "example": "Too Many Requests"
          },
          "attributes": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "error"
        ]
      },
      "Model3": {
        "type": "string",
        "enum": [
          "Not Found"
        ]
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "error": {
            "type": "string",
            "enum": [
              "Not Found"
            ]
          },
          "message": {
            "type": "string",
            "example": "Not Found"
          }
        },
        "required": [
          "statusCode",
          "error"
        ]
      },
      "AlertChannelConfig": {
        "type": "object",
        "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
      },
      "AlertChanelSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "checkId": {
            "type": "string",
            "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
            "x-format": {
              "guid": true
            }
          },
          "groupId": {
            "type": "number",
            "example": "null",
            "x-constraint": {
              "sign": "positive"
            }
          },
          "activated": {
            "type": "boolean"
          }
        },
        "required": [
          "activated"
        ]
      },
      "AlertChanelSubscriptionList": {
        "type": "array",
        "description": "All checks subscribed to this channel.",
        "example": [],
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "checkId": {
              "type": "string",
              "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
              "x-format": {
                "guid": true
              }
            },
            "groupId": {
              "type": "number",
              "example": "null",
              "x-constraint": {
                "sign": "positive"
              }
            },
            "activated": {
              "type": "boolean"
            }
          },
          "required": [
            "activated"
          ]
        }
      },
      "AlertChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "x-constraint": {
              "sign": "positive"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of alert channel, i.e. EMAIL or SLACK.",
            "example": "SMS"
          },
          "config": {
            "type": "object",
            "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
          },
          "subscriptions": {
            "type": "array",
            "description": "All checks subscribed to this channel.",
            "example": [],
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "checkId": {
                  "type": "string",
                  "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                  "x-format": {
                    "guid": true
                  }
                },
                "groupId": {
                  "type": "number",
                  "example": "null",
                  "x-constraint": {
                    "sign": "positive"
                  }
                },
                "activated": {
                  "type": "boolean"
                }
              },
              "required": [
                "activated"
              ]
            }
          },
          "sendRecovery": {
            "type": "boolean"
          },
          "sendFailure": {
            "type": "boolean"
          },
          "sendDegraded": {
            "type": "boolean"
          },
          "sslExpiry": {
            "type": "boolean",
            "description": "Determines if an alert should be send for expiring SSL certificates.",
            "default": false
          },
          "sslExpiryThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates.",
            "default": 30,
            "minimum": 1,
            "maximum": 30
          },
          "autoSubscribe": {
            "type": "boolean",
            "description": "Automatically subscribe newly created checks to this alert channel.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AlertChannelList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1,
              "x-constraint": {
                "sign": "positive"
              }
            },
            "type": {
              "type": "string",
              "description": "The type of alert channel, i.e. EMAIL or SLACK.",
              "example": "SMS"
            },
            "config": {
              "type": "object",
              "description": "The configuration details for this alert channel. These can be very different based on the type of the channel."
            },
            "subscriptions": {
              "type": "array",
              "description": "All checks subscribed to this channel.",
              "example": [],
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "checkId": {
                    "type": "string",
                    "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "groupId": {
                    "type": "number",
                    "example": "null",
                    "x-constraint": {
                      "sign": "positive"
                    }
                  },
                  "activated": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "activated"
                ]
              }
            },
            "sendRecovery": {
              "type": "boolean"
            },
            "sendFailure": {
              "type": "boolean"
            },
            "sendDegraded": {
              "type": "boolean"
            },
            "sslExpiry": {
              "type": "boolean",
              "description": "Determines if an alert should be send for expiring SSL certificates.",
              "default": false
            },
            "sslExpiryThreshold": {
              "type": "integer",
              "description": "At what moment in time to start alerting on SSL certificates.",
              "default": 30,
              "minimum": 1,
              "maximum": 30
            },
            "autoSubscribe": {
              "type": "boolean",
              "description": "Automatically subscribe newly created checks to this alert channel.",
              "default": false
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "type": {
        "type": "string",
        "example": "SMS",
        "enum": [
          "EMAIL",
          "SLACK",
          "WEBHOOK",
          "SMS",
          "PAGERDUTY",
          "OPSGENIE",
          "CALL"
        ]
      },
      "AlertChannelCreateConfig": {
        "type": "object"
      },
      "AlertChannelCreate": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "type": "array",
            "description": "All checks subscribed to this channel.",
            "example": [],
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "checkId": {
                  "type": "string",
                  "example": "c59eddfb-0bf3-436f-b6fe-a50bf3762fbe",
                  "x-format": {
                    "guid": true
                  }
                },
                "groupId": {
                  "type": "number",
                  "example": "null",
                  "x-constraint": {
                    "sign": "positive"
                  }
                },
                "activated": {
                  "type": "boolean"
                }
              },
              "required": [
                "activated"
              ]
            }
          },
          "type": {
            "type": "string",
            "example": "SMS",
            "enum": [
              "EMAIL",
              "SLACK",
              "WEBHOOK",
              "SMS",
              "PAGERDUTY",
              "OPSGENIE",
              "CALL"
            ]
          },
          "config": {
            "type": "object"
          },
          "sendRecovery": {
            "type": "boolean"
          },
          "sendFailure": {
            "type": "boolean"
          },
          "sendDegraded": {
            "type": "boolean"
          },
          "sslExpiry": {
            "type": "boolean",
            "description": "Determines if an alert should be send for expiring SSL certificates.",
            "default": false
          },
          "sslExpiryThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates.",
            "default": 30,
            "minimum": 1,
            "maximum": 30
          },
          "autoSubscribe": {
            "type": "boolean",
            "description": "Automatically subscribe newly created checks to this alert channel.",
            "default": false
          }
        },
        "required": [
          "type",
          "config"
        ]
      },
      "Model4": {
        "type": "string",
        "enum": [
          "Payment Required"
        ]
      },
      "PaymentRequiredError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              402
            ]
          },
          "error": {
            "type": "string",
            "enum": [
              "Payment Required"
            ]
          },
          "message": {
            "type": "string",
            "example": "Payment Required"
          },
          "attributes": {
            "type": "object"
          }
        },
        "required": [
          "statusCode",
          "error"
        ]
      },
      "AlertChannelSubscriptionCreate": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string",
            "description": "You can either pass a checkId or a groupId, but not both.",
            "example": "a6e7b0e7-f45c-4164-8863-166287b60651",
            "x-format": {
              "guid": true
            }
          },
          "groupId": {
            "type": "number",
            "description": "You can either pass a checkId or a groupId, but not both.",
            "example": "null",
            "x-constraint": {
              "sign": "positive"
            }
          },
          "activated": {
            "type": "boolean"
          }
        },
        "required": [
          "activated"
        ]
      },
      "Model5": {
        "type": "string",
        "description": "The type of alert channel (SMS, Slack, Webhook, etc).",
        "enum": [
          "EMAIL",
          "SLACK",
          "WEBHOOK",
          "SMS",
          "PAGERDUTY",
          "OPSGENIE",
          "CALL"
        ]
      },
      "status": {
        "type": "string",
        "description": "The status of the alert.",
        "enum": [
          "IN_PROGRESS",
          "SUCCESS",
          "FAILURE"
        ]
      },
      "alertConfig": {
        "type": "object",
        "description": "The configuration which was used to send the alert."
      },
      "checkType": {
        "type": "string",
        "description": "The type of the check.",
        "enum": [
          "API",
          "BROWSER",
          "HEARTBEAT",
          "MULTI_STEP"
        ]
      },
      "AlertNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this alert notification."
          },
          "type": {
            "type": "string",
            "description": "The type of alert channel (SMS, Slack, Webhook, etc).",
            "enum": [
              "EMAIL",
              "SLACK",
              "WEBHOOK",
              "SMS",
              "PAGERDUTY",
              "OPSGENIE",
              "CALL"
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the alert.",
            "enum": [
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "alertConfig": {
            "type": "object",
            "description": "The configuration which was used to send the alert."
          },
          "notificationResult": {
            "type": "string",
            "description": "The result of sending the alert notification.For example, this could be the response body of the Webhook."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time that the alert was sent."
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "checkId": {
            "type": "string",
            "description": "The ID of the check."
          },
          "checkAlertId": {
            "type": "string",
            "description": "The ID of the check alert."
          },
          "alertChannelId": {
            "type": "number",
            "description": "The ID of the alert channel which this alert was sent to."
          },
          "checkResultId": {
            "type": "string",
            "description": "The ID of the corresponding check result."
          }
        }
      },
      "AlertNotificationList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of this alert notification."
            },
            "type": {
              "type": "string",
              "description": "The type of alert channel (SMS, Slack, Webhook, etc).",
              "enum": [
                "EMAIL",
                "SLACK",
                "WEBHOOK",
                "SMS",
                "PAGERDUTY",
                "OPSGENIE",
                "CALL"
              ]
            },
            "status": {
              "type": "string",
              "description": "The status of the alert.",
              "enum": [
                "IN_PROGRESS",
                "SUCCESS",
                "FAILURE"
              ]
            },
            "alertConfig": {
              "type": "object",
              "description": "The configuration which was used to send the alert."
            },
            "notificationResult": {
              "type": "string",
              "description": "The result of sending the alert notification.For example, this could be the response body of the Webhook."
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The time that the alert was sent."
            },
            "checkType": {
              "type": "string",
              "description": "The type of the check.",
              "enum": [
                "API",
                "BROWSER",
                "HEARTBEAT",
                "MULTI_STEP"
              ]
            },
            "checkId": {
              "type": "string",
              "description": "The ID of the check."
            },
            "checkAlertId": {
              "type": "string",
              "description": "The ID of the check alert."
            },
            "alertChannelId": {
              "type": "number",
              "description": "The ID of the alert channel which this alert was sent to."
            },
            "checkResultId": {
              "type": "string",
              "description": "The ID of the corresponding check result."
            }
          }
        }
      },
      "Model6": {
        "type": "string",
        "enum": [
          "API",
          "BROWSER",
          "HEARTBEAT",
          "MULTI_STEP"
        ]
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "series": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        }
      },
      "unit": {
        "type": "string",
        "enum": [
          "milliseconds",
          "score",
          "count",
          "percentage"
        ]
      },
      "aggregation": {
        "type": "string",
        "enum": [
          "avg",
          "max",
          "median",
          "min",
          "p50",
          "p90",
          "p95",
          "p99",
          "stddev",
          "sum"
        ]
      },
      "string": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "milliseconds",
              "score",
              "count",
              "percentage"
            ]
          },
          "label": {
            "type": "string"
          },
          "aggregation": {
            "type": "string",
            "enum": [
              "avg",
              "max",
              "median",
              "min",
              "p50",
              "p90",
              "p95",
              "p99",
              "stddev",
              "sum"
            ]
          }
        }
      },
      "Model7": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string"
          },
          "checkType": {
            "type": "string",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "activated": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "frequency": {
            "type": "number"
          },
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "series": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "string": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string",
                    "enum": [
                      "milliseconds",
                      "score",
                      "count",
                      "percentage"
                    ]
                  },
                  "label": {
                    "type": "string"
                  },
                  "aggregation": {
                    "type": "string",
                    "enum": [
                      "avg",
                      "max",
                      "median",
                      "min",
                      "p50",
                      "p90",
                      "p95",
                      "p99",
                      "stddev",
                      "sum"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Model8": {
        "type": "string",
        "enum": [
          "API",
          "BROWSER",
          "HEARTBEAT",
          "MULTI_STEP"
        ]
      },
      "Model9": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string"
          },
          "checkType": {
            "type": "string",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "activated": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "frequency": {
            "type": "number"
          },
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "series": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "string": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string",
                    "enum": [
                      "milliseconds",
                      "score",
                      "count",
                      "percentage"
                    ]
                  },
                  "label": {
                    "type": "string"
                  },
                  "aggregation": {
                    "type": "string",
                    "enum": [
                      "avg",
                      "max",
                      "median",
                      "min",
                      "p50",
                      "p90",
                      "p95",
                      "p99",
                      "stddev",
                      "sum"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Model10": {
        "type": "string",
        "enum": [
          "API",
          "BROWSER",
          "HEARTBEAT",
          "MULTI_STEP"
        ]
      },
      "Model11": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string"
          },
          "checkType": {
            "type": "string",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "activated": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "frequency": {
            "type": "number"
          },
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "series": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "string": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string",
                    "enum": [
                      "milliseconds",
                      "score",
                      "count",
                      "percentage"
                    ]
                  },
                  "label": {
                    "type": "string"
                  },
                  "aggregation": {
                    "type": "string",
                    "enum": [
                      "avg",
                      "max",
                      "median",
                      "min",
                      "p50",
                      "p90",
                      "p95",
                      "p99",
                      "stddev",
                      "sum"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Model12": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "Model13": {
        "type": "string",
        "enum": [
          "API",
          "BROWSER",
          "HEARTBEAT",
          "MULTI_STEP"
        ]
      },
      "Model14": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string"
          },
          "checkType": {
            "type": "string",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "activated": {
            "type": "boolean"
          },
          "muted": {
            "type": "boolean"
          },
          "frequency": {
            "type": "number"
          },
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "series": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "string": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string",
                    "enum": [
                      "milliseconds",
                      "score",
                      "count",
                      "percentage"
                    ]
                  },
                  "label": {
                    "type": "string"
                  },
                  "aggregation": {
                    "type": "string",
                    "enum": [
                      "avg",
                      "max",
                      "median",
                      "min",
                      "p50",
                      "p90",
                      "p95",
                      "p99",
                      "stddev",
                      "sum"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "alertType": {
        "type": "string",
        "description": "The type of alert.",
        "example": "ALERT_FAILURE",
        "enum": [
          "NO_ALERT",
          "ALERT_FAILURE",
          "ALERT_FAILURE_REMAIN",
          "ALERT_FAILURE_DEGRADED",
          "ALERT_RECOVERY",
          "ALERT_DEGRADED",
          "ALERT_DEGRADED_REMAIN",
          "ALERT_DEGRADED_FAILURE",
          "ALERT_DEGRADED_RECOVERY",
          "ALERT_SSL"
        ]
      },
      "Model15": {
        "type": "string",
        "description": "The type of the check.",
        "example": "API",
        "enum": [
          "API",
          "BROWSER",
          "HEARTBEAT",
          "MULTI_STEP"
        ]
      },
      "CheckAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this alert.",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "API Check"
          },
          "checkId": {
            "type": "string",
            "description": "The ID of check this alert belongs to.",
            "example": "ffd7eb24-2f8a-49fe-8bbc-0cf6a579375f"
          },
          "alertType": {
            "type": "string",
            "description": "The type of alert.",
            "example": "ALERT_FAILURE",
            "enum": [
              "NO_ALERT",
              "ALERT_FAILURE",
              "ALERT_FAILURE_REMAIN",
              "ALERT_FAILURE_DEGRADED",
              "ALERT_RECOVERY",
              "ALERT_DEGRADED",
              "ALERT_DEGRADED_REMAIN",
              "ALERT_DEGRADED_FAILURE",
              "ALERT_DEGRADED_RECOVERY",
              "ALERT_SSL"
            ]
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "example": "API",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "runLocation": {
            "type": "string",
            "description": "What data center location this check alert was triggered from.",
            "example": "us-east-1"
          },
          "responseTime": {
            "type": "number",
            "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.",
            "example": 10
          },
          "error": {
            "type": "string",
            "description": "Any specific error messages that were part of the failing check triggering the alert.",
            "example": "OK"
          },
          "statusCode": {
            "type": "string",
            "description": "The status code of the response. Only applies to API checks.",
            "example": "200"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The date and time this check alert was created."
          },
          "startedAt": {
            "type": "string",
            "format": "date",
            "description": "The date and time this check alert was started."
          }
        },
        "required": [
          "name"
        ]
      },
      "CheckAlertList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of this alert.",
              "example": "1"
            },
            "name": {
              "type": "string",
              "description": "The name of the check.",
              "example": "API Check"
            },
            "checkId": {
              "type": "string",
              "description": "The ID of check this alert belongs to.",
              "example": "ffd7eb24-2f8a-49fe-8bbc-0cf6a579375f"
            },
            "alertType": {
              "type": "string",
              "description": "The type of alert.",
              "example": "ALERT_FAILURE",
              "enum": [
                "NO_ALERT",
                "ALERT_FAILURE",
                "ALERT_FAILURE_REMAIN",
                "ALERT_FAILURE_DEGRADED",
                "ALERT_RECOVERY",
                "ALERT_DEGRADED",
                "ALERT_DEGRADED_REMAIN",
                "ALERT_DEGRADED_FAILURE",
                "ALERT_DEGRADED_RECOVERY",
                "ALERT_SSL"
              ]
            },
            "checkType": {
              "type": "string",
              "description": "The type of the check.",
              "example": "API",
              "enum": [
                "API",
                "BROWSER",
                "HEARTBEAT",
                "MULTI_STEP"
              ]
            },
            "runLocation": {
              "type": "string",
              "description": "What data center location this check alert was triggered from.",
              "example": "us-east-1"
            },
            "responseTime": {
              "type": "number",
              "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.",
              "example": 10
            },
            "error": {
              "type": "string",
              "description": "Any specific error messages that were part of the failing check triggering the alert.",
              "example": "OK"
            },
            "statusCode": {
              "type": "string",
              "description": "The status code of the response. Only applies to API checks.",
              "example": "200"
            },
            "created_at": {
              "type": "string",
              "format": "date",
              "description": "The date and time this check alert was created."
            },
            "startedAt": {
              "type": "string",
              "format": "date",
              "description": "The date and time this check alert was started."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "CheckGroupTagList": {
        "type": "array",
        "description": "Tags for organizing and filtering checks.",
        "example": [
          "production"
        ],
        "items": {
          "type": "string"
        }
      },
      "Model16": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "CheckGroupLocationList": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the checks.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "KeyValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "default": ""
          },
          "locked": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "HeaderList": {
        "type": "array",
        "example": [
          {
            "key": "Cache-Control",
            "value": "no-store"
          }
        ],
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "QueryParameterList": {
        "type": "array",
        "example": [
          {
            "key": "Page",
            "value": "1"
          }
        ],
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "AssertionSource": {
        "type": "string",
        "enum": [
          "STATUS_CODE",
          "JSON_BODY",
          "HEADERS",
          "TEXT_BODY",
          "RESPONSE_TIME"
        ]
      },
      "AssertionComparison": {
        "type": "string",
        "enum": [
          "EQUALS",
          "NOT_EQUALS",
          "HAS_KEY",
          "NOT_HAS_KEY",
          "HAS_VALUE",
          "NOT_HAS_VALUE",
          "IS_EMPTY",
          "NOT_EMPTY",
          "GREATER_THAN",
          "LESS_THAN",
          "CONTAINS",
          "NOT_CONTAINS",
          "IS_NULL",
          "NOT_NULL"
        ]
      },
      "Assertion": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "STATUS_CODE",
              "JSON_BODY",
              "HEADERS",
              "TEXT_BODY",
              "RESPONSE_TIME"
            ]
          },
          "property": {
            "type": "string",
            "default": ""
          },
          "comparison": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "HAS_KEY",
              "NOT_HAS_KEY",
              "HAS_VALUE",
              "NOT_HAS_VALUE",
              "IS_EMPTY",
              "NOT_EMPTY",
              "GREATER_THAN",
              "LESS_THAN",
              "CONTAINS",
              "NOT_CONTAINS",
              "IS_NULL",
              "NOT_NULL"
            ]
          },
          "target": {
            "type": "string",
            "default": ""
          },
          "regex": {
            "type": "string",
            "default": ""
          }
        }
      },
      "AssertionList": {
        "type": "array",
        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
        "example": [
          {
            "source": "STATUS_CODE",
            "comparision": "NOT_EMPTY",
            "target": "200"
          }
        ],
        "items": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "enum": [
                "STATUS_CODE",
                "JSON_BODY",
                "HEADERS",
                "TEXT_BODY",
                "RESPONSE_TIME"
              ]
            },
            "property": {
              "type": "string",
              "default": ""
            },
            "comparison": {
              "type": "string",
              "enum": [
                "EQUALS",
                "NOT_EQUALS",
                "HAS_KEY",
                "NOT_HAS_KEY",
                "HAS_VALUE",
                "NOT_HAS_VALUE",
                "IS_EMPTY",
                "NOT_EMPTY",
                "GREATER_THAN",
                "LESS_THAN",
                "CONTAINS",
                "NOT_CONTAINS",
                "IS_NULL",
                "NOT_NULL"
              ]
            },
            "target": {
              "type": "string",
              "default": ""
            },
            "regex": {
              "type": "string",
              "default": ""
            }
          }
        }
      },
      "BasicAuth": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin",
            "default": ""
          },
          "password": {
            "type": "string",
            "example": "abc12345",
            "default": ""
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "CheckGroupAPICheckDefaults": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
            "example": "https://api.example.com/v1",
            "default": ""
          },
          "headers": {
            "type": "array",
            "example": [
              {
                "key": "Cache-Control",
                "value": "no-store"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "queryParameters": {
            "type": "array",
            "example": [
              {
                "key": "Page",
                "value": "1"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "assertions": {
            "type": "array",
            "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
            "example": [
              {
                "source": "STATUS_CODE",
                "comparision": "NOT_EMPTY",
                "target": "200"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "STATUS_CODE",
                    "JSON_BODY",
                    "HEADERS",
                    "TEXT_BODY",
                    "RESPONSE_TIME"
                  ]
                },
                "property": {
                  "type": "string",
                  "default": ""
                },
                "comparison": {
                  "type": "string",
                  "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "HAS_KEY",
                    "NOT_HAS_KEY",
                    "HAS_VALUE",
                    "NOT_HAS_VALUE",
                    "IS_EMPTY",
                    "NOT_EMPTY",
                    "GREATER_THAN",
                    "LESS_THAN",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "IS_NULL",
                    "NOT_NULL"
                  ]
                },
                "target": {
                  "type": "string",
                  "default": ""
                },
                "regex": {
                  "type": "string",
                  "default": ""
                }
              }
            }
          },
          "basicAuth": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "admin",
                "default": ""
              },
              "password": {
                "type": "string",
                "example": "abc12345",
                "default": ""
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        }
      },
      "EnvironmentVariableGet": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the environment variable (this value cannot be changed).",
            "example": "API_KEY"
          },
          "value": {
            "type": "string",
            "description": "The value of the environment variable.",
            "example": "bAxD7biGCZL6K60Q"
          },
          "locked": {
            "type": "boolean",
            "description": "Used only in the UI to hide the value like a password.",
            "default": false
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "EnvironmentVariableList": {
        "type": "array",
        "maxItems": 50,
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the environment variable (this value cannot be changed).",
              "example": "API_KEY"
            },
            "value": {
              "type": "string",
              "description": "The value of the environment variable.",
              "example": "bAxD7biGCZL6K60Q"
            },
            "locked": {
              "type": "boolean",
              "description": "Used only in the UI to hide the value like a password.",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "escalationType": {
        "type": "string",
        "description": "Determines what type of escalation to use.",
        "default": "RUN_BASED",
        "enum": [
          "RUN_BASED",
          "TIME_BASED"
        ]
      },
      "AlertSettingsReminders": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "How many reminders to send out after the initial alert notification.",
            "default": 0,
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              100000
            ]
          },
          "interval": {
            "type": "number",
            "description": "At what interval the reminders should be send.",
            "default": 5,
            "enum": [
              5,
              10,
              15,
              30
            ]
          }
        }
      },
      "AlertSettingsSSLCertificates": {
        "type": "object",
        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines if alert notifications should be send for expiring SSL certificates."
          },
          "alertThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates."
          }
        }
      },
      "AlertSettingsRunBasedEscalation": {
        "type": "object",
        "properties": {
          "failedRunThreshold": {
            "type": "number",
            "description": "After how many failed consecutive check runs an alert notification should be send.",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          }
        }
      },
      "AlertSettingsTimeBasedEscalation": {
        "type": "object",
        "properties": {
          "minutesFailingThreshold": {
            "type": "number",
            "description": "After how many minutes after a check starts failing an alert should be send.",
            "enum": [
              5,
              10,
              15,
              30
            ]
          }
        }
      },
      "parallelRunFailureThreshold": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines if parallel run threshold is enabled",
            "default": false
          },
          "percentage": {
            "type": "number",
            "description": "The percentage of parallel runs that should fail before an alert is triggered",
            "default": 10,
            "enum": [
              10,
              20,
              30,
              40,
              50,
              60,
              70,
              80,
              90,
              100
            ]
          }
        }
      },
      "CheckGroupAlertSettings": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "enum": [
          {
            "value": {}
          }
        ],
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model17": {
        "type": "object",
        "description": "Alert channel subscription.",
        "properties": {
          "alertChannelId": {
            "type": "number"
          },
          "activated": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "alertChannelId",
          "activated"
        ]
      },
      "AlertChannelSubscriptionCreateList": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "runtimeId": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
        "example": "null",
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "privateLocations": {
        "type": "array",
        "description": "An array of one or more private locations where to run the check.",
        "example": [
          "data-center-eu"
        ],
        "items": {
          "type": "string"
        }
      },
      "Model18": {
        "type": "string",
        "description": "Determines which type of retry strategy to use.",
        "enum": [
          "FIXED",
          "LINEAR",
          "EXPONENTIAL"
        ]
      },
      "retryStrategy": {
        "type": "object",
        "description": "The strategy to determine how failed checks are retried.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Determines which type of retry strategy to use.",
            "enum": [
              "FIXED",
              "LINEAR",
              "EXPONENTIAL"
            ]
          },
          "baseBackoffSeconds": {
            "type": "number",
            "description": "The number of seconds to wait before the first retry attempt.",
            "default": 60
          },
          "maxRetries": {
            "type": "number",
            "description": "The maximum number of attempts to retry the check.",
            "default": 2,
            "minimum": 1,
            "maximum": 10
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "The total amount of time to continue retrying the check.",
            "default": 600,
            "minimum": 0,
            "maximum": 600
          },
          "sameRegion": {
            "type": "boolean",
            "description": "Whether retries should be run in the same region as the initial check run.",
            "default": true
          }
        },
        "required": [
          "type"
        ]
      },
      "CheckGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the check group.",
            "example": "Check group"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the checks in the  group are running or not."
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run the checks.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "concurrency": {
            "type": "number",
            "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
            "default": 3,
            "minimum": 1,
            "x-constraint": {
              "sign": "positive"
            }
          },
          "apiCheckDefaults": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                "example": "https://api.example.com/v1",
                "default": ""
              },
              "headers": {
                "type": "array",
                "example": [
                  {
                    "key": "Cache-Control",
                    "value": "no-store"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "queryParameters": {
                "type": "array",
                "example": [
                  {
                    "key": "Page",
                    "value": "1"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "assertions": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "comparision": "NOT_EMPTY",
                    "target": "200"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string",
                      "enum": [
                        "STATUS_CODE",
                        "JSON_BODY",
                        "HEADERS",
                        "TEXT_BODY",
                        "RESPONSE_TIME"
                      ]
                    },
                    "property": {
                      "type": "string",
                      "default": ""
                    },
                    "comparison": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "NOT_EQUALS",
                        "HAS_KEY",
                        "NOT_HAS_KEY",
                        "HAS_VALUE",
                        "NOT_HAS_VALUE",
                        "IS_EMPTY",
                        "NOT_EMPTY",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "CONTAINS",
                        "NOT_CONTAINS",
                        "IS_NULL",
                        "NOT_NULL"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "default": ""
                    },
                    "regex": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "basicAuth": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin",
                    "default": ""
                  },
                  "password": {
                    "type": "string",
                    "example": "abc12345",
                    "default": ""
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "browserCheckDefaults": {
            "type": "string"
          },
          "environmentVariables": {
            "type": "array",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "enum": [
              {
                "value": {}
              }
            ],
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
            "example": "null"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
            "example": "null"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
            "example": "null"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
            "example": "null"
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
            "example": "null",
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the checks in the group will run in parallel in all selected locations.",
            "default": false
          }
        },
        "required": [
          "name",
          "activated",
          "concurrency",
          "apiCheckDefaults"
        ]
      },
      "CheckGroupList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "name": {
              "type": "string",
              "description": "The name of the check group.",
              "example": "Check group"
            },
            "activated": {
              "type": "boolean",
              "description": "Determines if the checks in the  group are running or not."
            },
            "muted": {
              "type": "boolean",
              "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers."
            },
            "tags": {
              "type": "array",
              "description": "Tags for organizing and filtering checks.",
              "example": [
                "production"
              ],
              "items": {
                "type": "string"
              }
            },
            "locations": {
              "type": "array",
              "description": "An array of one or more data center locations where to run the checks.",
              "example": [
                "us-east-1",
                "eu-central-1"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "us-east-1",
                  "us-east-2",
                  "us-west-1",
                  "us-west-2",
                  "ca-central-1",
                  "sa-east-1",
                  "eu-west-1",
                  "eu-central-1",
                  "eu-west-2",
                  "eu-west-3",
                  "eu-north-1",
                  "eu-south-1",
                  "me-south-1",
                  "ap-southeast-1",
                  "ap-northeast-1",
                  "ap-east-1",
                  "ap-southeast-2",
                  "ap-southeast-3",
                  "ap-northeast-2",
                  "ap-northeast-3",
                  "ap-south-1",
                  "af-south-1"
                ]
              }
            },
            "concurrency": {
              "type": "number",
              "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
              "default": 3,
              "minimum": 1,
              "x-constraint": {
                "sign": "positive"
              }
            },
            "apiCheckDefaults": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                  "example": "https://api.example.com/v1",
                  "default": ""
                },
                "headers": {
                  "type": "array",
                  "example": [
                    {
                      "key": "Cache-Control",
                      "value": "no-store"
                    }
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      },
                      "locked": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ]
                  }
                },
                "queryParameters": {
                  "type": "array",
                  "example": [
                    {
                      "key": "Page",
                      "value": "1"
                    }
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      },
                      "locked": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ]
                  }
                },
                "assertions": {
                  "type": "array",
                  "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                  "example": [
                    {
                      "source": "STATUS_CODE",
                      "comparision": "NOT_EMPTY",
                      "target": "200"
                    }
                  ],
                  "items": {
                    "type": "object",
                    "properties": {
                      "source": {
                        "type": "string",
                        "enum": [
                          "STATUS_CODE",
                          "JSON_BODY",
                          "HEADERS",
                          "TEXT_BODY",
                          "RESPONSE_TIME"
                        ]
                      },
                      "property": {
                        "type": "string",
                        "default": ""
                      },
                      "comparison": {
                        "type": "string",
                        "enum": [
                          "EQUALS",
                          "NOT_EQUALS",
                          "HAS_KEY",
                          "NOT_HAS_KEY",
                          "HAS_VALUE",
                          "NOT_HAS_VALUE",
                          "IS_EMPTY",
                          "NOT_EMPTY",
                          "GREATER_THAN",
                          "LESS_THAN",
                          "CONTAINS",
                          "NOT_CONTAINS",
                          "IS_NULL",
                          "NOT_NULL"
                        ]
                      },
                      "target": {
                        "type": "string",
                        "default": ""
                      },
                      "regex": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                },
                "basicAuth": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "admin",
                      "default": ""
                    },
                    "password": {
                      "type": "string",
                      "example": "abc12345",
                      "default": ""
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                }
              }
            },
            "browserCheckDefaults": {
              "type": "string"
            },
            "environmentVariables": {
              "type": "array",
              "maxItems": 50,
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The key of the environment variable (this value cannot be changed).",
                    "example": "API_KEY"
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the environment variable.",
                    "example": "bAxD7biGCZL6K60Q"
                  },
                  "locked": {
                    "type": "boolean",
                    "description": "Used only in the UI to hide the value like a password.",
                    "default": false
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            },
            "doubleCheck": {
              "type": "boolean",
              "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead."
            },
            "useGlobalAlertSettings": {
              "type": "boolean",
              "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group."
            },
            "alertSettings": {
              "type": "object",
              "description": "Alert settings.",
              "default": {
                "escalationType": "RUN_BASED",
                "runBasedEscalation": {
                  "failedRunThreshold": 1
                },
                "reminders": {
                  "amount": 0,
                  "interval": 5
                },
                "parallelRunFailureThreshold": {
                  "enabled": false,
                  "percentage": 10
                }
              },
              "enum": [
                {
                  "value": {}
                }
              ],
              "properties": {
                "escalationType": {
                  "type": "string",
                  "description": "Determines what type of escalation to use.",
                  "default": "RUN_BASED",
                  "enum": [
                    "RUN_BASED",
                    "TIME_BASED"
                  ]
                },
                "reminders": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number",
                      "description": "How many reminders to send out after the initial alert notification.",
                      "default": 0,
                      "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        100000
                      ]
                    },
                    "interval": {
                      "type": "number",
                      "description": "At what interval the reminders should be send.",
                      "default": 5,
                      "enum": [
                        5,
                        10,
                        15,
                        30
                      ]
                    }
                  }
                },
                "sslCertificates": {
                  "type": "object",
                  "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Determines if alert notifications should be send for expiring SSL certificates."
                    },
                    "alertThreshold": {
                      "type": "integer",
                      "description": "At what moment in time to start alerting on SSL certificates."
                    }
                  }
                },
                "runBasedEscalation": {
                  "type": "object",
                  "properties": {
                    "failedRunThreshold": {
                      "type": "number",
                      "description": "After how many failed consecutive check runs an alert notification should be send.",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    }
                  }
                },
                "timeBasedEscalation": {
                  "type": "object",
                  "properties": {
                    "minutesFailingThreshold": {
                      "type": "number",
                      "description": "After how many minutes after a check starts failing an alert should be send.",
                      "enum": [
                        5,
                        10,
                        15,
                        30
                      ]
                    }
                  }
                },
                "parallelRunFailureThreshold": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Determines if parallel run threshold is enabled",
                      "default": false
                    },
                    "percentage": {
                      "type": "number",
                      "description": "The percentage of parallel runs that should fail before an alert is triggered",
                      "default": 10,
                      "enum": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                      ]
                    }
                  }
                }
              }
            },
            "alertChannelSubscriptions": {
              "type": "array",
              "description": "List of alert channel subscriptions.",
              "items": {
                "type": "object",
                "description": "Alert channel subscription.",
                "properties": {
                  "alertChannelId": {
                    "type": "number"
                  },
                  "activated": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "alertChannelId",
                  "activated"
                ]
              }
            },
            "setupSnippetId": {
              "type": "number",
              "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
              "example": "null"
            },
            "tearDownSnippetId": {
              "type": "number",
              "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
              "example": "null"
            },
            "localSetupScript": {
              "type": "string",
              "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
              "example": "null"
            },
            "localTearDownScript": {
              "type": "string",
              "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
              "example": "null"
            },
            "runtimeId": {
              "type": "string",
              "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
              "example": "null",
              "enum": [
                "2024.02",
                "2023.09",
                "2023.02",
                "2022.10",
                "2022.02"
              ]
            },
            "privateLocations": {
              "type": "array",
              "description": "An array of one or more private locations where to run the check.",
              "example": [
                "data-center-eu"
              ],
              "items": {
                "type": "string"
              }
            },
            "retryStrategy": {
              "type": "object",
              "description": "The strategy to determine how failed checks are retried.",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Determines which type of retry strategy to use.",
                  "enum": [
                    "FIXED",
                    "LINEAR",
                    "EXPONENTIAL"
                  ]
                },
                "baseBackoffSeconds": {
                  "type": "number",
                  "description": "The number of seconds to wait before the first retry attempt.",
                  "default": 60
                },
                "maxRetries": {
                  "type": "number",
                  "description": "The maximum number of attempts to retry the check.",
                  "default": 2,
                  "minimum": 1,
                  "maximum": 10
                },
                "maxDurationSeconds": {
                  "type": "number",
                  "description": "The total amount of time to continue retrying the check.",
                  "default": 600,
                  "minimum": 0,
                  "maximum": 600
                },
                "sameRegion": {
                  "type": "boolean",
                  "description": "Whether retries should be run in the same region as the initial check run.",
                  "default": true
                }
              },
              "required": [
                "type"
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "runParallel": {
              "type": "boolean",
              "description": "When true, the checks in the group will run in parallel in all selected locations.",
              "default": false
            }
          },
          "required": [
            "name",
            "activated",
            "concurrency",
            "apiCheckDefaults"
          ]
        }
      },
      "Model19": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model20": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the checks.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "CheckGroupCreateAPICheckDefaults": {
        "type": "object",
        "example": {
          "url": "https://api.example.com/v1",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "no-store"
            }
          ],
          "queryParameters": [
            {
              "key": "Page",
              "value": "1"
            }
          ],
          "assertions": [
            {
              "source": "STATUS_CODE",
              "comparision": "NOT_EMPTY",
              "target": "200"
            }
          ],
          "basicAuth": {
            "username": "admin",
            "password": "abc12345"
          }
        },
        "default": {},
        "properties": {
          "url": {
            "type": "string",
            "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
            "example": "https://api.example.com/v1",
            "default": ""
          },
          "headers": {
            "type": "array",
            "example": [
              {
                "key": "Cache-Control",
                "value": "no-store"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "queryParameters": {
            "type": "array",
            "example": [
              {
                "key": "Page",
                "value": "1"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "assertions": {
            "type": "array",
            "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
            "example": [
              {
                "source": "STATUS_CODE",
                "comparision": "NOT_EMPTY",
                "target": "200"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "STATUS_CODE",
                    "JSON_BODY",
                    "HEADERS",
                    "TEXT_BODY",
                    "RESPONSE_TIME"
                  ]
                },
                "property": {
                  "type": "string",
                  "default": ""
                },
                "comparison": {
                  "type": "string",
                  "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "HAS_KEY",
                    "NOT_HAS_KEY",
                    "HAS_VALUE",
                    "NOT_HAS_VALUE",
                    "IS_EMPTY",
                    "NOT_EMPTY",
                    "GREATER_THAN",
                    "LESS_THAN",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "IS_NULL",
                    "NOT_NULL"
                  ]
                },
                "target": {
                  "type": "string",
                  "default": ""
                },
                "regex": {
                  "type": "string",
                  "default": ""
                }
              }
            }
          },
          "basicAuth": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "admin",
                "default": ""
              },
              "password": {
                "type": "string",
                "example": "abc12345",
                "default": ""
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        }
      },
      "Model21": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "AlertSettings": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model22": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model23": {
        "type": "array",
        "description": "An array of one or more private locations where to run the checks.",
        "example": [
          "data-center-eu"
        ],
        "items": {
          "type": "string"
        }
      },
      "CheckGroupCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check group.",
            "example": "Check group"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the checks in the group are running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run the checks.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "concurrency": {
            "type": "number",
            "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
            "default": 3,
            "minimum": 1,
            "x-constraint": {
              "sign": "positive"
            }
          },
          "apiCheckDefaults": {
            "type": "object",
            "example": {
              "url": "https://api.example.com/v1",
              "headers": [
                {
                  "key": "Cache-Control",
                  "value": "no-store"
                }
              ],
              "queryParameters": [
                {
                  "key": "Page",
                  "value": "1"
                }
              ],
              "assertions": [
                {
                  "source": "STATUS_CODE",
                  "comparision": "NOT_EMPTY",
                  "target": "200"
                }
              ],
              "basicAuth": {
                "username": "admin",
                "password": "abc12345"
              }
            },
            "default": {},
            "properties": {
              "url": {
                "type": "string",
                "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                "example": "https://api.example.com/v1",
                "default": ""
              },
              "headers": {
                "type": "array",
                "example": [
                  {
                    "key": "Cache-Control",
                    "value": "no-store"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "queryParameters": {
                "type": "array",
                "example": [
                  {
                    "key": "Page",
                    "value": "1"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "assertions": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "comparision": "NOT_EMPTY",
                    "target": "200"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string",
                      "enum": [
                        "STATUS_CODE",
                        "JSON_BODY",
                        "HEADERS",
                        "TEXT_BODY",
                        "RESPONSE_TIME"
                      ]
                    },
                    "property": {
                      "type": "string",
                      "default": ""
                    },
                    "comparison": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "NOT_EQUALS",
                        "HAS_KEY",
                        "NOT_HAS_KEY",
                        "HAS_VALUE",
                        "NOT_HAS_VALUE",
                        "IS_EMPTY",
                        "NOT_EMPTY",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "CONTAINS",
                        "NOT_CONTAINS",
                        "IS_NULL",
                        "NOT_NULL"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "default": ""
                    },
                    "regex": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "basicAuth": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin",
                    "default": ""
                  },
                  "password": {
                    "type": "string",
                    "example": "abc12345",
                    "default": ""
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "browserCheckDefaults": {
            "type": "string"
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "environmentVariables": {
            "type": "array",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group.",
            "default": true
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the checks.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the checks in the group will run in parallel in all selected locations.",
            "default": false
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "CheckGroupCheck": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          }
        },
        "required": [
          "checkType"
        ]
      },
      "Model24": {
        "type": "string",
        "enum": [
          "Conflict"
        ]
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "error": {
            "type": "string",
            "enum": [
              "Conflict"
            ]
          },
          "message": {
            "type": "string",
            "example": "Conflict"
          }
        },
        "required": [
          "statusCode",
          "error"
        ]
      },
      "Model25": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model26": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the checks.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model27": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model28": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model29": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model30": {
        "type": "array",
        "description": "An array of one or more private locations where to run the checks.",
        "example": [
          "data-center-eu"
        ],
        "items": {
          "type": "string"
        }
      },
      "CheckGroupUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check group.",
            "example": "Check group"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the checks in the group are running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run the checks.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "concurrency": {
            "type": "number",
            "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
            "default": 3,
            "minimum": 1,
            "x-constraint": {
              "sign": "positive"
            }
          },
          "apiCheckDefaults": {
            "type": "object",
            "example": {
              "url": "https://api.example.com/v1",
              "headers": [
                {
                  "key": "Cache-Control",
                  "value": "no-store"
                }
              ],
              "queryParameters": [
                {
                  "key": "Page",
                  "value": "1"
                }
              ],
              "assertions": [
                {
                  "source": "STATUS_CODE",
                  "comparision": "NOT_EMPTY",
                  "target": "200"
                }
              ],
              "basicAuth": {
                "username": "admin",
                "password": "abc12345"
              }
            },
            "default": {},
            "properties": {
              "url": {
                "type": "string",
                "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
                "example": "https://api.example.com/v1",
                "default": ""
              },
              "headers": {
                "type": "array",
                "example": [
                  {
                    "key": "Cache-Control",
                    "value": "no-store"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "queryParameters": {
                "type": "array",
                "example": [
                  {
                    "key": "Page",
                    "value": "1"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "assertions": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "comparision": "NOT_EMPTY",
                    "target": "200"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string",
                      "enum": [
                        "STATUS_CODE",
                        "JSON_BODY",
                        "HEADERS",
                        "TEXT_BODY",
                        "RESPONSE_TIME"
                      ]
                    },
                    "property": {
                      "type": "string",
                      "default": ""
                    },
                    "comparison": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "NOT_EQUALS",
                        "HAS_KEY",
                        "NOT_HAS_KEY",
                        "HAS_VALUE",
                        "NOT_HAS_VALUE",
                        "IS_EMPTY",
                        "NOT_EMPTY",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "CONTAINS",
                        "NOT_CONTAINS",
                        "IS_NULL",
                        "NOT_NULL"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "default": ""
                    },
                    "regex": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "basicAuth": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin",
                    "default": ""
                  },
                  "password": {
                    "type": "string",
                    "example": "abc12345",
                    "default": ""
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "browserCheckDefaults": {
            "type": "string"
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute checks in this group.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "environmentVariables": {
            "type": "array",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group.",
            "default": true
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.",
            "example": "null",
            "default": null
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the checks.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the checks in the group will run in parallel in all selected locations.",
            "default": false
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          }
        }
      },
      "Model31": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "checkType": {
              "type": "string",
              "description": "The type of the check.",
              "enum": [
                "API",
                "BROWSER",
                "HEARTBEAT",
                "MULTI_STEP"
              ]
            }
          },
          "required": [
            "checkType"
          ]
        }
      },
      "assertions": {
        "type": "array",
        "description": "List of API check assertions.",
        "example": [
          {
            "source": "STATUS_CODE",
            "target": 200
          }
        ],
        "items": {
          "type": "string"
        }
      },
      "headers": {
        "type": "object"
      },
      "params": {
        "type": "object"
      },
      "request": {
        "type": "object",
        "description": "The request for the API.",
        "properties": {
          "method": {
            "type": "string",
            "example": "GET"
          },
          "url": {
            "type": "string",
            "example": "https://api.checklyhq.com"
          },
          "data": {
            "type": "string",
            "example": ""
          },
          "headers": {
            "type": "object"
          },
          "params": {
            "type": "object"
          }
        }
      },
      "timings": {
        "type": "object"
      },
      "timingPhases": {
        "type": "object"
      },
      "response": {
        "type": "object",
        "description": "The API response.",
        "properties": {
          "status": {
            "type": "number",
            "example": 200
          },
          "statusText": {
            "type": "string",
            "example": "OK"
          },
          "body": {
            "type": "string",
            "example": "<title> Checkly Public API </title>"
          },
          "headers": {
            "type": "object"
          },
          "timings": {
            "type": "object"
          },
          "timingPhases": {
            "type": "object"
          }
        }
      },
      "jobLog": {
        "type": "object",
        "description": "Check run log results."
      },
      "jobAssets": {
        "type": "array",
        "description": "Assets generated from the check run.",
        "example": "null",
        "items": {
          "type": "string"
        }
      },
      "CheckResultAPI": {
        "type": "object",
        "description": "The response data for an API check.",
        "properties": {
          "assertions": {
            "type": "array",
            "description": "List of API check assertions.",
            "example": [
              {
                "source": "STATUS_CODE",
                "target": 200
              }
            ],
            "items": {
              "type": "string"
            }
          },
          "request": {
            "type": "object",
            "description": "The request for the API.",
            "properties": {
              "method": {
                "type": "string",
                "example": "GET"
              },
              "url": {
                "type": "string",
                "example": "https://api.checklyhq.com"
              },
              "data": {
                "type": "string",
                "example": ""
              },
              "headers": {
                "type": "object"
              },
              "params": {
                "type": "object"
              }
            }
          },
          "response": {
            "type": "object",
            "description": "The API response.",
            "properties": {
              "status": {
                "type": "number",
                "example": 200
              },
              "statusText": {
                "type": "string",
                "example": "OK"
              },
              "body": {
                "type": "string",
                "example": "<title> Checkly Public API </title>"
              },
              "headers": {
                "type": "object"
              },
              "timings": {
                "type": "object"
              },
              "timingPhases": {
                "type": "object"
              }
            }
          },
          "requestError": {
            "type": "string",
            "description": "Describes if an error occurred on the request.",
            "example": "null"
          },
          "jobLog": {
            "type": "object",
            "description": "Check run log results."
          },
          "jobAssets": {
            "type": "array",
            "description": "Assets generated from the check run.",
            "example": "null",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "traceSummary": {
        "type": "object",
        "description": "The summary of errors in the check run."
      },
      "pages": {
        "type": "array",
        "description": "List of pages used on the check run.",
        "example": [
          {
            "url": "https://www.checklyhq.com/",
            "webVitals": {
              "CLS": {
                "score": "GOOD",
                "value": 0.000146484375
              }
            }
          }
        ],
        "items": {
          "type": "string"
        }
      },
      "playwrightTestVideos": {
        "type": "array",
        "description": "List of Playwright Test videos.",
        "example": [
          "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
        ],
        "items": {
          "type": "string"
        }
      },
      "errors": {
        "type": "array",
        "description": "List of errors on the check run.",
        "example": [],
        "items": {
          "type": "string"
        }
      },
      "Model32": {
        "type": "array",
        "description": "Check run log results.",
        "example": {
          "time": 1648573423995,
          "msg": "Starting job",
          "level": "DEBUG"
        },
        "items": {
          "type": "string"
        }
      },
      "playwrightTestTraces": {
        "type": "array",
        "description": "List of Playwright Test traces.",
        "example": [
          "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
        ],
        "items": {
          "type": "string"
        }
      },
      "CheckResultBrowser": {
        "type": "object",
        "description": "The response data for a browser check.",
        "example": "null",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of framework the check is using.",
            "example": "PLAYWRIGHT"
          },
          "traceSummary": {
            "type": "object",
            "description": "The summary of errors in the check run."
          },
          "pages": {
            "type": "array",
            "description": "List of pages used on the check run.",
            "example": [
              {
                "url": "https://www.checklyhq.com/",
                "webVitals": {
                  "CLS": {
                    "score": "GOOD",
                    "value": 0.000146484375
                  }
                }
              }
            ],
            "items": {
              "type": "string"
            }
          },
          "playwrightTestVideos": {
            "type": "array",
            "description": "List of Playwright Test videos.",
            "example": [
              "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
            ],
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors on the check run.",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "endTime": {
            "type": "number",
            "description": "End time of the check run.",
            "example": 1648573423995
          },
          "startTime": {
            "type": "number",
            "description": "Start time of the check run.",
            "example": 1648573423994
          },
          "runtimeVersion": {
            "type": "string",
            "description": "Active runtime version.",
            "example": "2023.09"
          },
          "jobLog": {
            "type": "array",
            "description": "Check run log results.",
            "example": {
              "time": 1648573423995,
              "msg": "Starting job",
              "level": "DEBUG"
            },
            "items": {
              "type": "string"
            }
          },
          "jobAssets": {
            "type": "array",
            "description": "Assets generated from the check run.",
            "example": "null",
            "items": {
              "type": "string"
            }
          },
          "playwrightTestTraces": {
            "type": "array",
            "description": "List of Playwright Test traces.",
            "example": [
              "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
            ],
            "items": {
              "type": "string"
            }
          },
          "playwrightTestJsonReportFile": {
            "type": "string",
            "description": "Playwright Test JSON report.",
            "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
          }
        }
      },
      "Model33": {
        "type": "array",
        "description": "Check run log results.",
        "example": {
          "time": 1648573423995,
          "msg": "Starting job",
          "level": "DEBUG"
        },
        "items": {
          "type": "string"
        }
      },
      "MultiStepResultBrowser": {
        "type": "object",
        "description": "The response data for a multi-step check.",
        "example": "null",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors on the check run.",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "endTime": {
            "type": "number",
            "description": "End time of the check run.",
            "example": 1648573423995
          },
          "startTime": {
            "type": "number",
            "description": "Start time of the check run.",
            "example": 1648573423994
          },
          "runtimeVersion": {
            "type": "string",
            "description": "Active runtime version.",
            "example": "2023.09"
          },
          "jobLog": {
            "type": "array",
            "description": "Check run log results.",
            "example": {
              "time": 1648573423995,
              "msg": "Starting job",
              "level": "DEBUG"
            },
            "items": {
              "type": "string"
            }
          },
          "jobAssets": {
            "type": "array",
            "description": "Assets generated from the check run.",
            "example": "null",
            "items": {
              "type": "string"
            }
          },
          "playwrightTestTraces": {
            "type": "array",
            "description": "List of Playwright Test traces.",
            "example": [
              "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
            ],
            "items": {
              "type": "string"
            }
          },
          "playwrightTestJsonReportFile": {
            "type": "string",
            "description": "Playwright Test JSON report.",
            "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
          }
        }
      },
      "resultType": {
        "type": "string",
        "description": "The type of result. FINAL means this is the final result of the check run. ATTEMPT means this is a result of a double check attempt.",
        "example": "FINAL",
        "default": "FINAL",
        "enum": [
          "FINAL",
          "ATTEMPT"
        ]
      },
      "CheckResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this result."
          },
          "name": {
            "type": "string",
            "description": "The name of the check."
          },
          "checkId": {
            "type": "string",
            "description": "The ID of the check."
          },
          "hasFailures": {
            "type": "boolean",
            "description": "Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true."
          },
          "hasErrors": {
            "type": "boolean",
            "description": "Describes if an internal error has occured in Checkly's backend. This should be false in almost all cases."
          },
          "isDegraded": {
            "type": "boolean",
            "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks."
          },
          "overMaxResponseTime": {
            "type": "boolean",
            "description": "Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks."
          },
          "runLocation": {
            "type": "string",
            "description": "What data center location this check result originated from."
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "stoppedAt": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "responseTime": {
            "type": "number",
            "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this."
          },
          "apiCheckResult": {
            "type": "object",
            "description": "The response data for an API check.",
            "properties": {
              "assertions": {
                "type": "array",
                "description": "List of API check assertions.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "target": 200
                  }
                ],
                "items": {
                  "type": "string"
                }
              },
              "request": {
                "type": "object",
                "description": "The request for the API.",
                "properties": {
                  "method": {
                    "type": "string",
                    "example": "GET"
                  },
                  "url": {
                    "type": "string",
                    "example": "https://api.checklyhq.com"
                  },
                  "data": {
                    "type": "string",
                    "example": ""
                  },
                  "headers": {
                    "type": "object"
                  },
                  "params": {
                    "type": "object"
                  }
                }
              },
              "response": {
                "type": "object",
                "description": "The API response.",
                "properties": {
                  "status": {
                    "type": "number",
                    "example": 200
                  },
                  "statusText": {
                    "type": "string",
                    "example": "OK"
                  },
                  "body": {
                    "type": "string",
                    "example": "<title> Checkly Public API </title>"
                  },
                  "headers": {
                    "type": "object"
                  },
                  "timings": {
                    "type": "object"
                  },
                  "timingPhases": {
                    "type": "object"
                  }
                }
              },
              "requestError": {
                "type": "string",
                "description": "Describes if an error occurred on the request.",
                "example": "null"
              },
              "jobLog": {
                "type": "object",
                "description": "Check run log results."
              },
              "jobAssets": {
                "type": "array",
                "description": "Assets generated from the check run.",
                "example": "null",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "browserCheckResult": {
            "type": "object",
            "description": "The response data for a browser check.",
            "example": "null",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of framework the check is using.",
                "example": "PLAYWRIGHT"
              },
              "traceSummary": {
                "type": "object",
                "description": "The summary of errors in the check run."
              },
              "pages": {
                "type": "array",
                "description": "List of pages used on the check run.",
                "example": [
                  {
                    "url": "https://www.checklyhq.com/",
                    "webVitals": {
                      "CLS": {
                        "score": "GOOD",
                        "value": 0.000146484375
                      }
                    }
                  }
                ],
                "items": {
                  "type": "string"
                }
              },
              "playwrightTestVideos": {
                "type": "array",
                "description": "List of Playwright Test videos.",
                "example": [
                  "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
                ],
                "items": {
                  "type": "string"
                }
              },
              "errors": {
                "type": "array",
                "description": "List of errors on the check run.",
                "example": [],
                "items": {
                  "type": "string"
                }
              },
              "endTime": {
                "type": "number",
                "description": "End time of the check run.",
                "example": 1648573423995
              },
              "startTime": {
                "type": "number",
                "description": "Start time of the check run.",
                "example": 1648573423994
              },
              "runtimeVersion": {
                "type": "string",
                "description": "Active runtime version.",
                "example": "2023.09"
              },
              "jobLog": {
                "type": "array",
                "description": "Check run log results.",
                "example": {
                  "time": 1648573423995,
                  "msg": "Starting job",
                  "level": "DEBUG"
                },
                "items": {
                  "type": "string"
                }
              },
              "jobAssets": {
                "type": "array",
                "description": "Assets generated from the check run.",
                "example": "null",
                "items": {
                  "type": "string"
                }
              },
              "playwrightTestTraces": {
                "type": "array",
                "description": "List of Playwright Test traces.",
                "example": [
                  "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                ],
                "items": {
                  "type": "string"
                }
              },
              "playwrightTestJsonReportFile": {
                "type": "string",
                "description": "Playwright Test JSON report.",
                "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
              }
            }
          },
          "multiStepCheckResult": {
            "type": "object",
            "description": "The response data for a multi-step check.",
            "example": "null",
            "properties": {
              "errors": {
                "type": "array",
                "description": "List of errors on the check run.",
                "example": [],
                "items": {
                  "type": "string"
                }
              },
              "endTime": {
                "type": "number",
                "description": "End time of the check run.",
                "example": 1648573423995
              },
              "startTime": {
                "type": "number",
                "description": "Start time of the check run.",
                "example": 1648573423994
              },
              "runtimeVersion": {
                "type": "string",
                "description": "Active runtime version.",
                "example": "2023.09"
              },
              "jobLog": {
                "type": "array",
                "description": "Check run log results.",
                "example": {
                  "time": 1648573423995,
                  "msg": "Starting job",
                  "level": "DEBUG"
                },
                "items": {
                  "type": "string"
                }
              },
              "jobAssets": {
                "type": "array",
                "description": "Assets generated from the check run.",
                "example": "null",
                "items": {
                  "type": "string"
                }
              },
              "playwrightTestTraces": {
                "type": "array",
                "description": "List of Playwright Test traces.",
                "example": [
                  "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                ],
                "items": {
                  "type": "string"
                }
              },
              "playwrightTestJsonReportFile": {
                "type": "string",
                "description": "Playwright Test JSON report.",
                "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
              }
            }
          },
          "checkRunId": {
            "type": "number",
            "description": "The id of the specific check run that created this check result."
          },
          "attempts": {
            "type": "number",
            "description": "How often this check was retried. This will be larger than 0 when double checking is enabled."
          },
          "resultType": {
            "type": "string",
            "description": "The type of result. FINAL means this is the final result of the check run. ATTEMPT means this is a result of a double check attempt.",
            "example": "FINAL",
            "default": "FINAL",
            "enum": [
              "FINAL",
              "ATTEMPT"
            ]
          },
          "sequenceId": {
            "type": "string",
            "description": "The sequence ID of the check run. This is used to group check runs with multiple attempts together.",
            "example": "2dbfa2a3-5477-45ea-ac33-ee55b8ea66ff",
            "x-format": {
              "guid": true
            }
          }
        },
        "required": [
          "resultType"
        ]
      },
      "CheckResultList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID of this result."
            },
            "name": {
              "type": "string",
              "description": "The name of the check."
            },
            "checkId": {
              "type": "string",
              "description": "The ID of the check."
            },
            "hasFailures": {
              "type": "boolean",
              "description": "Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true."
            },
            "hasErrors": {
              "type": "boolean",
              "description": "Describes if an internal error has occured in Checkly's backend. This should be false in almost all cases."
            },
            "isDegraded": {
              "type": "boolean",
              "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks."
            },
            "overMaxResponseTime": {
              "type": "boolean",
              "description": "Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks."
            },
            "runLocation": {
              "type": "string",
              "description": "What data center location this check result originated from."
            },
            "startedAt": {
              "type": "string",
              "format": "date-time"
            },
            "stoppedAt": {
              "type": "string",
              "format": "date-time"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "responseTime": {
              "type": "number",
              "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this."
            },
            "apiCheckResult": {
              "type": "object",
              "description": "The response data for an API check.",
              "properties": {
                "assertions": {
                  "type": "array",
                  "description": "List of API check assertions.",
                  "example": [
                    {
                      "source": "STATUS_CODE",
                      "target": 200
                    }
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "request": {
                  "type": "object",
                  "description": "The request for the API.",
                  "properties": {
                    "method": {
                      "type": "string",
                      "example": "GET"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://api.checklyhq.com"
                    },
                    "data": {
                      "type": "string",
                      "example": ""
                    },
                    "headers": {
                      "type": "object"
                    },
                    "params": {
                      "type": "object"
                    }
                  }
                },
                "response": {
                  "type": "object",
                  "description": "The API response.",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "statusText": {
                      "type": "string",
                      "example": "OK"
                    },
                    "body": {
                      "type": "string",
                      "example": "<title> Checkly Public API </title>"
                    },
                    "headers": {
                      "type": "object"
                    },
                    "timings": {
                      "type": "object"
                    },
                    "timingPhases": {
                      "type": "object"
                    }
                  }
                },
                "requestError": {
                  "type": "string",
                  "description": "Describes if an error occurred on the request.",
                  "example": "null"
                },
                "jobLog": {
                  "type": "object",
                  "description": "Check run log results."
                },
                "jobAssets": {
                  "type": "array",
                  "description": "Assets generated from the check run.",
                  "example": "null",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "browserCheckResult": {
              "type": "object",
              "description": "The response data for a browser check.",
              "example": "null",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of framework the check is using.",
                  "example": "PLAYWRIGHT"
                },
                "traceSummary": {
                  "type": "object",
                  "description": "The summary of errors in the check run."
                },
                "pages": {
                  "type": "array",
                  "description": "List of pages used on the check run.",
                  "example": [
                    {
                      "url": "https://www.checklyhq.com/",
                      "webVitals": {
                        "CLS": {
                          "score": "GOOD",
                          "value": 0.000146484375
                        }
                      }
                    }
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "playwrightTestVideos": {
                  "type": "array",
                  "description": "List of Playwright Test videos.",
                  "example": [
                    "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot-1675691043856.webm"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "errors": {
                  "type": "array",
                  "description": "List of errors on the check run.",
                  "example": [],
                  "items": {
                    "type": "string"
                  }
                },
                "endTime": {
                  "type": "number",
                  "description": "End time of the check run.",
                  "example": 1648573423995
                },
                "startTime": {
                  "type": "number",
                  "description": "Start time of the check run.",
                  "example": 1648573423994
                },
                "runtimeVersion": {
                  "type": "string",
                  "description": "Active runtime version.",
                  "example": "2023.09"
                },
                "jobLog": {
                  "type": "array",
                  "description": "Check run log results.",
                  "example": {
                    "time": 1648573423995,
                    "msg": "Starting job",
                    "level": "DEBUG"
                  },
                  "items": {
                    "type": "string"
                  }
                },
                "jobAssets": {
                  "type": "array",
                  "description": "Assets generated from the check run.",
                  "example": "null",
                  "items": {
                    "type": "string"
                  }
                },
                "playwrightTestTraces": {
                  "type": "array",
                  "description": "List of Playwright Test traces.",
                  "example": [
                    "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "playwrightTestJsonReportFile": {
                  "type": "string",
                  "description": "Playwright Test JSON report.",
                  "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                }
              }
            },
            "multiStepCheckResult": {
              "type": "object",
              "description": "The response data for a multi-step check.",
              "example": "null",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "List of errors on the check run.",
                  "example": [],
                  "items": {
                    "type": "string"
                  }
                },
                "endTime": {
                  "type": "number",
                  "description": "End time of the check run.",
                  "example": 1648573423995
                },
                "startTime": {
                  "type": "number",
                  "description": "Start time of the check run.",
                  "example": 1648573423994
                },
                "runtimeVersion": {
                  "type": "string",
                  "description": "Active runtime version.",
                  "example": "2023.09"
                },
                "jobLog": {
                  "type": "array",
                  "description": "Check run log results.",
                  "example": {
                    "time": 1648573423995,
                    "msg": "Starting job",
                    "level": "DEBUG"
                  },
                  "items": {
                    "type": "string"
                  }
                },
                "jobAssets": {
                  "type": "array",
                  "description": "Assets generated from the check run.",
                  "example": "null",
                  "items": {
                    "type": "string"
                  }
                },
                "playwrightTestTraces": {
                  "type": "array",
                  "description": "List of Playwright Test traces.",
                  "example": [
                    "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/visit-page-and-take-screenshot.zip"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "playwrightTestJsonReportFile": {
                  "type": "string",
                  "description": "Playwright Test JSON report.",
                  "example": "https://api.checklyhq.com/v1/assets/checkRunData/eu-central-1/00000000-0000-0000-0000-0000000000/00000000-0000-0000-0000-0000000000/1675691025832/report.json"
                }
              }
            },
            "checkRunId": {
              "type": "number",
              "description": "The id of the specific check run that created this check result."
            },
            "attempts": {
              "type": "number",
              "description": "How often this check was retried. This will be larger than 0 when double checking is enabled."
            },
            "resultType": {
              "type": "string",
              "description": "The type of result. FINAL means this is the final result of the check run. ATTEMPT means this is a result of a double check attempt.",
              "example": "FINAL",
              "default": "FINAL",
              "enum": [
                "FINAL",
                "ATTEMPT"
              ]
            },
            "sequenceId": {
              "type": "string",
              "description": "The sequence ID of the check run. This is used to group check runs with multiple attempts together.",
              "example": "2dbfa2a3-5477-45ea-ac33-ee55b8ea66ff",
              "x-format": {
                "guid": true
              }
            }
          },
          "required": [
            "resultType"
          ]
        }
      },
      "CheckStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "API Check"
          },
          "checkId": {
            "type": "string",
            "description": "The ID of check this status belongs to.",
            "example": "784b8a8c-5c9d-45ea-92ff-7f9ae9d8a0c1"
          },
          "hasFailures": {
            "type": "boolean",
            "description": "Describes if this check is currently failing. If any of the assertions for an API checkfail this value is true. If a browser check fails for whatever reason, this is true.",
            "example": false
          },
          "hasErrors": {
            "type": "boolean",
            "description": "Describes if due to some error outside of normal operation this check is failing. This should be extremely rare and only when there is an error in the Checkly backend.",
            "example": false
          },
          "isDegraded": {
            "type": "boolean",
            "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.",
            "example": true
          },
          "longestRun": {
            "type": "number",
            "description": "The longest ever recorded response time for this check.",
            "example": 10
          },
          "shortestRun": {
            "type": "number",
            "description": "The shortest ever recorded response time for this check.",
            "example": 5
          },
          "lastRunLocation": {
            "type": "string",
            "description": "What location this check was last run at.",
            "example": "us-east-1"
          },
          "lastCheckRunId": {
            "type": "string",
            "description": "The unique incrementing ID for each check run.",
            "example": "03ec5a65-2f95-4711-8ffe-29fb9bc28946"
          },
          "sslDaysRemaining": {
            "type": "number",
            "description": "How many days remain till the current SSL certificate expires.",
            "example": 3
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name"
        ]
      },
      "CheckStatusList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the check.",
              "example": "API Check"
            },
            "checkId": {
              "type": "string",
              "description": "The ID of check this status belongs to.",
              "example": "784b8a8c-5c9d-45ea-92ff-7f9ae9d8a0c1"
            },
            "hasFailures": {
              "type": "boolean",
              "description": "Describes if this check is currently failing. If any of the assertions for an API checkfail this value is true. If a browser check fails for whatever reason, this is true.",
              "example": false
            },
            "hasErrors": {
              "type": "boolean",
              "description": "Describes if due to some error outside of normal operation this check is failing. This should be extremely rare and only when there is an error in the Checkly backend.",
              "example": false
            },
            "isDegraded": {
              "type": "boolean",
              "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.",
              "example": true
            },
            "longestRun": {
              "type": "number",
              "description": "The longest ever recorded response time for this check.",
              "example": 10
            },
            "shortestRun": {
              "type": "number",
              "description": "The shortest ever recorded response time for this check.",
              "example": 5
            },
            "lastRunLocation": {
              "type": "string",
              "description": "What location this check was last run at.",
              "example": "us-east-1"
            },
            "lastCheckRunId": {
              "type": "string",
              "description": "The unique incrementing ID for each check run.",
              "example": "03ec5a65-2f95-4711-8ffe-29fb9bc28946"
            },
            "sslDaysRemaining": {
              "type": "number",
              "description": "How many days remain till the current SSL certificate expires.",
              "example": 3
            },
            "created_at": {
              "type": "string",
              "format": "date"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "Check": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          }
        },
        "required": [
          "checkType"
        ]
      },
      "CheckList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "checkType": {
              "type": "string",
              "description": "The type of the check.",
              "enum": [
                "API",
                "BROWSER",
                "HEARTBEAT",
                "MULTI_STEP"
              ]
            }
          },
          "required": [
            "checkType"
          ]
        }
      },
      "Model34": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "CheckLocationList": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "CheckTagList": {
        "type": "array",
        "description": "Tags for organizing and filtering checks.",
        "example": [
          "production"
        ],
        "items": {
          "type": "string"
        }
      },
      "CheckAlertSettings": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model35": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model36": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "CheckRequest": {
        "type": "object"
      },
      "heartbeat": {
        "type": "object"
      },
      "CheckEnvironmentVariableList": {
        "type": "array",
        "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
        "maxItems": 50,
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the environment variable (this value cannot be changed).",
              "example": "API_KEY"
            },
            "value": {
              "type": "string",
              "description": "The value of the environment variable.",
              "example": "bAxD7biGCZL6K60Q"
            },
            "locked": {
              "type": "boolean",
              "description": "Used only in the UI to hide the value like a password.",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model37": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "maxLength": 1000
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "content"
        ]
      },
      "dependencies": {
        "type": "array",
        "description": "An array of BCR dependency files.",
        "items": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "maxLength": 1000
            },
            "content": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "content"
          ]
        }
      },
      "CheckCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "request": {
            "type": "object"
          },
          "heartbeat": {
            "type": "object"
          },
          "script": {
            "type": "string"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "sslCheckDomain": {
            "type": "string"
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "default": null
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "An array of BCR dependency files.",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "maxLength": 1000
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "content"
              ]
            }
          }
        },
        "required": [
          "name",
          "checkType",
          "request",
          "heartbeat",
          "script"
        ]
      },
      "Model38": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model39": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model40": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model41": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "method": {
        "type": "string",
        "default": "GET",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "HEAD",
          "DELETE",
          "PATCH"
        ]
      },
      "bodyType": {
        "type": "string",
        "default": "NONE",
        "enum": [
          "JSON",
          "FORM",
          "RAW",
          "GRAPHQL",
          "NONE"
        ]
      },
      "Model42": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model43": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Request": {
        "type": "object",
        "description": "Determines the request that the check is going to run.",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "HEAD",
              "DELETE",
              "PATCH"
            ]
          },
          "url": {
            "type": "string",
            "default": "https://api.checklyhq.com",
            "maxLength": 2048
          },
          "followRedirects": {
            "type": "boolean"
          },
          "skipSSL": {
            "type": "boolean",
            "default": false
          },
          "body": {
            "type": "string",
            "default": ""
          },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": [
              "JSON",
              "FORM",
              "RAW",
              "GRAPHQL",
              "NONE"
            ]
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "queryParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "assertions": {
            "type": "array",
            "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
            "example": [
              {
                "source": "STATUS_CODE",
                "comparision": "NOT_EMPTY",
                "target": "200"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "STATUS_CODE",
                    "JSON_BODY",
                    "HEADERS",
                    "TEXT_BODY",
                    "RESPONSE_TIME"
                  ]
                },
                "property": {
                  "type": "string",
                  "default": ""
                },
                "comparison": {
                  "type": "string",
                  "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "HAS_KEY",
                    "NOT_HAS_KEY",
                    "HAS_VALUE",
                    "NOT_HAS_VALUE",
                    "IS_EMPTY",
                    "NOT_EMPTY",
                    "GREATER_THAN",
                    "LESS_THAN",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "IS_NULL",
                    "NOT_NULL"
                  ]
                },
                "target": {
                  "type": "string",
                  "default": ""
                },
                "regex": {
                  "type": "string",
                  "default": ""
                }
              }
            }
          },
          "basicAuth": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "admin",
                "default": ""
              },
              "password": {
                "type": "string",
                "example": "abc12345",
                "default": ""
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        },
        "required": [
          "method",
          "url"
        ]
      },
      "CheckAPICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "request": {
            "type": "object",
            "description": "Determines the request that the check is going to run.",
            "properties": {
              "method": {
                "type": "string",
                "default": "GET",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "HEAD",
                  "DELETE",
                  "PATCH"
                ]
              },
              "url": {
                "type": "string",
                "default": "https://api.checklyhq.com",
                "maxLength": 2048
              },
              "followRedirects": {
                "type": "boolean"
              },
              "skipSSL": {
                "type": "boolean",
                "default": false
              },
              "body": {
                "type": "string",
                "default": ""
              },
              "bodyType": {
                "type": "string",
                "default": "NONE",
                "enum": [
                  "JSON",
                  "FORM",
                  "RAW",
                  "GRAPHQL",
                  "NONE"
                ]
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "queryParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "assertions": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "comparision": "NOT_EMPTY",
                    "target": "200"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string",
                      "enum": [
                        "STATUS_CODE",
                        "JSON_BODY",
                        "HEADERS",
                        "TEXT_BODY",
                        "RESPONSE_TIME"
                      ]
                    },
                    "property": {
                      "type": "string",
                      "default": ""
                    },
                    "comparison": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "NOT_EQUALS",
                        "HAS_KEY",
                        "NOT_HAS_KEY",
                        "HAS_VALUE",
                        "NOT_HAS_VALUE",
                        "IS_EMPTY",
                        "NOT_EMPTY",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "CONTAINS",
                        "NOT_CONTAINS",
                        "IS_NULL",
                        "NOT_NULL"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "default": ""
                    },
                    "regex": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "basicAuth": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin",
                    "default": ""
                  },
                  "password": {
                    "type": "string",
                    "example": "abc12345",
                    "default": ""
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            },
            "required": [
              "method",
              "url"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              0,
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "example": "null",
            "default": null
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "example": "null",
            "default": null
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "example": "",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "example": "",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "request"
        ]
      },
      "Model44": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model45": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model46": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "CheckAlertChannelSubscription": {
        "type": "object",
        "properties": {
          "alertChannelId": {
            "type": "number"
          },
          "activated": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "alertChannelId",
          "activated"
        ]
      },
      "CheckAlertChannelSubscriptionList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model47": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model48": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model49": {
        "type": "object",
        "description": "Determines the request that the check is going to run.",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "HEAD",
              "DELETE",
              "PATCH"
            ]
          },
          "url": {
            "type": "string",
            "default": "https://api.checklyhq.com",
            "maxLength": 2048
          },
          "followRedirects": {
            "type": "boolean"
          },
          "skipSSL": {
            "type": "boolean",
            "default": false
          },
          "body": {
            "type": "string",
            "default": ""
          },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": [
              "JSON",
              "FORM",
              "RAW",
              "GRAPHQL",
              "NONE"
            ]
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "queryParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "assertions": {
            "type": "array",
            "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
            "example": [
              {
                "source": "STATUS_CODE",
                "comparision": "NOT_EMPTY",
                "target": "200"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "STATUS_CODE",
                    "JSON_BODY",
                    "HEADERS",
                    "TEXT_BODY",
                    "RESPONSE_TIME"
                  ]
                },
                "property": {
                  "type": "string",
                  "default": ""
                },
                "comparison": {
                  "type": "string",
                  "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "HAS_KEY",
                    "NOT_HAS_KEY",
                    "HAS_VALUE",
                    "NOT_HAS_VALUE",
                    "IS_EMPTY",
                    "NOT_EMPTY",
                    "GREATER_THAN",
                    "LESS_THAN",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "IS_NULL",
                    "NOT_NULL"
                  ]
                },
                "target": {
                  "type": "string",
                  "default": ""
                },
                "regex": {
                  "type": "string",
                  "default": ""
                }
              }
            }
          },
          "basicAuth": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "admin",
                "default": ""
              },
              "password": {
                "type": "string",
                "example": "abc12345",
                "default": ""
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        },
        "required": [
          "method",
          "url"
        ]
      },
      "Model50": {
        "type": "string",
        "enum": [
          "API"
        ]
      },
      "CheckAlertEmail": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "default": ""
          }
        },
        "required": [
          "address"
        ]
      },
      "CheckAlertEmailList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "default": ""
            }
          },
          "required": [
            "address"
          ]
        }
      },
      "Model51": {
        "type": "string",
        "default": "POST",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "HEAD",
          "DELETE",
          "PATCH"
        ]
      },
      "Model52": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model53": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "CheckAlertWebhook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "default": ""
          },
          "url": {
            "type": "string",
            "default": ""
          },
          "method": {
            "type": "string",
            "default": "POST",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "HEAD",
              "DELETE",
              "PATCH"
            ]
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "queryParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          }
        },
        "required": [
          "url"
        ]
      },
      "CheckAlertWebhookList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": ""
            },
            "url": {
              "type": "string",
              "default": ""
            },
            "method": {
              "type": "string",
              "default": "POST",
              "enum": [
                "GET",
                "POST",
                "PUT",
                "HEAD",
                "DELETE",
                "PATCH"
              ]
            },
            "headers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "default": ""
                  },
                  "locked": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            },
            "queryParameters": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "default": ""
                  },
                  "locked": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "CheckAlertSlack": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "default": ""
          }
        },
        "required": [
          "url"
        ]
      },
      "CheckAlertSlackList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "default": ""
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "CheckAlertSMS": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "example": "+549110000000",
            "default": ""
          },
          "name": {
            "type": "string",
            "example": "SMS Alert"
          }
        },
        "required": [
          "number",
          "name"
        ]
      },
      "CheckAlertSMSList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "number": {
              "type": "string",
              "example": "+549110000000",
              "default": ""
            },
            "name": {
              "type": "string",
              "example": "SMS Alert"
            }
          },
          "required": [
            "number",
            "name"
          ]
        }
      },
      "CheckAlertChannels": {
        "type": "object",
        "properties": {
          "email": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "default": ""
                }
              },
              "required": [
                "address"
              ]
            }
          },
          "webhook": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "default": ""
                },
                "url": {
                  "type": "string",
                  "default": ""
                },
                "method": {
                  "type": "string",
                  "default": "POST",
                  "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "HEAD",
                    "DELETE",
                    "PATCH"
                  ]
                },
                "headers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      },
                      "locked": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ]
                  }
                },
                "queryParameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string",
                        "default": ""
                      },
                      "locked": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "url"
              ]
            }
          },
          "slack": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "default": ""
                }
              },
              "required": [
                "url"
              ]
            }
          },
          "sms": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "number": {
                  "type": "string",
                  "example": "+549110000000",
                  "default": ""
                },
                "name": {
                  "type": "string",
                  "example": "SMS Alert"
                }
              },
              "required": [
                "number",
                "name"
              ]
            }
          }
        }
      },
      "CheckAPI": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "aa473993-22ac-42bf-b638-2b3f81fd8e98"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "request": {
            "type": "object",
            "description": "Determines the request that the check is going to run.",
            "properties": {
              "method": {
                "type": "string",
                "default": "GET",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "HEAD",
                  "DELETE",
                  "PATCH"
                ]
              },
              "url": {
                "type": "string",
                "default": "https://api.checklyhq.com",
                "maxLength": 2048
              },
              "followRedirects": {
                "type": "boolean"
              },
              "skipSSL": {
                "type": "boolean",
                "default": false
              },
              "body": {
                "type": "string",
                "default": ""
              },
              "bodyType": {
                "type": "string",
                "default": "NONE",
                "enum": [
                  "JSON",
                  "FORM",
                  "RAW",
                  "GRAPHQL",
                  "NONE"
                ]
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "queryParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "assertions": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "comparision": "NOT_EMPTY",
                    "target": "200"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string",
                      "enum": [
                        "STATUS_CODE",
                        "JSON_BODY",
                        "HEADERS",
                        "TEXT_BODY",
                        "RESPONSE_TIME"
                      ]
                    },
                    "property": {
                      "type": "string",
                      "default": ""
                    },
                    "comparison": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "NOT_EQUALS",
                        "HAS_KEY",
                        "NOT_HAS_KEY",
                        "HAS_VALUE",
                        "NOT_HAS_VALUE",
                        "IS_EMPTY",
                        "NOT_EMPTY",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "CONTAINS",
                        "NOT_CONTAINS",
                        "IS_NULL",
                        "NOT_NULL"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "default": ""
                    },
                    "regex": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "basicAuth": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin",
                    "default": ""
                  },
                  "password": {
                    "type": "string",
                    "example": "abc12345",
                    "default": ""
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            },
            "required": [
              "method",
              "url"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              0,
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "default": null
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "example": "",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "example": "",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "checkType": {
            "type": "string",
            "enum": [
              "API"
            ]
          },
          "alertChannels": {
            "type": "object",
            "properties": {
              "email": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "address"
                  ]
                }
              },
              "webhook": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "url": {
                      "type": "string",
                      "default": ""
                    },
                    "method": {
                      "type": "string",
                      "default": "POST",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "HEAD",
                        "DELETE",
                        "PATCH"
                      ]
                    },
                    "headers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "queryParameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "slack": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "sms": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "example": "+549110000000",
                      "default": ""
                    },
                    "name": {
                      "type": "string",
                      "example": "SMS Alert"
                    }
                  },
                  "required": [
                    "number",
                    "name"
                  ]
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name"
        ]
      },
      "Model54": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model55": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model56": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model57": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model58": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model59": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model60": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string",
              "default": ""
            },
            "locked": {
              "type": "boolean",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "Model61": {
        "type": "object",
        "description": "Determines the request that the check is going to run.",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "HEAD",
              "DELETE",
              "PATCH"
            ]
          },
          "url": {
            "type": "string",
            "default": "https://api.checklyhq.com",
            "maxLength": 2048
          },
          "followRedirects": {
            "type": "boolean"
          },
          "skipSSL": {
            "type": "boolean",
            "default": false
          },
          "body": {
            "type": "string",
            "default": ""
          },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": [
              "JSON",
              "FORM",
              "RAW",
              "GRAPHQL",
              "NONE"
            ]
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "queryParameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "default": ""
                },
                "locked": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "assertions": {
            "type": "array",
            "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
            "example": [
              {
                "source": "STATUS_CODE",
                "comparision": "NOT_EMPTY",
                "target": "200"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "STATUS_CODE",
                    "JSON_BODY",
                    "HEADERS",
                    "TEXT_BODY",
                    "RESPONSE_TIME"
                  ]
                },
                "property": {
                  "type": "string",
                  "default": ""
                },
                "comparison": {
                  "type": "string",
                  "enum": [
                    "EQUALS",
                    "NOT_EQUALS",
                    "HAS_KEY",
                    "NOT_HAS_KEY",
                    "HAS_VALUE",
                    "NOT_HAS_VALUE",
                    "IS_EMPTY",
                    "NOT_EMPTY",
                    "GREATER_THAN",
                    "LESS_THAN",
                    "CONTAINS",
                    "NOT_CONTAINS",
                    "IS_NULL",
                    "NOT_NULL"
                  ]
                },
                "target": {
                  "type": "string",
                  "default": ""
                },
                "regex": {
                  "type": "string",
                  "default": ""
                }
              }
            }
          },
          "basicAuth": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "admin",
                "default": ""
              },
              "password": {
                "type": "string",
                "example": "abc12345",
                "default": ""
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        },
        "required": [
          "method",
          "url"
        ]
      },
      "CheckAPIUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "request": {
            "type": "object",
            "description": "Determines the request that the check is going to run.",
            "properties": {
              "method": {
                "type": "string",
                "default": "GET",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "HEAD",
                  "DELETE",
                  "PATCH"
                ]
              },
              "url": {
                "type": "string",
                "default": "https://api.checklyhq.com",
                "maxLength": 2048
              },
              "followRedirects": {
                "type": "boolean"
              },
              "skipSSL": {
                "type": "boolean",
                "default": false
              },
              "body": {
                "type": "string",
                "default": ""
              },
              "bodyType": {
                "type": "string",
                "default": "NONE",
                "enum": [
                  "JSON",
                  "FORM",
                  "RAW",
                  "GRAPHQL",
                  "NONE"
                ]
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "queryParameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "default": ""
                    },
                    "locked": {
                      "type": "boolean",
                      "default": false
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "assertions": {
                "type": "array",
                "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
                "example": [
                  {
                    "source": "STATUS_CODE",
                    "comparision": "NOT_EMPTY",
                    "target": "200"
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string",
                      "enum": [
                        "STATUS_CODE",
                        "JSON_BODY",
                        "HEADERS",
                        "TEXT_BODY",
                        "RESPONSE_TIME"
                      ]
                    },
                    "property": {
                      "type": "string",
                      "default": ""
                    },
                    "comparison": {
                      "type": "string",
                      "enum": [
                        "EQUALS",
                        "NOT_EQUALS",
                        "HAS_KEY",
                        "NOT_HAS_KEY",
                        "HAS_VALUE",
                        "NOT_HAS_VALUE",
                        "IS_EMPTY",
                        "NOT_EMPTY",
                        "GREATER_THAN",
                        "LESS_THAN",
                        "CONTAINS",
                        "NOT_CONTAINS",
                        "IS_NULL",
                        "NOT_NULL"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "default": ""
                    },
                    "regex": {
                      "type": "string",
                      "default": ""
                    }
                  }
                }
              },
              "basicAuth": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin",
                    "default": ""
                  },
                  "password": {
                    "type": "string",
                    "example": "abc12345",
                    "default": ""
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            },
            "required": [
              "method",
              "url"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              0,
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "example": "null",
            "default": null
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "example": "null",
            "default": null
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "example": "",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "example": "",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Model62": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model63": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model64": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model65": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "EnvironmentVariable": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the environment variable (this value cannot be changed).",
            "example": "API_KEY"
          },
          "value": {
            "type": "string",
            "description": "The value of the environment variable.",
            "example": "bAxD7biGCZL6K60Q"
          },
          "locked": {
            "type": "boolean",
            "description": "Used only in the UI to hide the value like a password.",
            "default": false
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "environmentVariables": {
        "type": "array",
        "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
        "example": [],
        "maxItems": 50,
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the environment variable (this value cannot be changed).",
              "example": "API_KEY"
            },
            "value": {
              "type": "string",
              "description": "The value of the environment variable.",
              "example": "bAxD7biGCZL6K60Q"
            },
            "locked": {
              "type": "boolean",
              "description": "Used only in the UI to hide the value like a password.",
              "default": false
            }
          },
          "required": [
            "key",
            "value"
          ]
        }
      },
      "CheckBrowserCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
            "example": [],
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "An array of BCR dependency files.",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "maxLength": 1000
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "content"
              ]
            }
          },
          "sslCheckDomain": {
            "type": "string",
            "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
            "example": "www.acme.com"
          }
        },
        "required": [
          "name",
          "script"
        ]
      },
      "Model66": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model67": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model68": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model69": {
        "type": "string",
        "enum": [
          "BROWSER"
        ]
      },
      "CheckBrowser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "68afd914-5252-4057-adb2-eecf0d6dc98c"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "enum": [
              "BROWSER"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks."
          },
          "sslCheckDomain": {
            "type": "string",
            "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
            "example": "www.acme.com"
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertChannels": {
            "type": "object",
            "properties": {
              "email": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "address"
                  ]
                }
              },
              "webhook": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "url": {
                      "type": "string",
                      "default": ""
                    },
                    "method": {
                      "type": "string",
                      "default": "POST",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "HEAD",
                        "DELETE",
                        "PATCH"
                      ]
                    },
                    "headers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "queryParameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "slack": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "sms": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "example": "+549110000000",
                      "default": ""
                    },
                    "name": {
                      "type": "string",
                      "example": "SMS Alert"
                    }
                  },
                  "required": [
                    "number",
                    "name"
                  ]
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "script"
        ]
      },
      "Model70": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model71": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model72": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model73": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model74": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "CheckBrowserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
            "example": [],
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "An array of BCR dependency files.",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "maxLength": 1000
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "content"
              ]
            }
          },
          "sslCheckDomain": {
            "type": "string",
            "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.",
            "example": "www.acme.com"
          }
        }
      },
      "Model75": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model76": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model77": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model78": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "periodUnit": {
        "type": "string",
        "enum": [
          "seconds",
          "minutes",
          "hours",
          "days"
        ]
      },
      "graceUnit": {
        "type": "string",
        "enum": [
          "seconds",
          "minutes",
          "hours",
          "days"
        ]
      },
      "Model79": {
        "type": "object",
        "properties": {
          "period": {
            "type": "number",
            "description": "Interval expected between pings."
          },
          "periodUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "grace": {
            "type": "number",
            "description": "Grace added to the period."
          },
          "graceUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "pingToken": {
            "type": "string",
            "description": "UUID token used to build a unique ping URL.",
            "x-format": {
              "guid": true
            }
          }
        },
        "required": [
          "period",
          "periodUnit",
          "grace",
          "graceUnit"
        ]
      },
      "CheckHeartbeatCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "frequencyOffset": {
            "type": "integer",
            "minimum": 1
          },
          "request": {
            "type": "object"
          },
          "heartbeat": {
            "type": "object",
            "properties": {
              "period": {
                "type": "number",
                "description": "Interval expected between pings."
              },
              "periodUnit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ]
              },
              "grace": {
                "type": "number",
                "description": "Grace added to the period."
              },
              "graceUnit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ]
              },
              "pingToken": {
                "type": "string",
                "description": "UUID token used to build a unique ping URL.",
                "x-format": {
                  "guid": true
                }
              }
            },
            "required": [
              "period",
              "periodUnit",
              "grace",
              "graceUnit"
            ]
          },
          "script": {
            "type": "string"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "sslCheckDomain": {
            "type": "string"
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "default": null
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          }
        },
        "required": [
          "name",
          "request",
          "heartbeat",
          "script"
        ]
      },
      "Model80": {
        "type": "string",
        "enum": [
          "HEARTBEAT"
        ]
      },
      "Model81": {
        "type": "object",
        "properties": {
          "period": {
            "type": "number",
            "description": "Interval expected between pings."
          },
          "periodUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "grace": {
            "type": "number",
            "description": "Grace added to the period."
          },
          "graceUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "pingToken": {
            "type": "string",
            "description": "UUID token used to build a unique ping URL.",
            "x-format": {
              "guid": true
            }
          },
          "pingUrl": {
            "type": "string",
            "example": "https://ping.checklyhq.com/22868839-8450-4010-9241-1ea83a2e425f"
          }
        },
        "required": [
          "period",
          "periodUnit",
          "grace",
          "graceUnit"
        ]
      },
      "CheckHeartbeat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a5dc9247-c448-4b22-9fdf-ebc53c0e2248"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "enum": [
              "HEARTBEAT"
            ]
          },
          "heartbeat": {
            "type": "object",
            "properties": {
              "period": {
                "type": "number",
                "description": "Interval expected between pings."
              },
              "periodUnit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ]
              },
              "grace": {
                "type": "number",
                "description": "Grace added to the period."
              },
              "graceUnit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ]
              },
              "pingToken": {
                "type": "string",
                "description": "UUID token used to build a unique ping URL.",
                "x-format": {
                  "guid": true
                }
              },
              "pingUrl": {
                "type": "string",
                "example": "https://ping.checklyhq.com/22868839-8450-4010-9241-1ea83a2e425f"
              }
            },
            "required": [
              "period",
              "periodUnit",
              "grace",
              "graceUnit"
            ]
          },
          "alertChannels": {
            "type": "object",
            "properties": {
              "email": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "address"
                  ]
                }
              },
              "webhook": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "url": {
                      "type": "string",
                      "default": ""
                    },
                    "method": {
                      "type": "string",
                      "default": "POST",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "HEAD",
                        "DELETE",
                        "PATCH"
                      ]
                    },
                    "headers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "queryParameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "slack": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "sms": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "example": "+549110000000",
                      "default": ""
                    },
                    "name": {
                      "type": "string",
                      "example": "SMS Alert"
                    }
                  },
                  "required": [
                    "number",
                    "name"
                  ]
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name"
        ]
      },
      "Model82": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model83": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model84": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model85": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model86": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model87": {
        "type": "object",
        "properties": {
          "period": {
            "type": "number",
            "description": "Interval expected between pings."
          },
          "periodUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "grace": {
            "type": "number",
            "description": "Grace added to the period."
          },
          "graceUnit": {
            "type": "string",
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days"
            ]
          },
          "pingToken": {
            "type": "string",
            "description": "UUID token used to build a unique ping URL.",
            "x-format": {
              "guid": true
            }
          }
        },
        "required": [
          "period",
          "periodUnit",
          "grace",
          "graceUnit"
        ]
      },
      "CheckHeartbeatUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "frequencyOffset": {
            "type": "integer",
            "minimum": 1
          },
          "request": {
            "type": "object"
          },
          "heartbeat": {
            "type": "object",
            "properties": {
              "period": {
                "type": "number",
                "description": "Interval expected between pings."
              },
              "periodUnit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ]
              },
              "grace": {
                "type": "number",
                "description": "Grace added to the period."
              },
              "graceUnit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ]
              },
              "pingToken": {
                "type": "string",
                "description": "UUID token used to build a unique ping URL.",
                "x-format": {
                  "guid": true
                }
              }
            },
            "required": [
              "period",
              "periodUnit",
              "grace",
              "graceUnit"
            ]
          },
          "script": {
            "type": "string"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "sslCheckDomain": {
            "type": "string"
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "default": null
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          }
        },
        "required": [
          "request",
          "script"
        ]
      },
      "successRatio": {
        "type": "object",
        "properties": {
          "previousPeriod": {
            "type": "number"
          },
          "currentPeriod": {
            "type": "number"
          }
        }
      },
      "Model88": {
        "type": "object",
        "properties": {
          "successRatio": {
            "type": "object",
            "properties": {
              "previousPeriod": {
                "type": "number"
              },
              "currentPeriod": {
                "type": "number"
              }
            }
          },
          "totalEntitiesCurrentPeriod": {
            "type": "number"
          }
        }
      },
      "state": {
        "type": "string",
        "description": "Describe the event state, if the ping was received or not.",
        "example": "FAILING",
        "enum": [
          "FAILING",
          "EARLY",
          "RECEIVED",
          "GRACE",
          "LATE"
        ]
      },
      "Model89": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "state": {
            "type": "string",
            "description": "Describe the event state, if the ping was received or not.",
            "example": "FAILING",
            "enum": [
              "FAILING",
              "EARLY",
              "RECEIVED",
              "GRACE",
              "LATE"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "UTC timestamp on which we received the event.",
            "example": "2023-07-24T10:01:01.098Z"
          },
          "source": {
            "type": "string",
            "description": "Source which triggered the event.",
            "example": "HTTPS GET from Curl"
          },
          "userAgent": {
            "type": "string",
            "description": "User agent from the ping.",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
          }
        },
        "required": [
          "id"
        ]
      },
      "events": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "x-format": {
                "guid": true
              }
            },
            "state": {
              "type": "string",
              "description": "Describe the event state, if the ping was received or not.",
              "example": "FAILING",
              "enum": [
                "FAILING",
                "EARLY",
                "RECEIVED",
                "GRACE",
                "LATE"
              ]
            },
            "timestamp": {
              "type": "string",
              "format": "date",
              "description": "UTC timestamp on which we received the event.",
              "example": "2023-07-24T10:01:01.098Z"
            },
            "source": {
              "type": "string",
              "description": "Source which triggered the event.",
              "example": "HTTPS GET from Curl"
            },
            "userAgent": {
              "type": "string",
              "description": "User agent from the ping.",
              "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "stats": {
        "type": "object",
        "properties": {
          "last24Hours": {
            "type": "object",
            "properties": {
              "successRatio": {
                "type": "object",
                "properties": {
                  "previousPeriod": {
                    "type": "number"
                  },
                  "currentPeriod": {
                    "type": "number"
                  }
                }
              },
              "totalEntitiesCurrentPeriod": {
                "type": "number"
              }
            }
          },
          "last7Days": {
            "type": "object",
            "properties": {
              "successRatio": {
                "type": "object",
                "properties": {
                  "previousPeriod": {
                    "type": "number"
                  },
                  "currentPeriod": {
                    "type": "number"
                  }
                }
              },
              "totalEntitiesCurrentPeriod": {
                "type": "number"
              }
            }
          }
        }
      },
      "Model90": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-format": {
                    "guid": true
                  }
                },
                "state": {
                  "type": "string",
                  "description": "Describe the event state, if the ping was received or not.",
                  "example": "FAILING",
                  "enum": [
                    "FAILING",
                    "EARLY",
                    "RECEIVED",
                    "GRACE",
                    "LATE"
                  ]
                },
                "timestamp": {
                  "type": "string",
                  "format": "date",
                  "description": "UTC timestamp on which we received the event.",
                  "example": "2023-07-24T10:01:01.098Z"
                },
                "source": {
                  "type": "string",
                  "description": "Source which triggered the event.",
                  "example": "HTTPS GET from Curl"
                },
                "userAgent": {
                  "type": "string",
                  "description": "User agent from the ping.",
                  "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "stats": {
            "type": "object",
            "properties": {
              "last24Hours": {
                "type": "object",
                "properties": {
                  "successRatio": {
                    "type": "object",
                    "properties": {
                      "previousPeriod": {
                        "type": "number"
                      },
                      "currentPeriod": {
                        "type": "number"
                      }
                    }
                  },
                  "totalEntitiesCurrentPeriod": {
                    "type": "number"
                  }
                }
              },
              "last7Days": {
                "type": "object",
                "properties": {
                  "successRatio": {
                    "type": "object",
                    "properties": {
                      "previousPeriod": {
                        "type": "number"
                      },
                      "currentPeriod": {
                        "type": "number"
                      }
                    }
                  },
                  "totalEntitiesCurrentPeriod": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      },
      "Model91": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "events": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "state": {
                    "type": "string",
                    "description": "Describe the event state, if the ping was received or not.",
                    "example": "FAILING",
                    "enum": [
                      "FAILING",
                      "EARLY",
                      "RECEIVED",
                      "GRACE",
                      "LATE"
                    ]
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date",
                    "description": "UTC timestamp on which we received the event.",
                    "example": "2023-07-24T10:01:01.098Z"
                  },
                  "source": {
                    "type": "string",
                    "description": "Source which triggered the event.",
                    "example": "HTTPS GET from Curl"
                  },
                  "userAgent": {
                    "type": "string",
                    "description": "User agent from the ping.",
                    "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
                  }
                },
                "required": [
                  "id"
                ]
              }
            },
            "stats": {
              "type": "object",
              "properties": {
                "last24Hours": {
                  "type": "object",
                  "properties": {
                    "successRatio": {
                      "type": "object",
                      "properties": {
                        "previousPeriod": {
                          "type": "number"
                        },
                        "currentPeriod": {
                          "type": "number"
                        }
                      }
                    },
                    "totalEntitiesCurrentPeriod": {
                      "type": "number"
                    }
                  }
                },
                "last7Days": {
                  "type": "object",
                  "properties": {
                    "successRatio": {
                      "type": "object",
                      "properties": {
                        "previousPeriod": {
                          "type": "number"
                        },
                        "currentPeriod": {
                          "type": "number"
                        }
                      }
                    },
                    "totalEntitiesCurrentPeriod": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Model92": {
        "type": "object",
        "properties": {
          "event": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "x-format": {
                  "guid": true
                }
              },
              "state": {
                "type": "string",
                "description": "Describe the event state, if the ping was received or not.",
                "example": "FAILING",
                "enum": [
                  "FAILING",
                  "EARLY",
                  "RECEIVED",
                  "GRACE",
                  "LATE"
                ]
              },
              "timestamp": {
                "type": "string",
                "format": "date",
                "description": "UTC timestamp on which we received the event.",
                "example": "2023-07-24T10:01:01.098Z"
              },
              "source": {
                "type": "string",
                "description": "Source which triggered the event.",
                "example": "HTTPS GET from Curl"
              },
              "userAgent": {
                "type": "string",
                "description": "User agent from the ping.",
                "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
              }
            },
            "required": [
              "id"
            ]
          },
          "stats": {
            "type": "object",
            "properties": {
              "last24Hours": {
                "type": "object",
                "properties": {
                  "successRatio": {
                    "type": "object",
                    "properties": {
                      "previousPeriod": {
                        "type": "number"
                      },
                      "currentPeriod": {
                        "type": "number"
                      }
                    }
                  },
                  "totalEntitiesCurrentPeriod": {
                    "type": "number"
                  }
                }
              },
              "last7Days": {
                "type": "object",
                "properties": {
                  "successRatio": {
                    "type": "object",
                    "properties": {
                      "previousPeriod": {
                        "type": "number"
                      },
                      "currentPeriod": {
                        "type": "number"
                      }
                    }
                  },
                  "totalEntitiesCurrentPeriod": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      },
      "Model93": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model94": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model95": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model96": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model97": {
        "type": "string",
        "default": "MULTI_STEP",
        "enum": [
          "MULTI_STEP"
        ]
      },
      "Model98": {
        "type": "array",
        "description": "An array of one or more private locations where to run the check.",
        "example": [],
        "items": {
          "type": "string"
        }
      },
      "CheckMultiStepCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "default": "MULTI_STEP",
            "enum": [
              "MULTI_STEP"
            ]
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
            "example": [],
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks.",
            "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "An array of BCR dependency files.",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "maxLength": 1000
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "content"
              ]
            }
          }
        },
        "required": [
          "name",
          "script"
        ]
      },
      "Model99": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model100": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model101": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model102": {
        "type": "string",
        "enum": [
          "MULTI_STEP"
        ]
      },
      "CheckMultiStep": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "b2ca6d04-bccf-49f5-b0a4-c22a368dd57b"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "enum": [
              "MULTI_STEP"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks."
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertChannels": {
            "type": "object",
            "properties": {
              "email": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "address"
                  ]
                }
              },
              "webhook": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "default": ""
                    },
                    "url": {
                      "type": "string",
                      "default": ""
                    },
                    "method": {
                      "type": "string",
                      "default": "POST",
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "HEAD",
                        "DELETE",
                        "PATCH"
                      ]
                    },
                    "headers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "queryParameters": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "default": ""
                          },
                          "locked": {
                            "type": "boolean",
                            "default": false
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "slack": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "default": ""
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "sms": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "example": "+549110000000",
                      "default": ""
                    },
                    "name": {
                      "type": "string",
                      "example": "SMS Alert"
                    }
                  },
                  "required": [
                    "number",
                    "name"
                  ]
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "script"
        ]
      },
      "Model103": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model104": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model105": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model106": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model107": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "Model108": {
        "type": "string",
        "default": "MULTI_STEP",
        "enum": [
          "MULTI_STEP"
        ]
      },
      "Model109": {
        "type": "array",
        "description": "An array of one or more private locations where to run the check.",
        "example": [],
        "items": {
          "type": "string"
        }
      },
      "CheckMultiStepUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "default": "MULTI_STEP",
            "enum": [
              "MULTI_STEP"
            ]
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
            "example": [],
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [
              1,
              2,
              5,
              10,
              15,
              30,
              60,
              120,
              180,
              360,
              720,
              1440
            ]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a multi-step API interaction with the Playwright frameworks.",
            "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [],
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "An array of BCR dependency files.",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "maxLength": 1000
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "content"
              ]
            }
          }
        }
      },
      "Model110": {
        "type": "string",
        "enum": [
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "ca-central-1",
          "sa-east-1",
          "eu-west-1",
          "eu-central-1",
          "eu-west-2",
          "eu-west-3",
          "eu-north-1",
          "eu-south-1",
          "me-south-1",
          "ap-southeast-1",
          "ap-northeast-1",
          "ap-east-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "af-south-1"
        ]
      },
      "Model111": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": [
          "us-east-1",
          "eu-central-1"
        ],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model112": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": {
            "failedRunThreshold": 1
          },
          "reminders": {
            "amount": 0,
            "interval": 5
          },
          "parallelRunFailureThreshold": {
            "enabled": false,
            "percentage": 10
          }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": [
              "RUN_BASED",
              "TIME_BASED"
            ]
          },
          "reminders": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "How many reminders to send out after the initial alert notification.",
                "default": 0,
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  100000
                ]
              },
              "interval": {
                "type": "number",
                "description": "At what interval the reminders should be send.",
                "default": 5,
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "sslCertificates": {
            "type": "object",
            "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if alert notifications should be send for expiring SSL certificates."
              },
              "alertThreshold": {
                "type": "integer",
                "description": "At what moment in time to start alerting on SSL certificates."
              }
            }
          },
          "runBasedEscalation": {
            "type": "object",
            "properties": {
              "failedRunThreshold": {
                "type": "number",
                "description": "After how many failed consecutive check runs an alert notification should be send.",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ]
              }
            }
          },
          "timeBasedEscalation": {
            "type": "object",
            "properties": {
              "minutesFailingThreshold": {
                "type": "number",
                "description": "After how many minutes after a check starts failing an alert should be send.",
                "enum": [
                  5,
                  10,
                  15,
                  30
                ]
              }
            }
          },
          "parallelRunFailureThreshold": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Determines if parallel run threshold is enabled",
                "default": false
              },
              "percentage": {
                "type": "number",
                "description": "The percentage of parallel runs that should fail before an alert is triggered",
                "default": 10,
                "enum": [
                  10,
                  20,
                  30,
                  40,
                  50,
                  60,
                  70,
                  80,
                  90,
                  100
                ]
              }
            }
          }
        }
      },
      "Model113": {
        "type": "string",
        "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
        "default": null,
        "enum": [
          "2024.02",
          "2023.09",
          "2023.02",
          "2022.10",
          "2022.02"
        ]
      },
      "Model114": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": {
          "type": "object",
          "description": "Alert channel subscription.",
          "properties": {
            "alertChannelId": {
              "type": "number"
            },
            "activated": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "alertChannelId",
            "activated"
          ]
        }
      },
      "CheckUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "[Deprecated] Retry failed check runs. This property is deprecated, and `retryStrategy` can be used instead.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": {
            "type": "array",
            "description": "An array of one or more data center locations where to run this check.",
            "example": [
              "us-east-1",
              "eu-central-1"
            ],
            "items": {
              "type": "string",
              "enum": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for organizing and filtering checks.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "alertSettings": {
            "type": "object",
            "description": "Alert settings.",
            "default": {
              "escalationType": "RUN_BASED",
              "runBasedEscalation": {
                "failedRunThreshold": 1
              },
              "reminders": {
                "amount": 0,
                "interval": 5
              },
              "parallelRunFailureThreshold": {
                "enabled": false,
                "percentage": 10
              }
            },
            "properties": {
              "escalationType": {
                "type": "string",
                "description": "Determines what type of escalation to use.",
                "default": "RUN_BASED",
                "enum": [
                  "RUN_BASED",
                  "TIME_BASED"
                ]
              },
              "reminders": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "How many reminders to send out after the initial alert notification.",
                    "default": 0,
                    "enum": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      100000
                    ]
                  },
                  "interval": {
                    "type": "number",
                    "description": "At what interval the reminders should be send.",
                    "default": 5,
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "sslCertificates": {
                "type": "object",
                "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if alert notifications should be send for expiring SSL certificates."
                  },
                  "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates."
                  }
                }
              },
              "runBasedEscalation": {
                "type": "object",
                "properties": {
                  "failedRunThreshold": {
                    "type": "number",
                    "description": "After how many failed consecutive check runs an alert notification should be send.",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  }
                }
              },
              "timeBasedEscalation": {
                "type": "object",
                "properties": {
                  "minutesFailingThreshold": {
                    "type": "number",
                    "description": "After how many minutes after a check starts failing an alert should be send.",
                    "enum": [
                      5,
                      10,
                      15,
                      30
                    ]
                  }
                }
              },
              "parallelRunFailureThreshold": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Determines if parallel run threshold is enabled",
                    "default": false
                  },
                  "percentage": {
                    "type": "number",
                    "description": "The percentage of parallel runs that should fail before an alert is triggered",
                    "default": 10,
                    "enum": [
                      10,
                      20,
                      30,
                      40,
                      50,
                      60,
                      70,
                      80,
                      90,
                      100
                    ]
                  }
                }
              }
            }
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null",
            "default": null
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "default": null,
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "default": null,
            "enum": [
              "2024.02",
              "2023.09",
              "2023.02",
              "2022.10",
              "2022.02"
            ]
          },
          "alertChannelSubscriptions": {
            "type": "array",
            "description": "List of alert channel subscriptions.",
            "example": [],
            "items": {
              "type": "object",
              "description": "Alert channel subscription.",
              "properties": {
                "alertChannelId": {
                  "type": "number"
                },
                "activated": {
                  "type": "boolean",
                  "default": true
                }
              },
              "required": [
                "alertChannelId",
                "activated"
              ]
            }
          },
          "retryStrategy": {
            "type": "object",
            "description": "The strategy to determine how failed checks are retried.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Determines which type of retry strategy to use.",
                "enum": [
                  "FIXED",
                  "LINEAR",
                  "EXPONENTIAL"
                ]
              },
              "baseBackoffSeconds": {
                "type": "number",
                "description": "The number of seconds to wait before the first retry attempt.",
                "default": 60
              },
              "maxRetries": {
                "type": "number",
                "description": "The maximum number of attempts to retry the check.",
                "default": 2,
                "minimum": 1,
                "maximum": 10
              },
              "maxDurationSeconds": {
                "type": "number",
                "description": "The total amount of time to continue retrying the check.",
                "default": 600,
                "minimum": 0,
                "maximum": 600
              },
              "sameRegion": {
                "type": "boolean",
                "description": "Whether retries should be run in the same region as the initial check run.",
                "default": true
              }
            },
            "required": [
              "type"
            ]
          },
          "runParallel": {
            "type": "boolean",
            "description": "When true, the check will run in parallel in all selected locations.",
            "default": false
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "enum": [
              "API",
              "BROWSER",
              "HEARTBEAT",
              "MULTI_STEP"
            ]
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "request": {
            "type": "object"
          },
          "heartbeat": {
            "type": "object"
          },
          "script": {
            "type": "string"
          },
          "scriptPath": {
            "type": "string",
            "description": "Path of the script in the runtime."
          },
          "sslCheckDomain": {
            "type": "string"
          },
          "environmentVariables": {
            "type": "array",
            "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the environment variable (this value cannot be changed).",
                  "example": "API_KEY"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the environment variable.",
                  "example": "bAxD7biGCZL6K60Q"
                },
                "locked": {
                  "type": "boolean",
                  "description": "Used only in the UI to hide the value like a password.",
                  "default": false
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "default": null
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "default": null
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "default": null
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "default": null
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "type": "array",
            "description": "An array of one or more private locations where to run the check.",
            "example": [
              "data-center-eu"
            ],
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "An array of BCR dependency files.",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "maxLength": 1000
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "content"
              ]
            }
          }
        },
        "required": [
          "request",
          "heartbeat",
          "script"
        ]
      },
      "ClientCertificateRetrieve": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
            "example": "www.acme.com"
          },
          "cert": {
            "type": "string",
            "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
          },
          "key": {
            "type": "string",
            "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
          },
          "ca": {
            "type": "string",
            "description": "An optional CA certificate in PEM format as a string."
          },
          "id": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "host",
          "cert",
          "key",
          "id"
        ]
      },
      "ClientCertificateList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
              "example": "www.acme.com"
            },
            "cert": {
              "type": "string",
              "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
            },
            "key": {
              "type": "string",
              "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
            },
            "ca": {
              "type": "string",
              "description": "An optional CA certificate in PEM format as a string."
            },
            "id": {
              "type": "string",
              "x-format": {
                "guid": true
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "host",
            "cert",
            "key",
            "id"
          ]
        }
      },
      "ClientCertificateCreate": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "The host domain for the certificate without https://. You can use wildcards to match domains, e.g. \"*.acme.com\"",
            "example": "www.acme.com"
          },
          "cert": {
            "type": "string",
            "description": "The client certificate in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN CERTIFICATE-----\\nMIIEnTCCAoWgAwIBAgIJAL+WugL..."
          },
          "key": {
            "type": "string",
            "description": "The private key in PEM format as a string. This string should retain any line breaks, e.g. it should start similar to this \"-----BEGIN ENCRYPTED PRIVATE KEY-----\\nMIIFDjBABgkqhkiG9....\""
          },
          "ca": {
            "type": "string",
            "description": "An optional CA certificate in PEM format as a string."
          },
          "passphrase": {
            "type": "string",
            "description": "An optional passphrase for the private key. Your passphrase is stored encrypted at rest."
          }
        },
        "required": [
          "host",
          "cert",
          "key"
        ]
      },
      "width": {
        "type": "string",
        "description": "Determines whether to use the full screen or focus in the center.",
        "default": "FULL",
        "enum": [
          "FULL",
          "960PX"
        ]
      },
      "DashboardTagList": {
        "type": "array",
        "description": "A list of one or more tags that filter which checks to display on the dashboard.",
        "example": [
          "production"
        ],
        "items": {
          "type": "string"
        }
      },
      "DashboardKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-format": {
              "guid": true
            }
          },
          "rawKey": {
            "type": "string",
            "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
          },
          "maskedKey": {
            "type": "string",
            "description": "The masked key value.",
            "example": "...6a1e"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "id",
          "rawKey",
          "maskedKey",
          "created_at"
        ]
      },
      "keys": {
        "type": "array",
        "description": "Show key for private dashboard.",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "x-format": {
                "guid": true
              }
            },
            "rawKey": {
              "type": "string",
              "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
            },
            "maskedKey": {
              "type": "string",
              "description": "The masked key value.",
              "example": "...6a1e"
            },
            "created_at": {
              "type": "string",
              "format": "date"
            },
            "updated_at": {
              "type": "string",
              "format": "date"
            }
          },
          "required": [
            "id",
            "rawKey",
            "maskedKey",
            "created_at"
          ]
        }
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
            "example": "https://status.mycompany.com/"
          },
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
            "example": "status"
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file.",
            "example": "https://static.mycompany.com/static/images/logo.svg"
          },
          "favicon": {
            "type": "string",
            "description": "A URL pointing to an image file used as dashboard favicon.",
            "example": "https://static.mycompany.com/static/images/icon.svg"
          },
          "link": {
            "type": "string",
            "description": "A URL link to redirect when dashboard logo is clicked on.",
            "example": "https://www.mycompany.com/"
          },
          "description": {
            "type": "string",
            "description": "A piece of text displayed below the header or title of your dashboard.",
            "example": "My dashboard description"
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "default": "FULL",
            "enum": [
              "FULL",
              "960PX"
            ]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "default": 60,
            "enum": [
              60,
              300,
              600
            ]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "default": 60,
            "enum": [
              30,
              60,
              300
            ]
          },
          "checksPerPage": {
            "type": "number",
            "description": "Number of checks displayed per page.",
            "default": 15,
            "minimum": 1,
            "maximum": 20
          },
          "useTagsAndOperator": {
            "type": "boolean",
            "description": "When to use AND operator for tags lookup.",
            "default": false
          },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          },
          "enableIncidents": {
            "type": "boolean",
            "description": "Enable or disable incidents on the dashboard.",
            "default": false
          },
          "expandChecks": {
            "type": "boolean",
            "description": "Expand or collapse checks on the dashboard.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "A list of one or more tags that filter which checks to display on the dashboard.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "showHeader": {
            "type": "boolean",
            "description": "Show or hide header and description on the dashboard.",
            "default": true
          },
          "customCSS": {
            "type": "string",
            "description": "Custom CSS to be applied to the dashboard.",
            "default": ""
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Determines if the dashboard is public or private.",
            "default": false
          },
          "showP95": {
            "type": "boolean",
            "description": "Show or hide the P95 stats on the dashboard.",
            "default": true
          },
          "showP99": {
            "type": "boolean",
            "description": "Show or hide the P99 stats on the dashboard.",
            "default": true
          },
          "keys": {
            "type": "array",
            "description": "Show key for private dashboard.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-format": {
                    "guid": true
                  }
                },
                "rawKey": {
                  "type": "string",
                  "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                },
                "maskedKey": {
                  "type": "string",
                  "description": "The masked key value.",
                  "example": "...6a1e"
                },
                "created_at": {
                  "type": "string",
                  "format": "date"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": [
                "id",
                "rawKey",
                "maskedKey",
                "created_at"
              ]
            }
          },
          "id": {
            "type": "number"
          },
          "dashboardId": {
            "type": "string",
            "example": "1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "header": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "dashboardId",
          "created_at"
        ]
      },
      "DashboardsList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "customDomain": {
              "type": "string",
              "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
              "example": "https://status.mycompany.com/"
            },
            "customUrl": {
              "type": "string",
              "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
              "example": "status"
            },
            "logo": {
              "type": "string",
              "description": "A URL pointing to an image file.",
              "example": "https://static.mycompany.com/static/images/logo.svg"
            },
            "favicon": {
              "type": "string",
              "description": "A URL pointing to an image file used as dashboard favicon.",
              "example": "https://static.mycompany.com/static/images/icon.svg"
            },
            "link": {
              "type": "string",
              "description": "A URL link to redirect when dashboard logo is clicked on.",
              "example": "https://www.mycompany.com/"
            },
            "description": {
              "type": "string",
              "description": "A piece of text displayed below the header or title of your dashboard.",
              "example": "My dashboard description"
            },
            "width": {
              "type": "string",
              "description": "Determines whether to use the full screen or focus in the center.",
              "default": "FULL",
              "enum": [
                "FULL",
                "960PX"
              ]
            },
            "refreshRate": {
              "type": "number",
              "description": "How often to refresh the dashboard in seconds.",
              "default": 60,
              "enum": [
                60,
                300,
                600
              ]
            },
            "paginate": {
              "type": "boolean",
              "description": "Determines of pagination is on or off.",
              "default": true
            },
            "paginationRate": {
              "type": "number",
              "description": "How often to trigger pagination in seconds.",
              "default": 60,
              "enum": [
                30,
                60,
                300
              ]
            },
            "checksPerPage": {
              "type": "number",
              "description": "Number of checks displayed per page.",
              "default": 15,
              "minimum": 1,
              "maximum": 20
            },
            "useTagsAndOperator": {
              "type": "boolean",
              "description": "When to use AND operator for tags lookup.",
              "default": false
            },
            "hideTags": {
              "type": "boolean",
              "description": "Show or hide the tags on the dashboard.",
              "default": false
            },
            "enableIncidents": {
              "type": "boolean",
              "description": "Enable or disable incidents on the dashboard.",
              "default": false
            },
            "expandChecks": {
              "type": "boolean",
              "description": "Expand or collapse checks on the dashboard.",
              "default": false
            },
            "tags": {
              "type": "array",
              "description": "A list of one or more tags that filter which checks to display on the dashboard.",
              "example": [
                "production"
              ],
              "items": {
                "type": "string"
              }
            },
            "showHeader": {
              "type": "boolean",
              "description": "Show or hide header and description on the dashboard.",
              "default": true
            },
            "customCSS": {
              "type": "string",
              "description": "Custom CSS to be applied to the dashboard.",
              "default": ""
            },
            "isPrivate": {
              "type": "boolean",
              "description": "Determines if the dashboard is public or private.",
              "default": false
            },
            "showP95": {
              "type": "boolean",
              "description": "Show or hide the P95 stats on the dashboard.",
              "default": true
            },
            "showP99": {
              "type": "boolean",
              "description": "Show or hide the P99 stats on the dashboard.",
              "default": true
            },
            "keys": {
              "type": "array",
              "description": "Show key for private dashboard.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "rawKey": {
                    "type": "string",
                    "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                  },
                  "maskedKey": {
                    "type": "string",
                    "description": "The masked key value.",
                    "example": "...6a1e"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": [
                  "id",
                  "rawKey",
                  "maskedKey",
                  "created_at"
                ]
              }
            },
            "id": {
              "type": "number"
            },
            "dashboardId": {
              "type": "string",
              "example": "1"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "header": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "dashboardId",
            "created_at"
          ]
        }
      },
      "DashboardCreate": {
        "type": "object",
        "properties": {
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
            "example": "status"
          },
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
            "example": "https://status.mycompany.com/"
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file.",
            "example": "https://static.mycompany.com/static/images/logo.svg"
          },
          "favicon": {
            "type": "string",
            "description": "A URL pointing to an image file used as dashboard favicon.",
            "example": "https://static.mycompany.com/static/images/icon.svg"
          },
          "link": {
            "type": "string",
            "description": "A URL link to redirect when dashboard logo is clicked on.",
            "example": "https://www.mycompany.com/"
          },
          "header": {
            "type": "string",
            "description": "A piece of text displayed at the top of your dashboard.",
            "example": "My company status"
          },
          "description": {
            "type": "string",
            "description": "A piece of text displayed below the header or title of your dashboard.",
            "example": "My dashboard description"
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "default": "FULL",
            "enum": [
              "FULL",
              "960PX"
            ]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "default": 60,
            "enum": [
              60,
              300,
              600
            ]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "default": 60,
            "enum": [
              30,
              60,
              300
            ]
          },
          "checksPerPage": {
            "type": "number",
            "description": "Number of checks displayed per page.",
            "default": 15,
            "minimum": 1,
            "maximum": 20
          },
          "useTagsAndOperator": {
            "type": "boolean",
            "description": "When to use AND operator for tags lookup.",
            "default": false
          },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          },
          "enableIncidents": {
            "type": "boolean",
            "description": "Enable or disable incidents on the dashboard.",
            "default": false
          },
          "expandChecks": {
            "type": "boolean",
            "description": "Expand or collapse checks on the dashboard.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "A list of one or more tags that filter which checks to display on the dashboard.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "showHeader": {
            "type": "boolean",
            "description": "Show or hide header and description on the dashboard.",
            "default": true
          },
          "customCSS": {
            "type": "string",
            "description": "Custom CSS to be applied to the dashboard.",
            "default": ""
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Determines if the dashboard is public or private.",
            "default": false
          },
          "showP95": {
            "type": "boolean",
            "description": "Show or hide the P95 stats on the dashboard.",
            "default": true
          },
          "showP99": {
            "type": "boolean",
            "description": "Show or hide the P99 stats on the dashboard.",
            "default": true
          },
          "keys": {
            "type": "array",
            "description": "Show key for private dashboard.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-format": {
                    "guid": true
                  }
                },
                "rawKey": {
                  "type": "string",
                  "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                },
                "maskedKey": {
                  "type": "string",
                  "description": "The masked key value.",
                  "example": "...6a1e"
                },
                "created_at": {
                  "type": "string",
                  "format": "date"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": [
                "id",
                "rawKey",
                "maskedKey",
                "created_at"
              ]
            }
          }
        },
        "required": [
          "header"
        ]
      },
      "Model115": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
            "example": "https://status.mycompany.com/"
          },
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
            "example": "status"
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file.",
            "example": "https://static.mycompany.com/static/images/logo.svg"
          },
          "favicon": {
            "type": "string",
            "description": "A URL pointing to an image file used as dashboard favicon.",
            "example": "https://static.mycompany.com/static/images/icon.svg"
          },
          "link": {
            "type": "string",
            "description": "A URL link to redirect when dashboard logo is clicked on.",
            "example": "https://www.mycompany.com/"
          },
          "description": {
            "type": "string",
            "description": "A piece of text displayed below the header or title of your dashboard.",
            "example": "My dashboard description"
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "default": "FULL",
            "enum": [
              "FULL",
              "960PX"
            ]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "default": 60,
            "enum": [
              60,
              300,
              600
            ]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "default": 60,
            "enum": [
              30,
              60,
              300
            ]
          },
          "checksPerPage": {
            "type": "number",
            "description": "Number of checks displayed per page.",
            "default": 15,
            "minimum": 1,
            "maximum": 20
          },
          "useTagsAndOperator": {
            "type": "boolean",
            "description": "When to use AND operator for tags lookup.",
            "default": false
          },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          },
          "enableIncidents": {
            "type": "boolean",
            "description": "Enable or disable incidents on the dashboard.",
            "default": false
          },
          "expandChecks": {
            "type": "boolean",
            "description": "Expand or collapse checks on the dashboard.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "A list of one or more tags that filter which checks to display on the dashboard.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "showHeader": {
            "type": "boolean",
            "description": "Show or hide header and description on the dashboard.",
            "default": true
          },
          "customCSS": {
            "type": "string",
            "description": "Custom CSS to be applied to the dashboard.",
            "default": ""
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Determines if the dashboard is public or private.",
            "default": false
          },
          "showP95": {
            "type": "boolean",
            "description": "Show or hide the P95 stats on the dashboard.",
            "default": true
          },
          "showP99": {
            "type": "boolean",
            "description": "Show or hide the P99 stats on the dashboard.",
            "default": true
          },
          "keys": {
            "type": "array",
            "description": "Show key for private dashboard.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "x-format": {
                    "guid": true
                  }
                },
                "rawKey": {
                  "type": "string",
                  "example": "da_a89026d28a0c45cf9e11b4c3637f3912"
                },
                "maskedKey": {
                  "type": "string",
                  "description": "The masked key value.",
                  "example": "...6a1e"
                },
                "created_at": {
                  "type": "string",
                  "format": "date"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": [
                "id",
                "rawKey",
                "maskedKey",
                "created_at"
              ]
            }
          },
          "header": {
            "type": "string",
            "description": "A piece of text displayed at the top of your dashboard.",
            "example": "My company status"
          }
        }
      },
      "impact": {
        "type": "string",
        "description": "Used to indicate the impact or severity.",
        "example": "MINOR",
        "default": "MINOR",
        "enum": [
          "MAINTENANCE",
          "MAJOR",
          "MINOR"
        ]
      },
      "Model116": {
        "type": "string",
        "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
        "example": "INVESTIGATING",
        "enum": [
          "INVESTIGATING",
          "IDENTIFIED",
          "MONITORING",
          "RESOLVED",
          "MAINTENANCE"
        ]
      },
      "Model117": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
            "example": "INVESTIGATING",
            "enum": [
              "INVESTIGATING",
              "IDENTIFIED",
              "MONITORING",
              "RESOLVED",
              "MAINTENANCE"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description about the status update.",
            "example": "We found the issue and we are working on it."
          }
        },
        "required": [
          "status",
          "description"
        ]
      },
      "incidentUpdates": {
        "type": "array",
        "description": "The first incident update with the status and description. It must be only one element.",
        "example": [
          {
            "status": "INVESTIGATING",
            "description": "The service is down and affects all the regions."
          }
        ],
        "x-constraint": {
          "length": 1
        },
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
              "example": "INVESTIGATING",
              "enum": [
                "INVESTIGATING",
                "IDENTIFIED",
                "MONITORING",
                "RESOLVED",
                "MAINTENANCE"
              ]
            },
            "description": {
              "type": "string",
              "description": "A description about the status update.",
              "example": "We found the issue and we are working on it."
            }
          },
          "required": [
            "status",
            "description"
          ]
        }
      },
      "Model118": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name used to describe the incident.",
            "example": "Service outage"
          },
          "impact": {
            "type": "string",
            "description": "Used to indicate the impact or severity.",
            "example": "MINOR",
            "default": "MINOR",
            "enum": [
              "MAINTENANCE",
              "MAJOR",
              "MINOR"
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident starts to be active.",
            "example": "2022-11-25 12:34:56"
          },
          "stoppedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident turns to inactive.",
            "example": "2022-11-25 13:34:56"
          },
          "dashboardId": {
            "type": "number",
            "description": "The dashboard ID where the incident will be shown.",
            "example": 1234
          },
          "incidentUpdates": {
            "type": "array",
            "description": "The first incident update with the status and description. It must be only one element.",
            "example": [
              {
                "status": "INVESTIGATING",
                "description": "The service is down and affects all the regions."
              }
            ],
            "x-constraint": {
              "length": 1
            },
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                  "example": "INVESTIGATING",
                  "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED",
                    "MAINTENANCE"
                  ]
                },
                "description": {
                  "type": "string",
                  "description": "A description about the status update.",
                  "example": "We found the issue and we are working on it."
                }
              },
              "required": [
                "status",
                "description"
              ]
            }
          }
        },
        "required": [
          "name",
          "impact",
          "dashboardId",
          "incidentUpdates"
        ]
      },
      "Model119": {
        "type": "string",
        "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
        "example": "INVESTIGATING",
        "enum": [
          "INVESTIGATING",
          "IDENTIFIED",
          "MONITORING",
          "RESOLVED",
          "MAINTENANCE"
        ]
      },
      "Model120": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
            "example": "INVESTIGATING",
            "enum": [
              "INVESTIGATING",
              "IDENTIFIED",
              "MONITORING",
              "RESOLVED",
              "MAINTENANCE"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description about the status update.",
            "example": "We found the issue and we are working on it."
          },
          "id": {
            "type": "string",
            "description": "The incident update universal and unique identificator.",
            "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
            "x-format": {
              "guid": true
            }
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The timestamp when the incident update was created.",
            "example": "2022-09-08T19:41:28.658Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "The timestamp when last the update.",
            "example": "2022-09-08T20:41:28.658Z"
          }
        },
        "required": [
          "status",
          "description",
          "id",
          "created_at",
          "updated_at"
        ]
      },
      "Model121": {
        "type": "array",
        "description": "The first incident update with the status and description. It must be only one element.",
        "example": [
          {
            "id": "01f477f8-4293-4e1c-82bd-99797720434c",
            "status": "RESOLVED",
            "description": "The service is up and all is recovered.",
            "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
            "created_at": "2022-09-08T20:56:48.425Z",
            "updated_at": null
          },
          {
            "id": "1f0640f8-1910-4137-b91d-ed152faa92e6",
            "status": "INVESTIGATING",
            "description": "The service is down and affects all the regions.",
            "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
            "created_at": "2022-09-08T18:56:48.425Z",
            "updated_at": null
          }
        ],
        "minItems": 1,
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
              "example": "INVESTIGATING",
              "enum": [
                "INVESTIGATING",
                "IDENTIFIED",
                "MONITORING",
                "RESOLVED",
                "MAINTENANCE"
              ]
            },
            "description": {
              "type": "string",
              "description": "A description about the status update.",
              "example": "We found the issue and we are working on it."
            },
            "id": {
              "type": "string",
              "description": "The incident update universal and unique identificator.",
              "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
              "x-format": {
                "guid": true
              }
            },
            "created_at": {
              "type": "string",
              "format": "date",
              "description": "The timestamp when the incident update was created.",
              "example": "2022-09-08T19:41:28.658Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date",
              "description": "The timestamp when last the update.",
              "example": "2022-09-08T20:41:28.658Z"
            }
          },
          "required": [
            "status",
            "description",
            "id",
            "created_at",
            "updated_at"
          ]
        }
      },
      "Model122": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name used to describe the incident.",
            "example": "Service outage"
          },
          "impact": {
            "type": "string",
            "description": "Used to indicate the impact or severity.",
            "example": "MINOR",
            "default": "MINOR",
            "enum": [
              "MAINTENANCE",
              "MAJOR",
              "MINOR"
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident starts to be active.",
            "example": "2022-11-25 12:34:56"
          },
          "stoppedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident turns to inactive.",
            "example": "2022-11-25 13:34:56"
          },
          "dashboardId": {
            "type": "number",
            "description": "The dashboard ID where the incident will be shown.",
            "example": 1234
          },
          "id": {
            "type": "string",
            "description": "The incident universal and unique identificator.",
            "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
            "x-format": {
              "guid": true
            }
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The timestamp when the incident was created.",
            "example": "2022-09-08T19:41:28.658Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "The timestamp when last the incident update.",
            "example": "2022-09-08T20:41:28.658Z"
          },
          "incidentUpdates": {
            "type": "array",
            "description": "The first incident update with the status and description. It must be only one element.",
            "example": [
              {
                "id": "01f477f8-4293-4e1c-82bd-99797720434c",
                "status": "RESOLVED",
                "description": "The service is up and all is recovered.",
                "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                "created_at": "2022-09-08T20:56:48.425Z",
                "updated_at": null
              },
              {
                "id": "1f0640f8-1910-4137-b91d-ed152faa92e6",
                "status": "INVESTIGATING",
                "description": "The service is down and affects all the regions.",
                "incidentId": "3abcfdfe-ae2d-4632-8dd1-18dd871e18fc",
                "created_at": "2022-09-08T18:56:48.425Z",
                "updated_at": null
              }
            ],
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
                  "example": "INVESTIGATING",
                  "enum": [
                    "INVESTIGATING",
                    "IDENTIFIED",
                    "MONITORING",
                    "RESOLVED",
                    "MAINTENANCE"
                  ]
                },
                "description": {
                  "type": "string",
                  "description": "A description about the status update.",
                  "example": "We found the issue and we are working on it."
                },
                "id": {
                  "type": "string",
                  "description": "The incident update universal and unique identificator.",
                  "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
                  "x-format": {
                    "guid": true
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date",
                  "description": "The timestamp when the incident update was created.",
                  "example": "2022-09-08T19:41:28.658Z"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date",
                  "description": "The timestamp when last the update.",
                  "example": "2022-09-08T20:41:28.658Z"
                }
              },
              "required": [
                "status",
                "description",
                "id",
                "created_at",
                "updated_at"
              ]
            }
          }
        },
        "required": [
          "name",
          "impact",
          "dashboardId",
          "id",
          "created_at",
          "updated_at",
          "incidentUpdates"
        ]
      },
      "Model123": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name used to describe the incident.",
            "example": "Service outage"
          },
          "impact": {
            "type": "string",
            "description": "Used to indicate the impact or severity.",
            "example": "MINOR",
            "default": "MINOR",
            "enum": [
              "MAINTENANCE",
              "MAJOR",
              "MINOR"
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident starts to be active.",
            "example": "2022-11-25 12:34:56"
          },
          "stoppedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident turns to inactive.",
            "example": "2022-11-25 13:34:56"
          }
        },
        "required": [
          "name",
          "impact"
        ]
      },
      "Model124": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name used to describe the incident.",
            "example": "Service outage"
          },
          "impact": {
            "type": "string",
            "description": "Used to indicate the impact or severity.",
            "example": "MINOR",
            "default": "MINOR",
            "enum": [
              "MAINTENANCE",
              "MAJOR",
              "MINOR"
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident starts to be active.",
            "example": "2022-11-25 12:34:56"
          },
          "stoppedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Used to indicate when incident turns to inactive.",
            "example": "2022-11-25 13:34:56"
          },
          "dashboardId": {
            "type": "number",
            "description": "The dashboard ID where the incident will be shown.",
            "example": 1234
          },
          "id": {
            "type": "string",
            "description": "The incident universal and unique identificator.",
            "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
            "x-format": {
              "guid": true
            }
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The timestamp when the incident was created.",
            "example": "2022-09-08T19:41:28.658Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "The timestamp when last the incident update.",
            "example": "2022-09-08T20:41:28.658Z"
          },
          "incidentUpdates": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "impact",
          "dashboardId",
          "id",
          "created_at",
          "updated_at"
        ]
      },
      "IncidentResults": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The incident update status. Must be one of INVESTIGATING,IDENTIFIED,MONITORING,RESOLVED,MAINTENANCE",
              "example": "INVESTIGATING",
              "enum": [
                "INVESTIGATING",
                "IDENTIFIED",
                "MONITORING",
                "RESOLVED",
                "MAINTENANCE"
              ]
            },
            "description": {
              "type": "string",
              "description": "A description about the status update.",
              "example": "We found the issue and we are working on it."
            },
            "id": {
              "type": "string",
              "description": "The incident update universal and unique identificator.",
              "example": "e50ad839-1b90-4955-b716-1c6edbda57cb",
              "x-format": {
                "guid": true
              }
            },
            "created_at": {
              "type": "string",
              "format": "date",
              "description": "The timestamp when the incident update was created.",
              "example": "2022-09-08T19:41:28.658Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date",
              "description": "The timestamp when last the update.",
              "example": "2022-09-08T20:41:28.658Z"
            }
          },
          "required": [
            "status",
            "description",
            "id",
            "created_at",
            "updated_at"
          ]
        }
      },
      "Model125": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description about the status update.",
            "example": "We found the issue and we are working on it."
          }
        },
        "required": [
          "description"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "The unique identifier of this location.",
            "example": "us-east-1"
          },
          "name": {
            "type": "string",
            "description": "Friendly name of this location.",
            "example": "N. Virginia"
          }
        },
        "required": [
          "region",
          "name"
        ]
      },
      "LocationList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "region": {
              "type": "string",
              "description": "The unique identifier of this location.",
              "example": "us-east-1"
            },
            "name": {
              "type": "string",
              "description": "Friendly name of this location.",
              "example": "N. Virginia"
            }
          },
          "required": [
            "region",
            "name"
          ]
        }
      },
      "MaintenanceWindowTagList": {
        "type": "array",
        "description": "The names of the checks and groups maintenance window should apply to.",
        "example": [
          "production"
        ],
        "items": {
          "type": "string"
        }
      },
      "MaintenanceWindow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the maintenance window.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The maintenance window name.",
            "example": "Maintenance Window"
          },
          "tags": {
            "type": "array",
            "description": "The names of the checks and groups maintenance window should apply to.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "startsAt": {
            "type": "string",
            "format": "date",
            "description": "The start date of the maintenance window.",
            "example": "2022-08-24"
          },
          "endsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date of the maintenance window.",
            "example": "2022-08-25"
          },
          "repeatInterval": {
            "type": "number",
            "description": "The repeat interval of the maintenance window from the first occurance.",
            "example": "null",
            "default": null,
            "minimum": 1
          },
          "repeatUnit": {
            "type": "string",
            "description": "The repeat strategy for the maintenance window.",
            "example": "DAY"
          },
          "repeatEndsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date where the maintenance window should stop repeating.",
            "example": "null"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The creation date of the maintenance window."
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "The last date that the maintenance window was updated."
          }
        },
        "required": [
          "id",
          "name",
          "startsAt",
          "endsAt",
          "repeatUnit",
          "created_at",
          "updated_at"
        ]
      },
      "MaintenanceWindowList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "The id of the maintenance window.",
              "example": 1
            },
            "name": {
              "type": "string",
              "description": "The maintenance window name.",
              "example": "Maintenance Window"
            },
            "tags": {
              "type": "array",
              "description": "The names of the checks and groups maintenance window should apply to.",
              "example": [
                "production"
              ],
              "items": {
                "type": "string"
              }
            },
            "startsAt": {
              "type": "string",
              "format": "date",
              "description": "The start date of the maintenance window.",
              "example": "2022-08-24"
            },
            "endsAt": {
              "type": "string",
              "format": "date",
              "description": "The end date of the maintenance window.",
              "example": "2022-08-25"
            },
            "repeatInterval": {
              "type": "number",
              "description": "The repeat interval of the maintenance window from the first occurance.",
              "example": "null",
              "default": null,
              "minimum": 1
            },
            "repeatUnit": {
              "type": "string",
              "description": "The repeat strategy for the maintenance window.",
              "example": "DAY"
            },
            "repeatEndsAt": {
              "type": "string",
              "format": "date",
              "description": "The end date where the maintenance window should stop repeating.",
              "example": "null"
            },
            "created_at": {
              "type": "string",
              "format": "date",
              "description": "The creation date of the maintenance window."
            },
            "updated_at": {
              "type": "string",
              "format": "date",
              "description": "The last date that the maintenance window was updated."
            }
          },
          "required": [
            "id",
            "name",
            "startsAt",
            "endsAt",
            "repeatUnit",
            "created_at",
            "updated_at"
          ]
        }
      },
      "MaintenanceWindowCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The maintenance window name.",
            "example": "Maintenance Window"
          },
          "tags": {
            "type": "array",
            "description": "The names of the checks and groups maintenance window should apply to.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "startsAt": {
            "type": "string",
            "format": "date",
            "description": "The start date of the maintenance window.",
            "example": "2022-08-24"
          },
          "endsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date of the maintenance window.",
            "example": "2022-08-25"
          },
          "repeatInterval": {
            "type": "number",
            "description": "The repeat interval of the maintenance window from the first occurance.",
            "example": "null",
            "default": null,
            "minimum": 1
          },
          "repeatUnit": {
            "type": "string",
            "description": "The repeat strategy for the maintenance window.",
            "example": "DAY"
          },
          "repeatEndsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date where the maintenance window should stop repeating.",
            "example": "null"
          }
        },
        "required": [
          "name",
          "startsAt",
          "endsAt",
          "repeatUnit"
        ]
      },
      "CheckAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "c667b954-b207-43ac-a995-87aebff748ba",
            "x-format": {
              "guid": true
            }
          },
          "checkId": {
            "type": "string",
            "description": "The ID of the check.",
            "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
            "x-format": {
              "guid": true
            }
          },
          "privateLocationId": {
            "type": "string",
            "description": "The ID of the assigned private location.",
            "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
            "x-format": {
              "guid": true
            }
          }
        },
        "required": [
          "id",
          "checkId",
          "privateLocationId"
        ]
      },
      "checkAssignments": {
        "type": "array",
        "description": "The check this private location has assigned.",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "c667b954-b207-43ac-a995-87aebff748ba",
              "x-format": {
                "guid": true
              }
            },
            "checkId": {
              "type": "string",
              "description": "The ID of the check.",
              "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
              "x-format": {
                "guid": true
              }
            },
            "privateLocationId": {
              "type": "string",
              "description": "The ID of the assigned private location.",
              "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
              "x-format": {
                "guid": true
              }
            }
          },
          "required": [
            "id",
            "checkId",
            "privateLocationId"
          ]
        }
      },
      "GroupAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
            "x-format": {
              "guid": true
            }
          },
          "groupId": {
            "type": "number",
            "description": "The ID of the group.",
            "example": 10
          },
          "privateLocationId": {
            "type": "string",
            "description": "The ID of the assigned private location.",
            "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
            "x-format": {
              "guid": true
            }
          }
        },
        "required": [
          "id",
          "groupId",
          "privateLocationId"
        ]
      },
      "groupAssignments": {
        "type": "array",
        "description": "The group this private location has assigned.",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
              "x-format": {
                "guid": true
              }
            },
            "groupId": {
              "type": "number",
              "description": "The ID of the group.",
              "example": 10
            },
            "privateLocationId": {
              "type": "string",
              "description": "The ID of the assigned private location.",
              "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
              "x-format": {
                "guid": true
              }
            }
          },
          "required": [
            "id",
            "groupId",
            "privateLocationId"
          ]
        }
      },
      "privateLocationKeys": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
            "x-format": {
              "guid": true
            }
          },
          "rawKey": {
            "type": "string",
            "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
          },
          "maskedKey": {
            "type": "string",
            "description": "The masked key value.",
            "example": "...6a1e"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "id",
          "rawKey",
          "maskedKey",
          "created_at"
        ]
      },
      "Model126": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
              "x-format": {
                "guid": true
              }
            },
            "rawKey": {
              "type": "string",
              "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
            },
            "maskedKey": {
              "type": "string",
              "description": "The masked key value.",
              "example": "...6a1e"
            },
            "created_at": {
              "type": "string",
              "format": "date"
            },
            "updated_at": {
              "type": "string",
              "format": "date"
            }
          },
          "required": [
            "id",
            "rawKey",
            "maskedKey",
            "created_at"
          ]
        }
      },
      "privateLocationsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a02490af-537f-4234-80d3-4ce800d81d13",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "slugName": {
            "type": "string",
            "description": "Valid slug name.",
            "example": "new-private-location"
          },
          "icon": {
            "type": "string",
            "description": "The private location icon.",
            "example": "location"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "checkAssignments": {
            "type": "array",
            "description": "The check this private location has assigned.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "c667b954-b207-43ac-a995-87aebff748ba",
                  "x-format": {
                    "guid": true
                  }
                },
                "checkId": {
                  "type": "string",
                  "description": "The ID of the check.",
                  "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                  "x-format": {
                    "guid": true
                  }
                },
                "privateLocationId": {
                  "type": "string",
                  "description": "The ID of the assigned private location.",
                  "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                  "x-format": {
                    "guid": true
                  }
                }
              },
              "required": [
                "id",
                "checkId",
                "privateLocationId"
              ]
            }
          },
          "groupAssignments": {
            "type": "array",
            "description": "The group this private location has assigned.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                  "x-format": {
                    "guid": true
                  }
                },
                "groupId": {
                  "type": "number",
                  "description": "The ID of the group.",
                  "example": 10
                },
                "privateLocationId": {
                  "type": "string",
                  "description": "The ID of the assigned private location.",
                  "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                  "x-format": {
                    "guid": true
                  }
                }
              },
              "required": [
                "id",
                "groupId",
                "privateLocationId"
              ]
            }
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                  "x-format": {
                    "guid": true
                  }
                },
                "rawKey": {
                  "type": "string",
                  "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                },
                "maskedKey": {
                  "type": "string",
                  "description": "The masked key value.",
                  "example": "...6a1e"
                },
                "created_at": {
                  "type": "string",
                  "format": "date"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": [
                "id",
                "rawKey",
                "maskedKey",
                "created_at"
              ]
            }
          },
          "lastSeen": {
            "type": "string",
            "format": "date"
          },
          "agentCount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "slugName",
          "created_at"
        ]
      },
      "privateLocationsListSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "a02490af-537f-4234-80d3-4ce800d81d13",
              "x-format": {
                "guid": true
              }
            },
            "name": {
              "type": "string",
              "description": "The name assigned to the private location.",
              "example": "New Private Location"
            },
            "slugName": {
              "type": "string",
              "description": "Valid slug name.",
              "example": "new-private-location"
            },
            "icon": {
              "type": "string",
              "description": "The private location icon.",
              "example": "location"
            },
            "created_at": {
              "type": "string",
              "format": "date"
            },
            "updated_at": {
              "type": "string",
              "format": "date"
            },
            "checkAssignments": {
              "type": "array",
              "description": "The check this private location has assigned.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "c667b954-b207-43ac-a995-87aebff748ba",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "checkId": {
                    "type": "string",
                    "description": "The ID of the check.",
                    "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "privateLocationId": {
                    "type": "string",
                    "description": "The ID of the assigned private location.",
                    "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                    "x-format": {
                      "guid": true
                    }
                  }
                },
                "required": [
                  "id",
                  "checkId",
                  "privateLocationId"
                ]
              }
            },
            "groupAssignments": {
              "type": "array",
              "description": "The group this private location has assigned.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "groupId": {
                    "type": "number",
                    "description": "The ID of the group.",
                    "example": 10
                  },
                  "privateLocationId": {
                    "type": "string",
                    "description": "The ID of the assigned private location.",
                    "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                    "x-format": {
                      "guid": true
                    }
                  }
                },
                "required": [
                  "id",
                  "groupId",
                  "privateLocationId"
                ]
              }
            },
            "keys": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                    "x-format": {
                      "guid": true
                    }
                  },
                  "rawKey": {
                    "type": "string",
                    "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                  },
                  "maskedKey": {
                    "type": "string",
                    "description": "The masked key value.",
                    "example": "...6a1e"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": [
                  "id",
                  "rawKey",
                  "maskedKey",
                  "created_at"
                ]
              }
            },
            "lastSeen": {
              "type": "string",
              "format": "date"
            },
            "agentCount": {
              "type": "number"
            }
          },
          "required": [
            "id",
            "name",
            "slugName",
            "created_at"
          ]
        }
      },
      "privateLocationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "slugName": {
            "type": "string",
            "description": "Valid slug name.",
            "example": "new-private-location",
            "pattern": "^((?!((us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|(north|south)?(east|west)?)-\\d+))[a-zA-Z0-9-]{1,30})$"
          },
          "icon": {
            "type": "string",
            "example": "location",
            "default": "location"
          }
        },
        "required": [
          "name",
          "slugName"
        ]
      },
      "Model127": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
              "x-format": {
                "guid": true
              }
            },
            "rawKey": {
              "type": "string",
              "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
            },
            "maskedKey": {
              "type": "string",
              "description": "The masked key value.",
              "example": "...6a1e"
            },
            "created_at": {
              "type": "string",
              "format": "date"
            },
            "updated_at": {
              "type": "string",
              "format": "date"
            }
          },
          "required": [
            "id",
            "rawKey",
            "maskedKey",
            "created_at"
          ]
        }
      },
      "commonPrivateLocationSchemaResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a02490af-537f-4234-80d3-4ce800d81d13",
            "x-format": {
              "guid": true
            }
          },
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "slugName": {
            "type": "string",
            "description": "Valid slug name.",
            "example": "new-private-location"
          },
          "icon": {
            "type": "string",
            "description": "The private location icon.",
            "example": "location"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "checkAssignments": {
            "type": "array",
            "description": "The check this private location has assigned.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "c667b954-b207-43ac-a995-87aebff748ba",
                  "x-format": {
                    "guid": true
                  }
                },
                "checkId": {
                  "type": "string",
                  "description": "The ID of the check.",
                  "example": "44ce6487-3d23-475e-acae-6ff11b47a618",
                  "x-format": {
                    "guid": true
                  }
                },
                "privateLocationId": {
                  "type": "string",
                  "description": "The ID of the assigned private location.",
                  "example": "4252c5b7-7c6b-4241-8de2-d2f0aef0b2c4",
                  "x-format": {
                    "guid": true
                  }
                }
              },
              "required": [
                "id",
                "checkId",
                "privateLocationId"
              ]
            }
          },
          "groupAssignments": {
            "type": "array",
            "description": "The group this private location has assigned.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "b14c374d-25d2-4091-a343-93d3ce9bdbb1",
                  "x-format": {
                    "guid": true
                  }
                },
                "groupId": {
                  "type": "number",
                  "description": "The ID of the group.",
                  "example": 10
                },
                "privateLocationId": {
                  "type": "string",
                  "description": "The ID of the assigned private location.",
                  "example": "9e5d0e84-142e-4eca-8f20-19435de3a60a",
                  "x-format": {
                    "guid": true
                  }
                }
              },
              "required": [
                "id",
                "groupId",
                "privateLocationId"
              ]
            }
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "9cf1bb9a-e374-4124-a383-5308cfeff34a",
                  "x-format": {
                    "guid": true
                  }
                },
                "rawKey": {
                  "type": "string",
                  "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
                },
                "maskedKey": {
                  "type": "string",
                  "description": "The masked key value.",
                  "example": "...6a1e"
                },
                "created_at": {
                  "type": "string",
                  "format": "date"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": [
                "id",
                "rawKey",
                "maskedKey",
                "created_at"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "slugName",
          "created_at"
        ]
      },
      "privateLocationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "icon": {
            "type": "string",
            "example": "location"
          }
        },
        "required": [
          "name"
        ]
      },
      "timestamps": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "date-time"
        }
      },
      "queueSize": {
        "type": "array",
        "items": {
          "type": "number"
        }
      },
      "oldestScheduledCheckRun": {
        "type": "array",
        "items": {
          "type": "number"
        }
      },
      "privateLocationsMetricsHistoryResponseSchema": {
        "type": "object",
        "properties": {
          "timestamps": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "queueSize": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "oldestScheduledCheckRun": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "ReportingTagList": {
        "type": "array",
        "description": "Check tags.",
        "example": [
          "production"
        ],
        "items": {
          "type": "string"
        }
      },
      "ReportingAggregate": {
        "type": "object",
        "properties": {
          "successRatio": {
            "type": "number",
            "description": "Success ratio of the check over selected date range. Percentage is in decimal form.",
            "example": 50,
            "minimum": 0
          },
          "avg": {
            "type": "number",
            "description": "Average response time of the check over selected date range in milliseconds.",
            "example": 100,
            "minimum": 0
          },
          "p95": {
            "type": "number",
            "description": "P95 response time of the check over selected date range in milliseconds.",
            "example": 200,
            "minimum": 0
          },
          "p99": {
            "type": "number",
            "description": "P99 response time of the check over selected date range in milliseconds.",
            "example": 100,
            "minimum": 0
          }
        },
        "required": [
          "successRatio",
          "avg",
          "p95",
          "p99"
        ]
      },
      "Reporting": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Check name.",
            "example": "API Check"
          },
          "checkId": {
            "type": "string",
            "description": "Check ID.",
            "example": "be866b8a-3d62-492b-a178-6909983aae66"
          },
          "checkType": {
            "type": "string",
            "description": "Check type.",
            "example": "API"
          },
          "deactivated": {
            "type": "boolean",
            "description": "Check deactivated.",
            "default": false
          },
          "tags": {
            "type": "array",
            "description": "Check tags.",
            "example": [
              "production"
            ],
            "items": {
              "type": "string"
            }
          },
          "aggregate": {
            "type": "object",
            "properties": {
              "successRatio": {
                "type": "number",
                "description": "Success ratio of the check over selected date range. Percentage is in decimal form.",
                "example": 50,
                "minimum": 0
              },
              "avg": {
                "type": "number",
                "description": "Average response time of the check over selected date range in milliseconds.",
                "example": 100,
                "minimum": 0
              },
              "p95": {
                "type": "number",
                "description": "P95 response time of the check over selected date range in milliseconds.",
                "example": 200,
                "minimum": 0
              },
              "p99": {
                "type": "number",
                "description": "P99 response time of the check over selected date range in milliseconds.",
                "example": 100,
                "minimum": 0
              }
            },
            "required": [
              "successRatio",
              "avg",
              "p95",
              "p99"
            ]
          }
        },
        "required": [
          "name",
          "checkId",
          "checkType",
          "deactivated",
          "tags"
        ]
      },
      "ReportingList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Check name.",
              "example": "API Check"
            },
            "checkId": {
              "type": "string",
              "description": "Check ID.",
              "example": "be866b8a-3d62-492b-a178-6909983aae66"
            },
            "checkType": {
              "type": "string",
              "description": "Check type.",
              "example": "API"
            },
            "deactivated": {
              "type": "boolean",
              "description": "Check deactivated.",
              "default": false
            },
            "tags": {
              "type": "array",
              "description": "Check tags.",
              "example": [
                "production"
              ],
              "items": {
                "type": "string"
              }
            },
            "aggregate": {
              "type": "object",
              "properties": {
                "successRatio": {
                  "type": "number",
                  "description": "Success ratio of the check over selected date range. Percentage is in decimal form.",
                  "example": 50,
                  "minimum": 0
                },
                "avg": {
                  "type": "number",
                  "description": "Average response time of the check over selected date range in milliseconds.",
                  "example": 100,
                  "minimum": 0
                },
                "p95": {
                  "type": "number",
                  "description": "P95 response time of the check over selected date range in milliseconds.",
                  "example": 200,
                  "minimum": 0
                },
                "p99": {
                  "type": "number",
                  "description": "P99 response time of the check over selected date range in milliseconds.",
                  "example": 100,
                  "minimum": 0
                }
              },
              "required": [
                "successRatio",
                "avg",
                "p95",
                "p99"
              ]
            }
          },
          "required": [
            "name",
            "checkId",
            "checkType",
            "deactivated",
            "tags"
          ]
        }
      },
      "stage": {
        "type": "string",
        "description": "Current life stage of a runtime.",
        "example": "STABLE",
        "enum": [
          "ALPHA",
          "BETA",
          "CURRENT",
          "DEPRECATED",
          "REMOVED",
          "STABLE"
        ]
      },
      "DependenciesList": {
        "type": "object",
        "description": "An object with all dependency package names and versions as in a standard package.json.",
        "example": {
          "playwright": "1.20.1",
          "puppeteer": "13.5.1",
          "aws4": "1.11.0",
          "axios": "0.26.0",
          "btoa": "1.2.1",
          "chai": "4.3.4",
          "chai-string": "1.5.0",
          "crypto-js": "4.1.1",
          "expect": "27.5.1",
          "@faker-js/faker": "5.5.3",
          "form-data": "4.0.0",
          "jsonwebtoken": "8.5.1",
          "lodash": "4.17.21",
          "mocha": "9.2.3",
          "moment": "2.29.1",
          "node": "14.x",
          "request": "2.88.2",
          "request-promise": "4.2.2",
          "uuid": "8.3.2",
          "@opentelemetry/api": "^1.0.4",
          "@opentelemetry/sdk-trace-base": "^1.0.1"
        }
      },
      "Runtime": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of this runtime.",
            "example": "2023.09"
          },
          "multiStepSupport": {
            "type": "boolean",
            "description": "Does this runtime supports multi step checks"
          },
          "stage": {
            "type": "string",
            "description": "Current life stage of a runtime.",
            "example": "STABLE",
            "enum": [
              "ALPHA",
              "BETA",
              "CURRENT",
              "DEPRECATED",
              "REMOVED",
              "STABLE"
            ]
          },
          "runtimeEndOfLife": {
            "type": "string",
            "description": "Date which a runtime will be removed from our platform.",
            "example": "12/31/2022"
          },
          "description": {
            "type": "string",
            "description": "A short, human readable description of the main updates in this runtime.",
            "example": "Main updates are Playwright 1.15.2 and Puppeteer 10.4.0"
          },
          "dependencies": {
            "type": "object",
            "description": "An object with all dependency package names and versions as in a standard package.json.",
            "example": {
              "playwright": "1.20.1",
              "puppeteer": "13.5.1",
              "aws4": "1.11.0",
              "axios": "0.26.0",
              "btoa": "1.2.1",
              "chai": "4.3.4",
              "chai-string": "1.5.0",
              "crypto-js": "4.1.1",
              "expect": "27.5.1",
              "@faker-js/faker": "5.5.3",
              "form-data": "4.0.0",
              "jsonwebtoken": "8.5.1",
              "lodash": "4.17.21",
              "mocha": "9.2.3",
              "moment": "2.29.1",
              "node": "14.x",
              "request": "2.88.2",
              "request-promise": "4.2.2",
              "uuid": "8.3.2",
              "@opentelemetry/api": "^1.0.4",
              "@opentelemetry/sdk-trace-base": "^1.0.1"
            }
          }
        },
        "required": [
          "name",
          "multiStepSupport",
          "dependencies"
        ]
      },
      "RuntimeList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The unique name of this runtime.",
              "example": "2023.09"
            },
            "multiStepSupport": {
              "type": "boolean",
              "description": "Does this runtime supports multi step checks"
            },
            "stage": {
              "type": "string",
              "description": "Current life stage of a runtime.",
              "example": "STABLE",
              "enum": [
                "ALPHA",
                "BETA",
                "CURRENT",
                "DEPRECATED",
                "REMOVED",
                "STABLE"
              ]
            },
            "runtimeEndOfLife": {
              "type": "string",
              "description": "Date which a runtime will be removed from our platform.",
              "example": "12/31/2022"
            },
            "description": {
              "type": "string",
              "description": "A short, human readable description of the main updates in this runtime.",
              "example": "Main updates are Playwright 1.15.2 and Puppeteer 10.4.0"
            },
            "dependencies": {
              "type": "object",
              "description": "An object with all dependency package names and versions as in a standard package.json.",
              "example": {
                "playwright": "1.20.1",
                "puppeteer": "13.5.1",
                "aws4": "1.11.0",
                "axios": "0.26.0",
                "btoa": "1.2.1",
                "chai": "4.3.4",
                "chai-string": "1.5.0",
                "crypto-js": "4.1.1",
                "expect": "27.5.1",
                "@faker-js/faker": "5.5.3",
                "form-data": "4.0.0",
                "jsonwebtoken": "8.5.1",
                "lodash": "4.17.21",
                "mocha": "9.2.3",
                "moment": "2.29.1",
                "node": "14.x",
                "request": "2.88.2",
                "request-promise": "4.2.2",
                "uuid": "8.3.2",
                "@opentelemetry/api": "^1.0.4",
                "@opentelemetry/sdk-trace-base": "^1.0.1"
              }
            }
          },
          "required": [
            "name",
            "multiStepSupport",
            "dependencies"
          ]
        }
      },
      "Snippet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The snippet name.",
            "example": "Snippet"
          },
          "script": {
            "type": "string",
            "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
            "example": "request.url = request.url + '/extra'"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SnippetList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "name": {
              "type": "string",
              "description": "The snippet name.",
              "example": "Snippet"
            },
            "script": {
              "type": "string",
              "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
              "example": "request.url = request.url + '/extra'"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "SnippetCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The snippet name.",
            "example": "Snippet"
          },
          "script": {
            "type": "string",
            "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
            "example": "request.url = request.url + '/extra'"
          }
        },
        "required": [
          "name",
          "script"
        ]
      },
      "CheckGroupTrigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "token": {
            "type": "string",
            "example": "h7QMmh8c0hYw"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "called_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "groupId": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "id",
          "token",
          "created_at",
          "groupId"
        ]
      },
      "CheckTrigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "token": {
            "type": "string",
            "example": "h7QMmh8c0hYw"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "called_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          },
          "checkId": {
            "type": "string",
            "example": "4f53e645-6fd7-4801-b9ff-570b3759e5d4"
          }
        },
        "required": [
          "id",
          "token",
          "created_at",
          "checkId"
        ]
      },
      "EnvironmentVariableUpdate": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the environment variable (this value cannot be changed).",
            "example": "API_KEY"
          },
          "value": {
            "type": "string",
            "description": "The value of the environment variable.",
            "example": "bAxD7biGCZL6K60Q"
          },
          "locked": {
            "type": "boolean",
            "description": "Used only in the UI to hide the value like a password.",
            "default": false
          }
        },
        "required": [
          "value"
        ]
      }
    }
  }
}